/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Conditions2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conditions2{}

// Conditions2 The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions.
type Conditions2 struct {
	// Match type.
	Match *string `json:"match,omitempty"`
	// An array of segment conditions.
	Conditions [][]map[string]interface{} `json:"conditions,omitempty"`
}

// NewConditions2 instantiates a new Conditions2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditions2() *Conditions2 {
	this := Conditions2{}
	return &this
}

// NewConditions2WithDefaults instantiates a new Conditions2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditions2WithDefaults() *Conditions2 {
	this := Conditions2{}
	return &this
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *Conditions2) GetMatch() string {
	if o == nil || IsNil(o.Match) {
		var ret string
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions2) GetMatchOk() (*string, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *Conditions2) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given string and assigns it to the Match field.
func (o *Conditions2) SetMatch(v string) {
	o.Match = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Conditions2) GetConditions() [][]map[string]interface{} {
	if o == nil || IsNil(o.Conditions) {
		var ret [][]map[string]interface{}
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions2) GetConditionsOk() ([][]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Conditions2) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given [][]map[string]interface{} and assigns it to the Conditions field.
func (o *Conditions2) SetConditions(v [][]map[string]interface{}) {
	o.Conditions = v
}

func (o Conditions2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conditions2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableConditions2 struct {
	value *Conditions2
	isSet bool
}

func (v NullableConditions2) Get() *Conditions2 {
	return v.value
}

func (v *NullableConditions2) Set(val *Conditions2) {
	v.value = val
	v.isSet = true
}

func (v NullableConditions2) IsSet() bool {
	return v.isSet
}

func (v *NullableConditions2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditions2(val *Conditions2) *NullableConditions2 {
	return &NullableConditions2{value: val, isSet: true}
}

func (v NullableConditions2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditions2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


