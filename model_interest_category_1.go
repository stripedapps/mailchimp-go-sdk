/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InterestCategory1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterestCategory1{}

// InterestCategory1 Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application.
type InterestCategory1 struct {
	// The text description of this category. This field appears on signup forms and is often phrased as a question.
	Title string `json:"title"`
	// The order that the categories are displayed in the list. Lower numbers display first.
	DisplayOrder *int32 `json:"display_order,omitempty"`
	// Determines how this categoryâ€™s interests appear on signup forms.
	Type string `json:"type"`
}

// NewInterestCategory1 instantiates a new InterestCategory1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterestCategory1(title string, type_ string) *InterestCategory1 {
	this := InterestCategory1{}
	this.Title = title
	this.Type = type_
	return &this
}

// NewInterestCategory1WithDefaults instantiates a new InterestCategory1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterestCategory1WithDefaults() *InterestCategory1 {
	this := InterestCategory1{}
	return &this
}

// GetTitle returns the Title field value
func (o *InterestCategory1) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *InterestCategory1) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InterestCategory1) SetTitle(v string) {
	o.Title = v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *InterestCategory1) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterestCategory1) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *InterestCategory1) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *InterestCategory1) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetType returns the Type field value
func (o *InterestCategory1) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InterestCategory1) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InterestCategory1) SetType(v string) {
	o.Type = v
}

func (o InterestCategory1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterestCategory1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.DisplayOrder) {
		toSerialize["display_order"] = o.DisplayOrder
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableInterestCategory1 struct {
	value *InterestCategory1
	isSet bool
}

func (v NullableInterestCategory1) Get() *InterestCategory1 {
	return v.value
}

func (v *NullableInterestCategory1) Set(val *InterestCategory1) {
	v.value = val
	v.isSet = true
}

func (v NullableInterestCategory1) IsSet() bool {
	return v.isSet
}

func (v *NullableInterestCategory1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterestCategory1(val *InterestCategory1) *NullableInterestCategory1 {
	return &NullableInterestCategory1{value: val, isSet: true}
}

func (v NullableInterestCategory1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterestCategory1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


