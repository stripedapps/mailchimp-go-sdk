/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ABTestingOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ABTestingOptions{}

// ABTestingOptions [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
type ABTestingOptions struct {
	// The type of AB split to run.
	SplitTest *string `json:"split_test,omitempty"`
	// How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.
	PickWinner *string `json:"pick_winner,omitempty"`
	// How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.
	WaitUnits *string `json:"wait_units,omitempty"`
	// The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
	WaitTime *int32 `json:"wait_time,omitempty"`
	// The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.
	SplitSize *int32 `json:"split_size,omitempty"`
	// For campaigns split on 'From Name', the name for Group A.
	FromNameA *string `json:"from_name_a,omitempty"`
	// For campaigns split on 'From Name', the name for Group B.
	FromNameB *string `json:"from_name_b,omitempty"`
	// For campaigns split on 'From Name', the reply-to address for Group A.
	ReplyEmailA *string `json:"reply_email_a,omitempty"`
	// For campaigns split on 'From Name', the reply-to address for Group B.
	ReplyEmailB *string `json:"reply_email_b,omitempty"`
	// For campaigns split on 'Subject Line', the subject line for Group A.
	SubjectA *string `json:"subject_a,omitempty"`
	// For campaigns split on 'Subject Line', the subject line for Group B.
	SubjectB *string `json:"subject_b,omitempty"`
	// The send time for Group A.
	SendTimeA *time.Time `json:"send_time_a,omitempty"`
	// The send time for Group B.
	SendTimeB *time.Time `json:"send_time_b,omitempty"`
	// The send time for the winning version.
	SendTimeWinner *string `json:"send_time_winner,omitempty"`
}

// NewABTestingOptions instantiates a new ABTestingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewABTestingOptions() *ABTestingOptions {
	this := ABTestingOptions{}
	return &this
}

// NewABTestingOptionsWithDefaults instantiates a new ABTestingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewABTestingOptionsWithDefaults() *ABTestingOptions {
	this := ABTestingOptions{}
	return &this
}

// GetSplitTest returns the SplitTest field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSplitTest() string {
	if o == nil || IsNil(o.SplitTest) {
		var ret string
		return ret
	}
	return *o.SplitTest
}

// GetSplitTestOk returns a tuple with the SplitTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSplitTestOk() (*string, bool) {
	if o == nil || IsNil(o.SplitTest) {
		return nil, false
	}
	return o.SplitTest, true
}

// HasSplitTest returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSplitTest() bool {
	if o != nil && !IsNil(o.SplitTest) {
		return true
	}

	return false
}

// SetSplitTest gets a reference to the given string and assigns it to the SplitTest field.
func (o *ABTestingOptions) SetSplitTest(v string) {
	o.SplitTest = &v
}

// GetPickWinner returns the PickWinner field value if set, zero value otherwise.
func (o *ABTestingOptions) GetPickWinner() string {
	if o == nil || IsNil(o.PickWinner) {
		var ret string
		return ret
	}
	return *o.PickWinner
}

// GetPickWinnerOk returns a tuple with the PickWinner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetPickWinnerOk() (*string, bool) {
	if o == nil || IsNil(o.PickWinner) {
		return nil, false
	}
	return o.PickWinner, true
}

// HasPickWinner returns a boolean if a field has been set.
func (o *ABTestingOptions) HasPickWinner() bool {
	if o != nil && !IsNil(o.PickWinner) {
		return true
	}

	return false
}

// SetPickWinner gets a reference to the given string and assigns it to the PickWinner field.
func (o *ABTestingOptions) SetPickWinner(v string) {
	o.PickWinner = &v
}

// GetWaitUnits returns the WaitUnits field value if set, zero value otherwise.
func (o *ABTestingOptions) GetWaitUnits() string {
	if o == nil || IsNil(o.WaitUnits) {
		var ret string
		return ret
	}
	return *o.WaitUnits
}

// GetWaitUnitsOk returns a tuple with the WaitUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetWaitUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.WaitUnits) {
		return nil, false
	}
	return o.WaitUnits, true
}

// HasWaitUnits returns a boolean if a field has been set.
func (o *ABTestingOptions) HasWaitUnits() bool {
	if o != nil && !IsNil(o.WaitUnits) {
		return true
	}

	return false
}

// SetWaitUnits gets a reference to the given string and assigns it to the WaitUnits field.
func (o *ABTestingOptions) SetWaitUnits(v string) {
	o.WaitUnits = &v
}

// GetWaitTime returns the WaitTime field value if set, zero value otherwise.
func (o *ABTestingOptions) GetWaitTime() int32 {
	if o == nil || IsNil(o.WaitTime) {
		var ret int32
		return ret
	}
	return *o.WaitTime
}

// GetWaitTimeOk returns a tuple with the WaitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetWaitTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitTime) {
		return nil, false
	}
	return o.WaitTime, true
}

// HasWaitTime returns a boolean if a field has been set.
func (o *ABTestingOptions) HasWaitTime() bool {
	if o != nil && !IsNil(o.WaitTime) {
		return true
	}

	return false
}

// SetWaitTime gets a reference to the given int32 and assigns it to the WaitTime field.
func (o *ABTestingOptions) SetWaitTime(v int32) {
	o.WaitTime = &v
}

// GetSplitSize returns the SplitSize field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSplitSize() int32 {
	if o == nil || IsNil(o.SplitSize) {
		var ret int32
		return ret
	}
	return *o.SplitSize
}

// GetSplitSizeOk returns a tuple with the SplitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSplitSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.SplitSize) {
		return nil, false
	}
	return o.SplitSize, true
}

// HasSplitSize returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSplitSize() bool {
	if o != nil && !IsNil(o.SplitSize) {
		return true
	}

	return false
}

// SetSplitSize gets a reference to the given int32 and assigns it to the SplitSize field.
func (o *ABTestingOptions) SetSplitSize(v int32) {
	o.SplitSize = &v
}

// GetFromNameA returns the FromNameA field value if set, zero value otherwise.
func (o *ABTestingOptions) GetFromNameA() string {
	if o == nil || IsNil(o.FromNameA) {
		var ret string
		return ret
	}
	return *o.FromNameA
}

// GetFromNameAOk returns a tuple with the FromNameA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetFromNameAOk() (*string, bool) {
	if o == nil || IsNil(o.FromNameA) {
		return nil, false
	}
	return o.FromNameA, true
}

// HasFromNameA returns a boolean if a field has been set.
func (o *ABTestingOptions) HasFromNameA() bool {
	if o != nil && !IsNil(o.FromNameA) {
		return true
	}

	return false
}

// SetFromNameA gets a reference to the given string and assigns it to the FromNameA field.
func (o *ABTestingOptions) SetFromNameA(v string) {
	o.FromNameA = &v
}

// GetFromNameB returns the FromNameB field value if set, zero value otherwise.
func (o *ABTestingOptions) GetFromNameB() string {
	if o == nil || IsNil(o.FromNameB) {
		var ret string
		return ret
	}
	return *o.FromNameB
}

// GetFromNameBOk returns a tuple with the FromNameB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetFromNameBOk() (*string, bool) {
	if o == nil || IsNil(o.FromNameB) {
		return nil, false
	}
	return o.FromNameB, true
}

// HasFromNameB returns a boolean if a field has been set.
func (o *ABTestingOptions) HasFromNameB() bool {
	if o != nil && !IsNil(o.FromNameB) {
		return true
	}

	return false
}

// SetFromNameB gets a reference to the given string and assigns it to the FromNameB field.
func (o *ABTestingOptions) SetFromNameB(v string) {
	o.FromNameB = &v
}

// GetReplyEmailA returns the ReplyEmailA field value if set, zero value otherwise.
func (o *ABTestingOptions) GetReplyEmailA() string {
	if o == nil || IsNil(o.ReplyEmailA) {
		var ret string
		return ret
	}
	return *o.ReplyEmailA
}

// GetReplyEmailAOk returns a tuple with the ReplyEmailA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetReplyEmailAOk() (*string, bool) {
	if o == nil || IsNil(o.ReplyEmailA) {
		return nil, false
	}
	return o.ReplyEmailA, true
}

// HasReplyEmailA returns a boolean if a field has been set.
func (o *ABTestingOptions) HasReplyEmailA() bool {
	if o != nil && !IsNil(o.ReplyEmailA) {
		return true
	}

	return false
}

// SetReplyEmailA gets a reference to the given string and assigns it to the ReplyEmailA field.
func (o *ABTestingOptions) SetReplyEmailA(v string) {
	o.ReplyEmailA = &v
}

// GetReplyEmailB returns the ReplyEmailB field value if set, zero value otherwise.
func (o *ABTestingOptions) GetReplyEmailB() string {
	if o == nil || IsNil(o.ReplyEmailB) {
		var ret string
		return ret
	}
	return *o.ReplyEmailB
}

// GetReplyEmailBOk returns a tuple with the ReplyEmailB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetReplyEmailBOk() (*string, bool) {
	if o == nil || IsNil(o.ReplyEmailB) {
		return nil, false
	}
	return o.ReplyEmailB, true
}

// HasReplyEmailB returns a boolean if a field has been set.
func (o *ABTestingOptions) HasReplyEmailB() bool {
	if o != nil && !IsNil(o.ReplyEmailB) {
		return true
	}

	return false
}

// SetReplyEmailB gets a reference to the given string and assigns it to the ReplyEmailB field.
func (o *ABTestingOptions) SetReplyEmailB(v string) {
	o.ReplyEmailB = &v
}

// GetSubjectA returns the SubjectA field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSubjectA() string {
	if o == nil || IsNil(o.SubjectA) {
		var ret string
		return ret
	}
	return *o.SubjectA
}

// GetSubjectAOk returns a tuple with the SubjectA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSubjectAOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectA) {
		return nil, false
	}
	return o.SubjectA, true
}

// HasSubjectA returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSubjectA() bool {
	if o != nil && !IsNil(o.SubjectA) {
		return true
	}

	return false
}

// SetSubjectA gets a reference to the given string and assigns it to the SubjectA field.
func (o *ABTestingOptions) SetSubjectA(v string) {
	o.SubjectA = &v
}

// GetSubjectB returns the SubjectB field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSubjectB() string {
	if o == nil || IsNil(o.SubjectB) {
		var ret string
		return ret
	}
	return *o.SubjectB
}

// GetSubjectBOk returns a tuple with the SubjectB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSubjectBOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectB) {
		return nil, false
	}
	return o.SubjectB, true
}

// HasSubjectB returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSubjectB() bool {
	if o != nil && !IsNil(o.SubjectB) {
		return true
	}

	return false
}

// SetSubjectB gets a reference to the given string and assigns it to the SubjectB field.
func (o *ABTestingOptions) SetSubjectB(v string) {
	o.SubjectB = &v
}

// GetSendTimeA returns the SendTimeA field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSendTimeA() time.Time {
	if o == nil || IsNil(o.SendTimeA) {
		var ret time.Time
		return ret
	}
	return *o.SendTimeA
}

// GetSendTimeAOk returns a tuple with the SendTimeA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSendTimeAOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SendTimeA) {
		return nil, false
	}
	return o.SendTimeA, true
}

// HasSendTimeA returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSendTimeA() bool {
	if o != nil && !IsNil(o.SendTimeA) {
		return true
	}

	return false
}

// SetSendTimeA gets a reference to the given time.Time and assigns it to the SendTimeA field.
func (o *ABTestingOptions) SetSendTimeA(v time.Time) {
	o.SendTimeA = &v
}

// GetSendTimeB returns the SendTimeB field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSendTimeB() time.Time {
	if o == nil || IsNil(o.SendTimeB) {
		var ret time.Time
		return ret
	}
	return *o.SendTimeB
}

// GetSendTimeBOk returns a tuple with the SendTimeB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSendTimeBOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SendTimeB) {
		return nil, false
	}
	return o.SendTimeB, true
}

// HasSendTimeB returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSendTimeB() bool {
	if o != nil && !IsNil(o.SendTimeB) {
		return true
	}

	return false
}

// SetSendTimeB gets a reference to the given time.Time and assigns it to the SendTimeB field.
func (o *ABTestingOptions) SetSendTimeB(v time.Time) {
	o.SendTimeB = &v
}

// GetSendTimeWinner returns the SendTimeWinner field value if set, zero value otherwise.
func (o *ABTestingOptions) GetSendTimeWinner() string {
	if o == nil || IsNil(o.SendTimeWinner) {
		var ret string
		return ret
	}
	return *o.SendTimeWinner
}

// GetSendTimeWinnerOk returns a tuple with the SendTimeWinner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestingOptions) GetSendTimeWinnerOk() (*string, bool) {
	if o == nil || IsNil(o.SendTimeWinner) {
		return nil, false
	}
	return o.SendTimeWinner, true
}

// HasSendTimeWinner returns a boolean if a field has been set.
func (o *ABTestingOptions) HasSendTimeWinner() bool {
	if o != nil && !IsNil(o.SendTimeWinner) {
		return true
	}

	return false
}

// SetSendTimeWinner gets a reference to the given string and assigns it to the SendTimeWinner field.
func (o *ABTestingOptions) SetSendTimeWinner(v string) {
	o.SendTimeWinner = &v
}

func (o ABTestingOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ABTestingOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SplitTest) {
		toSerialize["split_test"] = o.SplitTest
	}
	if !IsNil(o.PickWinner) {
		toSerialize["pick_winner"] = o.PickWinner
	}
	if !IsNil(o.WaitUnits) {
		toSerialize["wait_units"] = o.WaitUnits
	}
	if !IsNil(o.WaitTime) {
		toSerialize["wait_time"] = o.WaitTime
	}
	if !IsNil(o.SplitSize) {
		toSerialize["split_size"] = o.SplitSize
	}
	if !IsNil(o.FromNameA) {
		toSerialize["from_name_a"] = o.FromNameA
	}
	if !IsNil(o.FromNameB) {
		toSerialize["from_name_b"] = o.FromNameB
	}
	if !IsNil(o.ReplyEmailA) {
		toSerialize["reply_email_a"] = o.ReplyEmailA
	}
	if !IsNil(o.ReplyEmailB) {
		toSerialize["reply_email_b"] = o.ReplyEmailB
	}
	if !IsNil(o.SubjectA) {
		toSerialize["subject_a"] = o.SubjectA
	}
	if !IsNil(o.SubjectB) {
		toSerialize["subject_b"] = o.SubjectB
	}
	if !IsNil(o.SendTimeA) {
		toSerialize["send_time_a"] = o.SendTimeA
	}
	if !IsNil(o.SendTimeB) {
		toSerialize["send_time_b"] = o.SendTimeB
	}
	if !IsNil(o.SendTimeWinner) {
		toSerialize["send_time_winner"] = o.SendTimeWinner
	}
	return toSerialize, nil
}

type NullableABTestingOptions struct {
	value *ABTestingOptions
	isSet bool
}

func (v NullableABTestingOptions) Get() *ABTestingOptions {
	return v.value
}

func (v *NullableABTestingOptions) Set(val *ABTestingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableABTestingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableABTestingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableABTestingOptions(val *ABTestingOptions) *NullableABTestingOptions {
	return &NullableABTestingOptions{value: val, isSet: true}
}

func (v NullableABTestingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableABTestingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


