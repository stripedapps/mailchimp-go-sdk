/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MemberNotes1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberNotes1{}

// MemberNotes1 A specific note for a specific member.
type MemberNotes1 struct {
	// The content of the note. Note length is limited to 1,000 characters.
	Note *string `json:"note,omitempty"`
}

// NewMemberNotes1 instantiates a new MemberNotes1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberNotes1() *MemberNotes1 {
	this := MemberNotes1{}
	return &this
}

// NewMemberNotes1WithDefaults instantiates a new MemberNotes1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberNotes1WithDefaults() *MemberNotes1 {
	this := MemberNotes1{}
	return &this
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *MemberNotes1) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberNotes1) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *MemberNotes1) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *MemberNotes1) SetNote(v string) {
	o.Note = &v
}

func (o MemberNotes1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberNotes1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableMemberNotes1 struct {
	value *MemberNotes1
	isSet bool
}

func (v NullableMemberNotes1) Get() *MemberNotes1 {
	return v.value
}

func (v *NullableMemberNotes1) Set(val *MemberNotes1) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberNotes1) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberNotes1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberNotes1(val *MemberNotes1) *NullableMemberNotes1 {
	return &NullableMemberNotes1{value: val, isSet: true}
}

func (v NullableMemberNotes1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberNotes1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


