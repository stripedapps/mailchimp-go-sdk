/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmailDomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailDomain{}

// EmailDomain A single email domain's performance
type EmailDomain struct {
	// The name of the domain (gmail.com, hotmail.com, yahoo.com).
	Domain *string `json:"domain,omitempty"`
	// The number of emails sent to that specific domain.
	EmailsSent *int32 `json:"emails_sent,omitempty"`
	// The number of bounces at a domain.
	Bounces *int32 `json:"bounces,omitempty"`
	// The number of opens for a domain.
	Opens *int32 `json:"opens,omitempty"`
	// The number of clicks for a domain.
	Clicks *int32 `json:"clicks,omitempty"`
	// The total number of unsubscribes for a domain.
	Unsubs *int32 `json:"unsubs,omitempty"`
	// The number of successful deliveries for a domain.
	Delivered *int32 `json:"delivered,omitempty"`
	// The percentage of total emails that went to this domain.
	EmailsPct *float32 `json:"emails_pct,omitempty"`
	// The percentage of total bounces from this domain.
	BouncesPct *float32 `json:"bounces_pct,omitempty"`
	// The percentage of total opens from this domain.
	OpensPct *float32 `json:"opens_pct,omitempty"`
	// The percentage of total clicks from this domain.
	ClicksPct *float32 `json:"clicks_pct,omitempty"`
	// The percentage of total unsubscribes from this domain.
	UnsubsPct *float32 `json:"unsubs_pct,omitempty"`
}

// NewEmailDomain instantiates a new EmailDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailDomain() *EmailDomain {
	this := EmailDomain{}
	return &this
}

// NewEmailDomainWithDefaults instantiates a new EmailDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailDomainWithDefaults() *EmailDomain {
	this := EmailDomain{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *EmailDomain) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *EmailDomain) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *EmailDomain) SetDomain(v string) {
	o.Domain = &v
}

// GetEmailsSent returns the EmailsSent field value if set, zero value otherwise.
func (o *EmailDomain) GetEmailsSent() int32 {
	if o == nil || IsNil(o.EmailsSent) {
		var ret int32
		return ret
	}
	return *o.EmailsSent
}

// GetEmailsSentOk returns a tuple with the EmailsSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetEmailsSentOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailsSent) {
		return nil, false
	}
	return o.EmailsSent, true
}

// HasEmailsSent returns a boolean if a field has been set.
func (o *EmailDomain) HasEmailsSent() bool {
	if o != nil && !IsNil(o.EmailsSent) {
		return true
	}

	return false
}

// SetEmailsSent gets a reference to the given int32 and assigns it to the EmailsSent field.
func (o *EmailDomain) SetEmailsSent(v int32) {
	o.EmailsSent = &v
}

// GetBounces returns the Bounces field value if set, zero value otherwise.
func (o *EmailDomain) GetBounces() int32 {
	if o == nil || IsNil(o.Bounces) {
		var ret int32
		return ret
	}
	return *o.Bounces
}

// GetBouncesOk returns a tuple with the Bounces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetBouncesOk() (*int32, bool) {
	if o == nil || IsNil(o.Bounces) {
		return nil, false
	}
	return o.Bounces, true
}

// HasBounces returns a boolean if a field has been set.
func (o *EmailDomain) HasBounces() bool {
	if o != nil && !IsNil(o.Bounces) {
		return true
	}

	return false
}

// SetBounces gets a reference to the given int32 and assigns it to the Bounces field.
func (o *EmailDomain) SetBounces(v int32) {
	o.Bounces = &v
}

// GetOpens returns the Opens field value if set, zero value otherwise.
func (o *EmailDomain) GetOpens() int32 {
	if o == nil || IsNil(o.Opens) {
		var ret int32
		return ret
	}
	return *o.Opens
}

// GetOpensOk returns a tuple with the Opens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetOpensOk() (*int32, bool) {
	if o == nil || IsNil(o.Opens) {
		return nil, false
	}
	return o.Opens, true
}

// HasOpens returns a boolean if a field has been set.
func (o *EmailDomain) HasOpens() bool {
	if o != nil && !IsNil(o.Opens) {
		return true
	}

	return false
}

// SetOpens gets a reference to the given int32 and assigns it to the Opens field.
func (o *EmailDomain) SetOpens(v int32) {
	o.Opens = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *EmailDomain) GetClicks() int32 {
	if o == nil || IsNil(o.Clicks) {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *EmailDomain) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *EmailDomain) SetClicks(v int32) {
	o.Clicks = &v
}

// GetUnsubs returns the Unsubs field value if set, zero value otherwise.
func (o *EmailDomain) GetUnsubs() int32 {
	if o == nil || IsNil(o.Unsubs) {
		var ret int32
		return ret
	}
	return *o.Unsubs
}

// GetUnsubsOk returns a tuple with the Unsubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetUnsubsOk() (*int32, bool) {
	if o == nil || IsNil(o.Unsubs) {
		return nil, false
	}
	return o.Unsubs, true
}

// HasUnsubs returns a boolean if a field has been set.
func (o *EmailDomain) HasUnsubs() bool {
	if o != nil && !IsNil(o.Unsubs) {
		return true
	}

	return false
}

// SetUnsubs gets a reference to the given int32 and assigns it to the Unsubs field.
func (o *EmailDomain) SetUnsubs(v int32) {
	o.Unsubs = &v
}

// GetDelivered returns the Delivered field value if set, zero value otherwise.
func (o *EmailDomain) GetDelivered() int32 {
	if o == nil || IsNil(o.Delivered) {
		var ret int32
		return ret
	}
	return *o.Delivered
}

// GetDeliveredOk returns a tuple with the Delivered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetDeliveredOk() (*int32, bool) {
	if o == nil || IsNil(o.Delivered) {
		return nil, false
	}
	return o.Delivered, true
}

// HasDelivered returns a boolean if a field has been set.
func (o *EmailDomain) HasDelivered() bool {
	if o != nil && !IsNil(o.Delivered) {
		return true
	}

	return false
}

// SetDelivered gets a reference to the given int32 and assigns it to the Delivered field.
func (o *EmailDomain) SetDelivered(v int32) {
	o.Delivered = &v
}

// GetEmailsPct returns the EmailsPct field value if set, zero value otherwise.
func (o *EmailDomain) GetEmailsPct() float32 {
	if o == nil || IsNil(o.EmailsPct) {
		var ret float32
		return ret
	}
	return *o.EmailsPct
}

// GetEmailsPctOk returns a tuple with the EmailsPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetEmailsPctOk() (*float32, bool) {
	if o == nil || IsNil(o.EmailsPct) {
		return nil, false
	}
	return o.EmailsPct, true
}

// HasEmailsPct returns a boolean if a field has been set.
func (o *EmailDomain) HasEmailsPct() bool {
	if o != nil && !IsNil(o.EmailsPct) {
		return true
	}

	return false
}

// SetEmailsPct gets a reference to the given float32 and assigns it to the EmailsPct field.
func (o *EmailDomain) SetEmailsPct(v float32) {
	o.EmailsPct = &v
}

// GetBouncesPct returns the BouncesPct field value if set, zero value otherwise.
func (o *EmailDomain) GetBouncesPct() float32 {
	if o == nil || IsNil(o.BouncesPct) {
		var ret float32
		return ret
	}
	return *o.BouncesPct
}

// GetBouncesPctOk returns a tuple with the BouncesPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetBouncesPctOk() (*float32, bool) {
	if o == nil || IsNil(o.BouncesPct) {
		return nil, false
	}
	return o.BouncesPct, true
}

// HasBouncesPct returns a boolean if a field has been set.
func (o *EmailDomain) HasBouncesPct() bool {
	if o != nil && !IsNil(o.BouncesPct) {
		return true
	}

	return false
}

// SetBouncesPct gets a reference to the given float32 and assigns it to the BouncesPct field.
func (o *EmailDomain) SetBouncesPct(v float32) {
	o.BouncesPct = &v
}

// GetOpensPct returns the OpensPct field value if set, zero value otherwise.
func (o *EmailDomain) GetOpensPct() float32 {
	if o == nil || IsNil(o.OpensPct) {
		var ret float32
		return ret
	}
	return *o.OpensPct
}

// GetOpensPctOk returns a tuple with the OpensPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetOpensPctOk() (*float32, bool) {
	if o == nil || IsNil(o.OpensPct) {
		return nil, false
	}
	return o.OpensPct, true
}

// HasOpensPct returns a boolean if a field has been set.
func (o *EmailDomain) HasOpensPct() bool {
	if o != nil && !IsNil(o.OpensPct) {
		return true
	}

	return false
}

// SetOpensPct gets a reference to the given float32 and assigns it to the OpensPct field.
func (o *EmailDomain) SetOpensPct(v float32) {
	o.OpensPct = &v
}

// GetClicksPct returns the ClicksPct field value if set, zero value otherwise.
func (o *EmailDomain) GetClicksPct() float32 {
	if o == nil || IsNil(o.ClicksPct) {
		var ret float32
		return ret
	}
	return *o.ClicksPct
}

// GetClicksPctOk returns a tuple with the ClicksPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetClicksPctOk() (*float32, bool) {
	if o == nil || IsNil(o.ClicksPct) {
		return nil, false
	}
	return o.ClicksPct, true
}

// HasClicksPct returns a boolean if a field has been set.
func (o *EmailDomain) HasClicksPct() bool {
	if o != nil && !IsNil(o.ClicksPct) {
		return true
	}

	return false
}

// SetClicksPct gets a reference to the given float32 and assigns it to the ClicksPct field.
func (o *EmailDomain) SetClicksPct(v float32) {
	o.ClicksPct = &v
}

// GetUnsubsPct returns the UnsubsPct field value if set, zero value otherwise.
func (o *EmailDomain) GetUnsubsPct() float32 {
	if o == nil || IsNil(o.UnsubsPct) {
		var ret float32
		return ret
	}
	return *o.UnsubsPct
}

// GetUnsubsPctOk returns a tuple with the UnsubsPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailDomain) GetUnsubsPctOk() (*float32, bool) {
	if o == nil || IsNil(o.UnsubsPct) {
		return nil, false
	}
	return o.UnsubsPct, true
}

// HasUnsubsPct returns a boolean if a field has been set.
func (o *EmailDomain) HasUnsubsPct() bool {
	if o != nil && !IsNil(o.UnsubsPct) {
		return true
	}

	return false
}

// SetUnsubsPct gets a reference to the given float32 and assigns it to the UnsubsPct field.
func (o *EmailDomain) SetUnsubsPct(v float32) {
	o.UnsubsPct = &v
}

func (o EmailDomain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.EmailsSent) {
		toSerialize["emails_sent"] = o.EmailsSent
	}
	if !IsNil(o.Bounces) {
		toSerialize["bounces"] = o.Bounces
	}
	if !IsNil(o.Opens) {
		toSerialize["opens"] = o.Opens
	}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}
	if !IsNil(o.Unsubs) {
		toSerialize["unsubs"] = o.Unsubs
	}
	if !IsNil(o.Delivered) {
		toSerialize["delivered"] = o.Delivered
	}
	if !IsNil(o.EmailsPct) {
		toSerialize["emails_pct"] = o.EmailsPct
	}
	if !IsNil(o.BouncesPct) {
		toSerialize["bounces_pct"] = o.BouncesPct
	}
	if !IsNil(o.OpensPct) {
		toSerialize["opens_pct"] = o.OpensPct
	}
	if !IsNil(o.ClicksPct) {
		toSerialize["clicks_pct"] = o.ClicksPct
	}
	if !IsNil(o.UnsubsPct) {
		toSerialize["unsubs_pct"] = o.UnsubsPct
	}
	return toSerialize, nil
}

type NullableEmailDomain struct {
	value *EmailDomain
	isSet bool
}

func (v NullableEmailDomain) Get() *EmailDomain {
	return v.value
}

func (v *NullableEmailDomain) Set(val *EmailDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailDomain(val *EmailDomain) *NullableEmailDomain {
	return &NullableEmailDomain{value: val, isSet: true}
}

func (v NullableEmailDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


