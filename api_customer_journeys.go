/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CustomerJourneysAPIService CustomerJourneysAPI service
type CustomerJourneysAPIService service

type ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest struct {
	ctx context.Context
	ApiService *CustomerJourneysAPIService
	journeyId int32
	stepId int32
	body *SubscriberInCustomerJourneySAudience
}

func (r ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest) Body(body SubscriberInCustomerJourneySAudience) ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest {
	r.body = &body
	return r
}

func (r ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PostCustomerJourneysJourneysIdStepsIdActionsTriggerExecute(r)
}

/*
PostCustomerJourneysJourneysIdStepsIdActionsTrigger Customer Journeys API trigger for a contact

A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param journeyId The id for the Journey.
 @param stepId The id for the Step.
 @return ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest
*/
func (a *CustomerJourneysAPIService) PostCustomerJourneysJourneysIdStepsIdActionsTrigger(ctx context.Context, journeyId int32, stepId int32) ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest {
	return ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest{
		ApiService: a,
		ctx: ctx,
		journeyId: journeyId,
		stepId: stepId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomerJourneysAPIService) PostCustomerJourneysJourneysIdStepsIdActionsTriggerExecute(r ApiPostCustomerJourneysJourneysIdStepsIdActionsTriggerRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerJourneysAPIService.PostCustomerJourneysJourneysIdStepsIdActionsTrigger")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger"
	localVarPath = strings.Replace(localVarPath, "{"+"journey_id"+"}", url.PathEscape(parameterValueToString(r.journeyId, "journeyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"step_id"+"}", url.PathEscape(parameterValueToString(r.stepId, "stepId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
