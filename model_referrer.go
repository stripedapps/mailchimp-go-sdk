/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Referrer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Referrer{}

// Referrer A single instance of a campaign referral.
type Referrer struct {
	// A referrer (truncated to 100 bytes).
	Referrer *string `json:"referrer,omitempty"`
	// The number of clicks a single referrer generated.
	Clicks *int32 `json:"clicks,omitempty"`
	// The timestamp for the first click from this referrer.
	FirstClick *time.Time `json:"first_click,omitempty"`
	// The timestamp for the last click from this referrer.
	LastClick *time.Time `json:"last_click,omitempty"`
}

// NewReferrer instantiates a new Referrer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferrer() *Referrer {
	this := Referrer{}
	return &this
}

// NewReferrerWithDefaults instantiates a new Referrer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferrerWithDefaults() *Referrer {
	this := Referrer{}
	return &this
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *Referrer) GetReferrer() string {
	if o == nil || IsNil(o.Referrer) {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Referrer) GetReferrerOk() (*string, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *Referrer) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *Referrer) SetReferrer(v string) {
	o.Referrer = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *Referrer) GetClicks() int32 {
	if o == nil || IsNil(o.Clicks) {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Referrer) GetClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *Referrer) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *Referrer) SetClicks(v int32) {
	o.Clicks = &v
}

// GetFirstClick returns the FirstClick field value if set, zero value otherwise.
func (o *Referrer) GetFirstClick() time.Time {
	if o == nil || IsNil(o.FirstClick) {
		var ret time.Time
		return ret
	}
	return *o.FirstClick
}

// GetFirstClickOk returns a tuple with the FirstClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Referrer) GetFirstClickOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FirstClick) {
		return nil, false
	}
	return o.FirstClick, true
}

// HasFirstClick returns a boolean if a field has been set.
func (o *Referrer) HasFirstClick() bool {
	if o != nil && !IsNil(o.FirstClick) {
		return true
	}

	return false
}

// SetFirstClick gets a reference to the given time.Time and assigns it to the FirstClick field.
func (o *Referrer) SetFirstClick(v time.Time) {
	o.FirstClick = &v
}

// GetLastClick returns the LastClick field value if set, zero value otherwise.
func (o *Referrer) GetLastClick() time.Time {
	if o == nil || IsNil(o.LastClick) {
		var ret time.Time
		return ret
	}
	return *o.LastClick
}

// GetLastClickOk returns a tuple with the LastClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Referrer) GetLastClickOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastClick) {
		return nil, false
	}
	return o.LastClick, true
}

// HasLastClick returns a boolean if a field has been set.
func (o *Referrer) HasLastClick() bool {
	if o != nil && !IsNil(o.LastClick) {
		return true
	}

	return false
}

// SetLastClick gets a reference to the given time.Time and assigns it to the LastClick field.
func (o *Referrer) SetLastClick(v time.Time) {
	o.LastClick = &v
}

func (o Referrer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Referrer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}
	if !IsNil(o.FirstClick) {
		toSerialize["first_click"] = o.FirstClick
	}
	if !IsNil(o.LastClick) {
		toSerialize["last_click"] = o.LastClick
	}
	return toSerialize, nil
}

type NullableReferrer struct {
	value *Referrer
	isSet bool
}

func (v NullableReferrer) Get() *Referrer {
	return v.value
}

func (v *NullableReferrer) Set(val *Referrer) {
	v.value = val
	v.isSet = true
}

func (v NullableReferrer) IsSet() bool {
	return v.isSet
}

func (v *NullableReferrer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferrer(val *Referrer) *NullableReferrer {
	return &NullableReferrer{value: val, isSet: true}
}

func (v NullableReferrer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferrer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


