/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EcommerceProductImages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcommerceProductImages{}

// EcommerceProductImages A collection of a product's images.
type EcommerceProductImages struct {
	// The store id.
	StoreId *string `json:"store_id,omitempty"`
	// The product id.
	ProductId *string `json:"product_id,omitempty"`
	// An array of objects, each representing a product image resource.
	Images []ECommerceProductImage `json:"images,omitempty"`
	// The total number of items matching the query regardless of pagination.
	TotalItems *int32 `json:"total_items,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewEcommerceProductImages instantiates a new EcommerceProductImages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcommerceProductImages() *EcommerceProductImages {
	this := EcommerceProductImages{}
	return &this
}

// NewEcommerceProductImagesWithDefaults instantiates a new EcommerceProductImages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcommerceProductImagesWithDefaults() *EcommerceProductImages {
	this := EcommerceProductImages{}
	return &this
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *EcommerceProductImages) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductImages) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *EcommerceProductImages) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *EcommerceProductImages) SetStoreId(v string) {
	o.StoreId = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *EcommerceProductImages) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductImages) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *EcommerceProductImages) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *EcommerceProductImages) SetProductId(v string) {
	o.ProductId = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *EcommerceProductImages) GetImages() []ECommerceProductImage {
	if o == nil || IsNil(o.Images) {
		var ret []ECommerceProductImage
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductImages) GetImagesOk() ([]ECommerceProductImage, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *EcommerceProductImages) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ECommerceProductImage and assigns it to the Images field.
func (o *EcommerceProductImages) SetImages(v []ECommerceProductImage) {
	o.Images = v
}

// GetTotalItems returns the TotalItems field value if set, zero value otherwise.
func (o *EcommerceProductImages) GetTotalItems() int32 {
	if o == nil || IsNil(o.TotalItems) {
		var ret int32
		return ret
	}
	return *o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductImages) GetTotalItemsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalItems) {
		return nil, false
	}
	return o.TotalItems, true
}

// HasTotalItems returns a boolean if a field has been set.
func (o *EcommerceProductImages) HasTotalItems() bool {
	if o != nil && !IsNil(o.TotalItems) {
		return true
	}

	return false
}

// SetTotalItems gets a reference to the given int32 and assigns it to the TotalItems field.
func (o *EcommerceProductImages) SetTotalItems(v int32) {
	o.TotalItems = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EcommerceProductImages) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductImages) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EcommerceProductImages) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *EcommerceProductImages) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o EcommerceProductImages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcommerceProductImages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.TotalItems) {
		toSerialize["total_items"] = o.TotalItems
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableEcommerceProductImages struct {
	value *EcommerceProductImages
	isSet bool
}

func (v NullableEcommerceProductImages) Get() *EcommerceProductImages {
	return v.value
}

func (v *NullableEcommerceProductImages) Set(val *EcommerceProductImages) {
	v.value = val
	v.isSet = true
}

func (v NullableEcommerceProductImages) IsSet() bool {
	return v.isSet
}

func (v *NullableEcommerceProductImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcommerceProductImages(val *EcommerceProductImages) *NullableEcommerceProductImages {
	return &NullableEcommerceProductImages{value: val, isSet: true}
}

func (v NullableEcommerceProductImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcommerceProductImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


