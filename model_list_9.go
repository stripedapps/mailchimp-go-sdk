/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the List9 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &List9{}

// List9 Information about a specific list segment.
type List9 struct {
	// The name of the segment.
	Name string `json:"name"`
	// An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array for an existing static segment will reset that segment and remove all members. This field cannot be provided with the `options` field.
	StaticSegment []string `json:"static_segment,omitempty"`
	Options *Conditions2 `json:"options,omitempty"`
}

// NewList9 instantiates a new List9 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewList9(name string) *List9 {
	this := List9{}
	this.Name = name
	return &this
}

// NewList9WithDefaults instantiates a new List9 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewList9WithDefaults() *List9 {
	this := List9{}
	return &this
}

// GetName returns the Name field value
func (o *List9) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *List9) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *List9) SetName(v string) {
	o.Name = v
}

// GetStaticSegment returns the StaticSegment field value if set, zero value otherwise.
func (o *List9) GetStaticSegment() []string {
	if o == nil || IsNil(o.StaticSegment) {
		var ret []string
		return ret
	}
	return o.StaticSegment
}

// GetStaticSegmentOk returns a tuple with the StaticSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *List9) GetStaticSegmentOk() ([]string, bool) {
	if o == nil || IsNil(o.StaticSegment) {
		return nil, false
	}
	return o.StaticSegment, true
}

// HasStaticSegment returns a boolean if a field has been set.
func (o *List9) HasStaticSegment() bool {
	if o != nil && !IsNil(o.StaticSegment) {
		return true
	}

	return false
}

// SetStaticSegment gets a reference to the given []string and assigns it to the StaticSegment field.
func (o *List9) SetStaticSegment(v []string) {
	o.StaticSegment = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *List9) GetOptions() Conditions2 {
	if o == nil || IsNil(o.Options) {
		var ret Conditions2
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *List9) GetOptionsOk() (*Conditions2, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *List9) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given Conditions2 and assigns it to the Options field.
func (o *List9) SetOptions(v Conditions2) {
	o.Options = &v
}

func (o List9) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o List9) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.StaticSegment) {
		toSerialize["static_segment"] = o.StaticSegment
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableList9 struct {
	value *List9
	isSet bool
}

func (v NullableList9) Get() *List9 {
	return v.value
}

func (v *NullableList9) Set(val *List9) {
	v.value = val
	v.isSet = true
}

func (v NullableList9) IsSet() bool {
	return v.isSet
}

func (v *NullableList9) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableList9(val *List9) *NullableList9 {
	return &NullableList9{value: val, isSet: true}
}

func (v NullableList9) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableList9) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


