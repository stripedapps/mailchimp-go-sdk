/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Statistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Statistics{}

// Statistics Stats for the list. Many of these are cached for at least five minutes.
type Statistics struct {
	// The number of active members in the list.
	MemberCount *int32 `json:"member_count,omitempty"`
	// The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.
	TotalContacts *int32 `json:"total_contacts,omitempty"`
	// The number of members who have unsubscribed from the list.
	UnsubscribeCount *int32 `json:"unsubscribe_count,omitempty"`
	// The number of members cleaned from the list.
	CleanedCount *int32 `json:"cleaned_count,omitempty"`
	// The number of active members in the list since the last campaign was sent.
	MemberCountSinceSend *int32 `json:"member_count_since_send,omitempty"`
	// The number of members who have unsubscribed since the last campaign was sent.
	UnsubscribeCountSinceSend *int32 `json:"unsubscribe_count_since_send,omitempty"`
	// The number of members cleaned from the list since the last campaign was sent.
	CleanedCountSinceSend *int32 `json:"cleaned_count_since_send,omitempty"`
	// The number of campaigns in any status that use this list.
	CampaignCount *int32 `json:"campaign_count,omitempty"`
	// The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.
	CampaignLastSent *time.Time `json:"campaign_last_sent,omitempty"`
	// The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL).
	MergeFieldCount *int32 `json:"merge_field_count,omitempty"`
	// The average number of subscriptions per month for the list (not returned if we haven't calculated it yet).
	AvgSubRate *float32 `json:"avg_sub_rate,omitempty"`
	// The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet).
	AvgUnsubRate *float32 `json:"avg_unsub_rate,omitempty"`
	// The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet).
	TargetSubRate *float32 `json:"target_sub_rate,omitempty"`
	// The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
	OpenRate *float32 `json:"open_rate,omitempty"`
	// The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).
	ClickRate *float32 `json:"click_rate,omitempty"`
	// The date and time of the last time someone subscribed to this list in ISO 8601 format.
	LastSubDate *time.Time `json:"last_sub_date,omitempty"`
	// The date and time of the last time someone unsubscribed from this list in ISO 8601 format.
	LastUnsubDate *time.Time `json:"last_unsub_date,omitempty"`
}

// NewStatistics instantiates a new Statistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatistics() *Statistics {
	this := Statistics{}
	return &this
}

// NewStatisticsWithDefaults instantiates a new Statistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsWithDefaults() *Statistics {
	this := Statistics{}
	return &this
}

// GetMemberCount returns the MemberCount field value if set, zero value otherwise.
func (o *Statistics) GetMemberCount() int32 {
	if o == nil || IsNil(o.MemberCount) {
		var ret int32
		return ret
	}
	return *o.MemberCount
}

// GetMemberCountOk returns a tuple with the MemberCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetMemberCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MemberCount) {
		return nil, false
	}
	return o.MemberCount, true
}

// HasMemberCount returns a boolean if a field has been set.
func (o *Statistics) HasMemberCount() bool {
	if o != nil && !IsNil(o.MemberCount) {
		return true
	}

	return false
}

// SetMemberCount gets a reference to the given int32 and assigns it to the MemberCount field.
func (o *Statistics) SetMemberCount(v int32) {
	o.MemberCount = &v
}

// GetTotalContacts returns the TotalContacts field value if set, zero value otherwise.
func (o *Statistics) GetTotalContacts() int32 {
	if o == nil || IsNil(o.TotalContacts) {
		var ret int32
		return ret
	}
	return *o.TotalContacts
}

// GetTotalContactsOk returns a tuple with the TotalContacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetTotalContactsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalContacts) {
		return nil, false
	}
	return o.TotalContacts, true
}

// HasTotalContacts returns a boolean if a field has been set.
func (o *Statistics) HasTotalContacts() bool {
	if o != nil && !IsNil(o.TotalContacts) {
		return true
	}

	return false
}

// SetTotalContacts gets a reference to the given int32 and assigns it to the TotalContacts field.
func (o *Statistics) SetTotalContacts(v int32) {
	o.TotalContacts = &v
}

// GetUnsubscribeCount returns the UnsubscribeCount field value if set, zero value otherwise.
func (o *Statistics) GetUnsubscribeCount() int32 {
	if o == nil || IsNil(o.UnsubscribeCount) {
		var ret int32
		return ret
	}
	return *o.UnsubscribeCount
}

// GetUnsubscribeCountOk returns a tuple with the UnsubscribeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetUnsubscribeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnsubscribeCount) {
		return nil, false
	}
	return o.UnsubscribeCount, true
}

// HasUnsubscribeCount returns a boolean if a field has been set.
func (o *Statistics) HasUnsubscribeCount() bool {
	if o != nil && !IsNil(o.UnsubscribeCount) {
		return true
	}

	return false
}

// SetUnsubscribeCount gets a reference to the given int32 and assigns it to the UnsubscribeCount field.
func (o *Statistics) SetUnsubscribeCount(v int32) {
	o.UnsubscribeCount = &v
}

// GetCleanedCount returns the CleanedCount field value if set, zero value otherwise.
func (o *Statistics) GetCleanedCount() int32 {
	if o == nil || IsNil(o.CleanedCount) {
		var ret int32
		return ret
	}
	return *o.CleanedCount
}

// GetCleanedCountOk returns a tuple with the CleanedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetCleanedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CleanedCount) {
		return nil, false
	}
	return o.CleanedCount, true
}

// HasCleanedCount returns a boolean if a field has been set.
func (o *Statistics) HasCleanedCount() bool {
	if o != nil && !IsNil(o.CleanedCount) {
		return true
	}

	return false
}

// SetCleanedCount gets a reference to the given int32 and assigns it to the CleanedCount field.
func (o *Statistics) SetCleanedCount(v int32) {
	o.CleanedCount = &v
}

// GetMemberCountSinceSend returns the MemberCountSinceSend field value if set, zero value otherwise.
func (o *Statistics) GetMemberCountSinceSend() int32 {
	if o == nil || IsNil(o.MemberCountSinceSend) {
		var ret int32
		return ret
	}
	return *o.MemberCountSinceSend
}

// GetMemberCountSinceSendOk returns a tuple with the MemberCountSinceSend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetMemberCountSinceSendOk() (*int32, bool) {
	if o == nil || IsNil(o.MemberCountSinceSend) {
		return nil, false
	}
	return o.MemberCountSinceSend, true
}

// HasMemberCountSinceSend returns a boolean if a field has been set.
func (o *Statistics) HasMemberCountSinceSend() bool {
	if o != nil && !IsNil(o.MemberCountSinceSend) {
		return true
	}

	return false
}

// SetMemberCountSinceSend gets a reference to the given int32 and assigns it to the MemberCountSinceSend field.
func (o *Statistics) SetMemberCountSinceSend(v int32) {
	o.MemberCountSinceSend = &v
}

// GetUnsubscribeCountSinceSend returns the UnsubscribeCountSinceSend field value if set, zero value otherwise.
func (o *Statistics) GetUnsubscribeCountSinceSend() int32 {
	if o == nil || IsNil(o.UnsubscribeCountSinceSend) {
		var ret int32
		return ret
	}
	return *o.UnsubscribeCountSinceSend
}

// GetUnsubscribeCountSinceSendOk returns a tuple with the UnsubscribeCountSinceSend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetUnsubscribeCountSinceSendOk() (*int32, bool) {
	if o == nil || IsNil(o.UnsubscribeCountSinceSend) {
		return nil, false
	}
	return o.UnsubscribeCountSinceSend, true
}

// HasUnsubscribeCountSinceSend returns a boolean if a field has been set.
func (o *Statistics) HasUnsubscribeCountSinceSend() bool {
	if o != nil && !IsNil(o.UnsubscribeCountSinceSend) {
		return true
	}

	return false
}

// SetUnsubscribeCountSinceSend gets a reference to the given int32 and assigns it to the UnsubscribeCountSinceSend field.
func (o *Statistics) SetUnsubscribeCountSinceSend(v int32) {
	o.UnsubscribeCountSinceSend = &v
}

// GetCleanedCountSinceSend returns the CleanedCountSinceSend field value if set, zero value otherwise.
func (o *Statistics) GetCleanedCountSinceSend() int32 {
	if o == nil || IsNil(o.CleanedCountSinceSend) {
		var ret int32
		return ret
	}
	return *o.CleanedCountSinceSend
}

// GetCleanedCountSinceSendOk returns a tuple with the CleanedCountSinceSend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetCleanedCountSinceSendOk() (*int32, bool) {
	if o == nil || IsNil(o.CleanedCountSinceSend) {
		return nil, false
	}
	return o.CleanedCountSinceSend, true
}

// HasCleanedCountSinceSend returns a boolean if a field has been set.
func (o *Statistics) HasCleanedCountSinceSend() bool {
	if o != nil && !IsNil(o.CleanedCountSinceSend) {
		return true
	}

	return false
}

// SetCleanedCountSinceSend gets a reference to the given int32 and assigns it to the CleanedCountSinceSend field.
func (o *Statistics) SetCleanedCountSinceSend(v int32) {
	o.CleanedCountSinceSend = &v
}

// GetCampaignCount returns the CampaignCount field value if set, zero value otherwise.
func (o *Statistics) GetCampaignCount() int32 {
	if o == nil || IsNil(o.CampaignCount) {
		var ret int32
		return ret
	}
	return *o.CampaignCount
}

// GetCampaignCountOk returns a tuple with the CampaignCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetCampaignCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CampaignCount) {
		return nil, false
	}
	return o.CampaignCount, true
}

// HasCampaignCount returns a boolean if a field has been set.
func (o *Statistics) HasCampaignCount() bool {
	if o != nil && !IsNil(o.CampaignCount) {
		return true
	}

	return false
}

// SetCampaignCount gets a reference to the given int32 and assigns it to the CampaignCount field.
func (o *Statistics) SetCampaignCount(v int32) {
	o.CampaignCount = &v
}

// GetCampaignLastSent returns the CampaignLastSent field value if set, zero value otherwise.
func (o *Statistics) GetCampaignLastSent() time.Time {
	if o == nil || IsNil(o.CampaignLastSent) {
		var ret time.Time
		return ret
	}
	return *o.CampaignLastSent
}

// GetCampaignLastSentOk returns a tuple with the CampaignLastSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetCampaignLastSentOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CampaignLastSent) {
		return nil, false
	}
	return o.CampaignLastSent, true
}

// HasCampaignLastSent returns a boolean if a field has been set.
func (o *Statistics) HasCampaignLastSent() bool {
	if o != nil && !IsNil(o.CampaignLastSent) {
		return true
	}

	return false
}

// SetCampaignLastSent gets a reference to the given time.Time and assigns it to the CampaignLastSent field.
func (o *Statistics) SetCampaignLastSent(v time.Time) {
	o.CampaignLastSent = &v
}

// GetMergeFieldCount returns the MergeFieldCount field value if set, zero value otherwise.
func (o *Statistics) GetMergeFieldCount() int32 {
	if o == nil || IsNil(o.MergeFieldCount) {
		var ret int32
		return ret
	}
	return *o.MergeFieldCount
}

// GetMergeFieldCountOk returns a tuple with the MergeFieldCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetMergeFieldCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MergeFieldCount) {
		return nil, false
	}
	return o.MergeFieldCount, true
}

// HasMergeFieldCount returns a boolean if a field has been set.
func (o *Statistics) HasMergeFieldCount() bool {
	if o != nil && !IsNil(o.MergeFieldCount) {
		return true
	}

	return false
}

// SetMergeFieldCount gets a reference to the given int32 and assigns it to the MergeFieldCount field.
func (o *Statistics) SetMergeFieldCount(v int32) {
	o.MergeFieldCount = &v
}

// GetAvgSubRate returns the AvgSubRate field value if set, zero value otherwise.
func (o *Statistics) GetAvgSubRate() float32 {
	if o == nil || IsNil(o.AvgSubRate) {
		var ret float32
		return ret
	}
	return *o.AvgSubRate
}

// GetAvgSubRateOk returns a tuple with the AvgSubRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetAvgSubRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgSubRate) {
		return nil, false
	}
	return o.AvgSubRate, true
}

// HasAvgSubRate returns a boolean if a field has been set.
func (o *Statistics) HasAvgSubRate() bool {
	if o != nil && !IsNil(o.AvgSubRate) {
		return true
	}

	return false
}

// SetAvgSubRate gets a reference to the given float32 and assigns it to the AvgSubRate field.
func (o *Statistics) SetAvgSubRate(v float32) {
	o.AvgSubRate = &v
}

// GetAvgUnsubRate returns the AvgUnsubRate field value if set, zero value otherwise.
func (o *Statistics) GetAvgUnsubRate() float32 {
	if o == nil || IsNil(o.AvgUnsubRate) {
		var ret float32
		return ret
	}
	return *o.AvgUnsubRate
}

// GetAvgUnsubRateOk returns a tuple with the AvgUnsubRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetAvgUnsubRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgUnsubRate) {
		return nil, false
	}
	return o.AvgUnsubRate, true
}

// HasAvgUnsubRate returns a boolean if a field has been set.
func (o *Statistics) HasAvgUnsubRate() bool {
	if o != nil && !IsNil(o.AvgUnsubRate) {
		return true
	}

	return false
}

// SetAvgUnsubRate gets a reference to the given float32 and assigns it to the AvgUnsubRate field.
func (o *Statistics) SetAvgUnsubRate(v float32) {
	o.AvgUnsubRate = &v
}

// GetTargetSubRate returns the TargetSubRate field value if set, zero value otherwise.
func (o *Statistics) GetTargetSubRate() float32 {
	if o == nil || IsNil(o.TargetSubRate) {
		var ret float32
		return ret
	}
	return *o.TargetSubRate
}

// GetTargetSubRateOk returns a tuple with the TargetSubRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetTargetSubRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TargetSubRate) {
		return nil, false
	}
	return o.TargetSubRate, true
}

// HasTargetSubRate returns a boolean if a field has been set.
func (o *Statistics) HasTargetSubRate() bool {
	if o != nil && !IsNil(o.TargetSubRate) {
		return true
	}

	return false
}

// SetTargetSubRate gets a reference to the given float32 and assigns it to the TargetSubRate field.
func (o *Statistics) SetTargetSubRate(v float32) {
	o.TargetSubRate = &v
}

// GetOpenRate returns the OpenRate field value if set, zero value otherwise.
func (o *Statistics) GetOpenRate() float32 {
	if o == nil || IsNil(o.OpenRate) {
		var ret float32
		return ret
	}
	return *o.OpenRate
}

// GetOpenRateOk returns a tuple with the OpenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetOpenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenRate) {
		return nil, false
	}
	return o.OpenRate, true
}

// HasOpenRate returns a boolean if a field has been set.
func (o *Statistics) HasOpenRate() bool {
	if o != nil && !IsNil(o.OpenRate) {
		return true
	}

	return false
}

// SetOpenRate gets a reference to the given float32 and assigns it to the OpenRate field.
func (o *Statistics) SetOpenRate(v float32) {
	o.OpenRate = &v
}

// GetClickRate returns the ClickRate field value if set, zero value otherwise.
func (o *Statistics) GetClickRate() float32 {
	if o == nil || IsNil(o.ClickRate) {
		var ret float32
		return ret
	}
	return *o.ClickRate
}

// GetClickRateOk returns a tuple with the ClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickRate) {
		return nil, false
	}
	return o.ClickRate, true
}

// HasClickRate returns a boolean if a field has been set.
func (o *Statistics) HasClickRate() bool {
	if o != nil && !IsNil(o.ClickRate) {
		return true
	}

	return false
}

// SetClickRate gets a reference to the given float32 and assigns it to the ClickRate field.
func (o *Statistics) SetClickRate(v float32) {
	o.ClickRate = &v
}

// GetLastSubDate returns the LastSubDate field value if set, zero value otherwise.
func (o *Statistics) GetLastSubDate() time.Time {
	if o == nil || IsNil(o.LastSubDate) {
		var ret time.Time
		return ret
	}
	return *o.LastSubDate
}

// GetLastSubDateOk returns a tuple with the LastSubDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetLastSubDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSubDate) {
		return nil, false
	}
	return o.LastSubDate, true
}

// HasLastSubDate returns a boolean if a field has been set.
func (o *Statistics) HasLastSubDate() bool {
	if o != nil && !IsNil(o.LastSubDate) {
		return true
	}

	return false
}

// SetLastSubDate gets a reference to the given time.Time and assigns it to the LastSubDate field.
func (o *Statistics) SetLastSubDate(v time.Time) {
	o.LastSubDate = &v
}

// GetLastUnsubDate returns the LastUnsubDate field value if set, zero value otherwise.
func (o *Statistics) GetLastUnsubDate() time.Time {
	if o == nil || IsNil(o.LastUnsubDate) {
		var ret time.Time
		return ret
	}
	return *o.LastUnsubDate
}

// GetLastUnsubDateOk returns a tuple with the LastUnsubDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetLastUnsubDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUnsubDate) {
		return nil, false
	}
	return o.LastUnsubDate, true
}

// HasLastUnsubDate returns a boolean if a field has been set.
func (o *Statistics) HasLastUnsubDate() bool {
	if o != nil && !IsNil(o.LastUnsubDate) {
		return true
	}

	return false
}

// SetLastUnsubDate gets a reference to the given time.Time and assigns it to the LastUnsubDate field.
func (o *Statistics) SetLastUnsubDate(v time.Time) {
	o.LastUnsubDate = &v
}

func (o Statistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Statistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberCount) {
		toSerialize["member_count"] = o.MemberCount
	}
	if !IsNil(o.TotalContacts) {
		toSerialize["total_contacts"] = o.TotalContacts
	}
	if !IsNil(o.UnsubscribeCount) {
		toSerialize["unsubscribe_count"] = o.UnsubscribeCount
	}
	if !IsNil(o.CleanedCount) {
		toSerialize["cleaned_count"] = o.CleanedCount
	}
	if !IsNil(o.MemberCountSinceSend) {
		toSerialize["member_count_since_send"] = o.MemberCountSinceSend
	}
	if !IsNil(o.UnsubscribeCountSinceSend) {
		toSerialize["unsubscribe_count_since_send"] = o.UnsubscribeCountSinceSend
	}
	if !IsNil(o.CleanedCountSinceSend) {
		toSerialize["cleaned_count_since_send"] = o.CleanedCountSinceSend
	}
	if !IsNil(o.CampaignCount) {
		toSerialize["campaign_count"] = o.CampaignCount
	}
	if !IsNil(o.CampaignLastSent) {
		toSerialize["campaign_last_sent"] = o.CampaignLastSent
	}
	if !IsNil(o.MergeFieldCount) {
		toSerialize["merge_field_count"] = o.MergeFieldCount
	}
	if !IsNil(o.AvgSubRate) {
		toSerialize["avg_sub_rate"] = o.AvgSubRate
	}
	if !IsNil(o.AvgUnsubRate) {
		toSerialize["avg_unsub_rate"] = o.AvgUnsubRate
	}
	if !IsNil(o.TargetSubRate) {
		toSerialize["target_sub_rate"] = o.TargetSubRate
	}
	if !IsNil(o.OpenRate) {
		toSerialize["open_rate"] = o.OpenRate
	}
	if !IsNil(o.ClickRate) {
		toSerialize["click_rate"] = o.ClickRate
	}
	if !IsNil(o.LastSubDate) {
		toSerialize["last_sub_date"] = o.LastSubDate
	}
	if !IsNil(o.LastUnsubDate) {
		toSerialize["last_unsub_date"] = o.LastUnsubDate
	}
	return toSerialize, nil
}

type NullableStatistics struct {
	value *Statistics
	isSet bool
}

func (v NullableStatistics) Get() *Statistics {
	return v.value
}

func (v *NullableStatistics) Set(val *Statistics) {
	v.value = val
	v.isSet = true
}

func (v NullableStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatistics(val *Statistics) *NullableStatistics {
	return &NullableStatistics{value: val, isSet: true}
}

func (v NullableStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


