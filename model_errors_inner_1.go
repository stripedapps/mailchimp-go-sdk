/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorsInner1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorsInner1{}

// ErrorsInner1 struct for ErrorsInner1
type ErrorsInner1 struct {
	// Email addresses added to the static segment or removed
	EmailAddresses []string `json:"email_addresses,omitempty"`
	// The error message indicating why the email addresses could not be added or updated.
	Error *string `json:"error,omitempty"`
}

// NewErrorsInner1 instantiates a new ErrorsInner1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsInner1() *ErrorsInner1 {
	this := ErrorsInner1{}
	return &this
}

// NewErrorsInner1WithDefaults instantiates a new ErrorsInner1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsInner1WithDefaults() *ErrorsInner1 {
	this := ErrorsInner1{}
	return &this
}

// GetEmailAddresses returns the EmailAddresses field value if set, zero value otherwise.
func (o *ErrorsInner1) GetEmailAddresses() []string {
	if o == nil || IsNil(o.EmailAddresses) {
		var ret []string
		return ret
	}
	return o.EmailAddresses
}

// GetEmailAddressesOk returns a tuple with the EmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsInner1) GetEmailAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailAddresses) {
		return nil, false
	}
	return o.EmailAddresses, true
}

// HasEmailAddresses returns a boolean if a field has been set.
func (o *ErrorsInner1) HasEmailAddresses() bool {
	if o != nil && !IsNil(o.EmailAddresses) {
		return true
	}

	return false
}

// SetEmailAddresses gets a reference to the given []string and assigns it to the EmailAddresses field.
func (o *ErrorsInner1) SetEmailAddresses(v []string) {
	o.EmailAddresses = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrorsInner1) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsInner1) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrorsInner1) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ErrorsInner1) SetError(v string) {
	o.Error = &v
}

func (o ErrorsInner1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorsInner1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailAddresses) {
		toSerialize["email_addresses"] = o.EmailAddresses
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableErrorsInner1 struct {
	value *ErrorsInner1
	isSet bool
}

func (v NullableErrorsInner1) Get() *ErrorsInner1 {
	return v.value
}

func (v *NullableErrorsInner1) Set(val *ErrorsInner1) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsInner1) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsInner1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsInner1(val *ErrorsInner1) *NullableErrorsInner1 {
	return &NullableErrorsInner1{value: val, isSet: true}
}

func (v NullableErrorsInner1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsInner1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


