/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MemberActivityEvents1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberActivityEvents1{}

// MemberActivityEvents1 The member activity events for a given member.
type MemberActivityEvents1 struct {
	// An array of objects, each representing a contact event. There are multiple possible types, see the [activity schema documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#activity-schemas).
	Activity []map[string]interface{} `json:"activity,omitempty"`
	// The MD5 hash of the lowercase version of the list member's email address.
	EmailId *string `json:"email_id,omitempty"`
	// The list id.
	ListId *string `json:"list_id,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewMemberActivityEvents1 instantiates a new MemberActivityEvents1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberActivityEvents1() *MemberActivityEvents1 {
	this := MemberActivityEvents1{}
	return &this
}

// NewMemberActivityEvents1WithDefaults instantiates a new MemberActivityEvents1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberActivityEvents1WithDefaults() *MemberActivityEvents1 {
	this := MemberActivityEvents1{}
	return &this
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *MemberActivityEvents1) GetActivity() []map[string]interface{} {
	if o == nil || IsNil(o.Activity) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberActivityEvents1) GetActivityOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *MemberActivityEvents1) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given []map[string]interface{} and assigns it to the Activity field.
func (o *MemberActivityEvents1) SetActivity(v []map[string]interface{}) {
	o.Activity = v
}

// GetEmailId returns the EmailId field value if set, zero value otherwise.
func (o *MemberActivityEvents1) GetEmailId() string {
	if o == nil || IsNil(o.EmailId) {
		var ret string
		return ret
	}
	return *o.EmailId
}

// GetEmailIdOk returns a tuple with the EmailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberActivityEvents1) GetEmailIdOk() (*string, bool) {
	if o == nil || IsNil(o.EmailId) {
		return nil, false
	}
	return o.EmailId, true
}

// HasEmailId returns a boolean if a field has been set.
func (o *MemberActivityEvents1) HasEmailId() bool {
	if o != nil && !IsNil(o.EmailId) {
		return true
	}

	return false
}

// SetEmailId gets a reference to the given string and assigns it to the EmailId field.
func (o *MemberActivityEvents1) SetEmailId(v string) {
	o.EmailId = &v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *MemberActivityEvents1) GetListId() string {
	if o == nil || IsNil(o.ListId) {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberActivityEvents1) GetListIdOk() (*string, bool) {
	if o == nil || IsNil(o.ListId) {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *MemberActivityEvents1) HasListId() bool {
	if o != nil && !IsNil(o.ListId) {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *MemberActivityEvents1) SetListId(v string) {
	o.ListId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *MemberActivityEvents1) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberActivityEvents1) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *MemberActivityEvents1) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *MemberActivityEvents1) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o MemberActivityEvents1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberActivityEvents1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.EmailId) {
		toSerialize["email_id"] = o.EmailId
	}
	if !IsNil(o.ListId) {
		toSerialize["list_id"] = o.ListId
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableMemberActivityEvents1 struct {
	value *MemberActivityEvents1
	isSet bool
}

func (v NullableMemberActivityEvents1) Get() *MemberActivityEvents1 {
	return v.value
}

func (v *NullableMemberActivityEvents1) Set(val *MemberActivityEvents1) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberActivityEvents1) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberActivityEvents1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberActivityEvents1(val *MemberActivityEvents1) *NullableMemberActivityEvents1 {
	return &NullableMemberActivityEvents1{value: val, isSet: true}
}

func (v NullableMemberActivityEvents1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberActivityEvents1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


