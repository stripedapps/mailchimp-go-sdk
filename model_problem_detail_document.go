/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProblemDetailDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetailDocument{}

// ProblemDetailDocument An error generated by the Mailchimp API. Conforms to IETF draft 'draft-nottingham-http-problem-06'.
type ProblemDetailDocument struct {
	// An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
	Type string `json:"type"`
	// A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
	Title string `json:"title"`
	// The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
	Status int32 `json:"status"`
	// A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors).
	Detail string `json:"detail"`
	// A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
	Instance string `json:"instance"`
}

// NewProblemDetailDocument instantiates a new ProblemDetailDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetailDocument(type_ string, title string, status int32, detail string, instance string) *ProblemDetailDocument {
	this := ProblemDetailDocument{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Detail = detail
	this.Instance = instance
	return &this
}

// NewProblemDetailDocumentWithDefaults instantiates a new ProblemDetailDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetailDocumentWithDefaults() *ProblemDetailDocument {
	this := ProblemDetailDocument{}
	return &this
}

// GetType returns the Type field value
func (o *ProblemDetailDocument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProblemDetailDocument) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProblemDetailDocument) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *ProblemDetailDocument) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProblemDetailDocument) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProblemDetailDocument) SetTitle(v string) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *ProblemDetailDocument) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProblemDetailDocument) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProblemDetailDocument) SetStatus(v int32) {
	o.Status = v
}

// GetDetail returns the Detail field value
func (o *ProblemDetailDocument) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ProblemDetailDocument) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ProblemDetailDocument) SetDetail(v string) {
	o.Detail = v
}

// GetInstance returns the Instance field value
func (o *ProblemDetailDocument) GetInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *ProblemDetailDocument) GetInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *ProblemDetailDocument) SetInstance(v string) {
	o.Instance = v
}

func (o ProblemDetailDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetailDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["title"] = o.Title
	toSerialize["status"] = o.Status
	toSerialize["detail"] = o.Detail
	toSerialize["instance"] = o.Instance
	return toSerialize, nil
}

type NullableProblemDetailDocument struct {
	value *ProblemDetailDocument
	isSet bool
}

func (v NullableProblemDetailDocument) Get() *ProblemDetailDocument {
	return v.value
}

func (v *NullableProblemDetailDocument) Set(val *ProblemDetailDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetailDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetailDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetailDocument(val *ProblemDetailDocument) *NullableProblemDetailDocument {
	return &NullableProblemDetailDocument{value: val, isSet: true}
}

func (v NullableProblemDetailDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetailDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


