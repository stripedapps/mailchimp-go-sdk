/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ECommerceProductVariant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECommerceProductVariant{}

// ECommerceProductVariant Information about a specific product variant.
type ECommerceProductVariant struct {
	// A unique identifier for the product variant.
	Id *string `json:"id,omitempty"`
	// The title of a product variant.
	Title *string `json:"title,omitempty"`
	// The URL for a product variant.
	Url *string `json:"url,omitempty"`
	// The stock keeping unit (SKU) of a product variant.
	Sku *string `json:"sku,omitempty"`
	// The price of a product variant.
	Price *float32 `json:"price,omitempty"`
	// The inventory quantity of a product variant.
	InventoryQuantity *int32 `json:"inventory_quantity,omitempty"`
	// The image URL for a product variant.
	ImageUrl *string `json:"image_url,omitempty"`
	// The backorders of a product variant.
	Backorders *string `json:"backorders,omitempty"`
	// The visibility of a product variant.
	Visibility *string `json:"visibility,omitempty"`
	// The date and time the product was created in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time the product was last updated in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewECommerceProductVariant instantiates a new ECommerceProductVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECommerceProductVariant() *ECommerceProductVariant {
	this := ECommerceProductVariant{}
	return &this
}

// NewECommerceProductVariantWithDefaults instantiates a new ECommerceProductVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECommerceProductVariantWithDefaults() *ECommerceProductVariant {
	this := ECommerceProductVariant{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ECommerceProductVariant) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ECommerceProductVariant) SetTitle(v string) {
	o.Title = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ECommerceProductVariant) SetUrl(v string) {
	o.Url = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ECommerceProductVariant) SetSku(v string) {
	o.Sku = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ECommerceProductVariant) SetPrice(v float32) {
	o.Price = &v
}

// GetInventoryQuantity returns the InventoryQuantity field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetInventoryQuantity() int32 {
	if o == nil || IsNil(o.InventoryQuantity) {
		var ret int32
		return ret
	}
	return *o.InventoryQuantity
}

// GetInventoryQuantityOk returns a tuple with the InventoryQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetInventoryQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.InventoryQuantity) {
		return nil, false
	}
	return o.InventoryQuantity, true
}

// HasInventoryQuantity returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasInventoryQuantity() bool {
	if o != nil && !IsNil(o.InventoryQuantity) {
		return true
	}

	return false
}

// SetInventoryQuantity gets a reference to the given int32 and assigns it to the InventoryQuantity field.
func (o *ECommerceProductVariant) SetInventoryQuantity(v int32) {
	o.InventoryQuantity = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ECommerceProductVariant) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetBackorders returns the Backorders field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetBackorders() string {
	if o == nil || IsNil(o.Backorders) {
		var ret string
		return ret
	}
	return *o.Backorders
}

// GetBackordersOk returns a tuple with the Backorders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetBackordersOk() (*string, bool) {
	if o == nil || IsNil(o.Backorders) {
		return nil, false
	}
	return o.Backorders, true
}

// HasBackorders returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasBackorders() bool {
	if o != nil && !IsNil(o.Backorders) {
		return true
	}

	return false
}

// SetBackorders gets a reference to the given string and assigns it to the Backorders field.
func (o *ECommerceProductVariant) SetBackorders(v string) {
	o.Backorders = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ECommerceProductVariant) SetVisibility(v string) {
	o.Visibility = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ECommerceProductVariant) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ECommerceProductVariant) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ECommerceProductVariant) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ECommerceProductVariant) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *ECommerceProductVariant) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o ECommerceProductVariant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECommerceProductVariant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.InventoryQuantity) {
		toSerialize["inventory_quantity"] = o.InventoryQuantity
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["image_url"] = o.ImageUrl
	}
	if !IsNil(o.Backorders) {
		toSerialize["backorders"] = o.Backorders
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableECommerceProductVariant struct {
	value *ECommerceProductVariant
	isSet bool
}

func (v NullableECommerceProductVariant) Get() *ECommerceProductVariant {
	return v.value
}

func (v *NullableECommerceProductVariant) Set(val *ECommerceProductVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableECommerceProductVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableECommerceProductVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECommerceProductVariant(val *ECommerceProductVariant) *NullableECommerceProductVariant {
	return &NullableECommerceProductVariant{value: val, isSet: true}
}

func (v NullableECommerceProductVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECommerceProductVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


