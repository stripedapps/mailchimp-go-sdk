/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Interest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interest{}

// Interest Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application.
type Interest struct {
	// The id for the interest category.
	CategoryId *string `json:"category_id,omitempty"`
	// The ID for the list that this interest belongs to.
	ListId *string `json:"list_id,omitempty"`
	// The ID for the interest.
	Id *string `json:"id,omitempty"`
	// The name of the interest. This can be shown publicly on a subscription form.
	Name *string `json:"name,omitempty"`
	// The number of subscribers associated with this interest.
	SubscriberCount *string `json:"subscriber_count,omitempty"`
	// The display order for interests.
	DisplayOrder *int32 `json:"display_order,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewInterest instantiates a new Interest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterest() *Interest {
	this := Interest{}
	return &this
}

// NewInterestWithDefaults instantiates a new Interest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterestWithDefaults() *Interest {
	this := Interest{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *Interest) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *Interest) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *Interest) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *Interest) GetListId() string {
	if o == nil || IsNil(o.ListId) {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetListIdOk() (*string, bool) {
	if o == nil || IsNil(o.ListId) {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *Interest) HasListId() bool {
	if o != nil && !IsNil(o.ListId) {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *Interest) SetListId(v string) {
	o.ListId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Interest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Interest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Interest) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Interest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Interest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Interest) SetName(v string) {
	o.Name = &v
}

// GetSubscriberCount returns the SubscriberCount field value if set, zero value otherwise.
func (o *Interest) GetSubscriberCount() string {
	if o == nil || IsNil(o.SubscriberCount) {
		var ret string
		return ret
	}
	return *o.SubscriberCount
}

// GetSubscriberCountOk returns a tuple with the SubscriberCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetSubscriberCountOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberCount) {
		return nil, false
	}
	return o.SubscriberCount, true
}

// HasSubscriberCount returns a boolean if a field has been set.
func (o *Interest) HasSubscriberCount() bool {
	if o != nil && !IsNil(o.SubscriberCount) {
		return true
	}

	return false
}

// SetSubscriberCount gets a reference to the given string and assigns it to the SubscriberCount field.
func (o *Interest) SetSubscriberCount(v string) {
	o.SubscriberCount = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *Interest) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *Interest) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *Interest) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Interest) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Interest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *Interest) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o Interest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.ListId) {
		toSerialize["list_id"] = o.ListId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SubscriberCount) {
		toSerialize["subscriber_count"] = o.SubscriberCount
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["display_order"] = o.DisplayOrder
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableInterest struct {
	value *Interest
	isSet bool
}

func (v NullableInterest) Get() *Interest {
	return v.value
}

func (v *NullableInterest) Set(val *Interest) {
	v.value = val
	v.isSet = true
}

func (v NullableInterest) IsSet() bool {
	return v.isSet
}

func (v *NullableInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterest(val *Interest) *NullableInterest {
	return &NullableInterest{value: val, isSet: true}
}

func (v NullableInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


