/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Response{}

// Response A single question and the response to that question.
type Response struct {
	// The unique ID for this question.
	QuestionId *string `json:"question_id,omitempty"`
	// The type of question this is.
	QuestionType *string `json:"question_type,omitempty"`
	// The survey question.
	Query *string `json:"query,omitempty"`
	// The answer to this survey question.
	Answer *string `json:"answer,omitempty"`
}

// NewResponse instantiates a new Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponse() *Response {
	this := Response{}
	return &this
}

// NewResponseWithDefaults instantiates a new Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithDefaults() *Response {
	this := Response{}
	return &this
}

// GetQuestionId returns the QuestionId field value if set, zero value otherwise.
func (o *Response) GetQuestionId() string {
	if o == nil || IsNil(o.QuestionId) {
		var ret string
		return ret
	}
	return *o.QuestionId
}

// GetQuestionIdOk returns a tuple with the QuestionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetQuestionIdOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionId) {
		return nil, false
	}
	return o.QuestionId, true
}

// HasQuestionId returns a boolean if a field has been set.
func (o *Response) HasQuestionId() bool {
	if o != nil && !IsNil(o.QuestionId) {
		return true
	}

	return false
}

// SetQuestionId gets a reference to the given string and assigns it to the QuestionId field.
func (o *Response) SetQuestionId(v string) {
	o.QuestionId = &v
}

// GetQuestionType returns the QuestionType field value if set, zero value otherwise.
func (o *Response) GetQuestionType() string {
	if o == nil || IsNil(o.QuestionType) {
		var ret string
		return ret
	}
	return *o.QuestionType
}

// GetQuestionTypeOk returns a tuple with the QuestionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetQuestionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionType) {
		return nil, false
	}
	return o.QuestionType, true
}

// HasQuestionType returns a boolean if a field has been set.
func (o *Response) HasQuestionType() bool {
	if o != nil && !IsNil(o.QuestionType) {
		return true
	}

	return false
}

// SetQuestionType gets a reference to the given string and assigns it to the QuestionType field.
func (o *Response) SetQuestionType(v string) {
	o.QuestionType = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Response) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Response) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Response) SetQuery(v string) {
	o.Query = &v
}

// GetAnswer returns the Answer field value if set, zero value otherwise.
func (o *Response) GetAnswer() string {
	if o == nil || IsNil(o.Answer) {
		var ret string
		return ret
	}
	return *o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAnswerOk() (*string, bool) {
	if o == nil || IsNil(o.Answer) {
		return nil, false
	}
	return o.Answer, true
}

// HasAnswer returns a boolean if a field has been set.
func (o *Response) HasAnswer() bool {
	if o != nil && !IsNil(o.Answer) {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given string and assigns it to the Answer field.
func (o *Response) SetAnswer(v string) {
	o.Answer = &v
}

func (o Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuestionId) {
		toSerialize["question_id"] = o.QuestionId
	}
	if !IsNil(o.QuestionType) {
		toSerialize["question_type"] = o.QuestionType
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Answer) {
		toSerialize["answer"] = o.Answer
	}
	return toSerialize, nil
}

type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


