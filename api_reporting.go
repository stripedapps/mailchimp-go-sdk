/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReportingAPIService ReportingAPI service
type ReportingAPIService service

type ApiGetReportingFacebookAdsRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	sortField *string
	sortDir *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingFacebookAdsRequest) Fields(fields []string) ApiGetReportingFacebookAdsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingFacebookAdsRequest) ExcludeFields(excludeFields []string) ApiGetReportingFacebookAdsRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ApiGetReportingFacebookAdsRequest) Count(count int32) ApiGetReportingFacebookAdsRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ApiGetReportingFacebookAdsRequest) Offset(offset int32) ApiGetReportingFacebookAdsRequest {
	r.offset = &offset
	return r
}

// Returns files sorted by the specified field.
func (r ApiGetReportingFacebookAdsRequest) SortField(sortField string) ApiGetReportingFacebookAdsRequest {
	r.sortField = &sortField
	return r
}

// Determines the order direction for sorted results.
func (r ApiGetReportingFacebookAdsRequest) SortDir(sortDir string) ApiGetReportingFacebookAdsRequest {
	r.sortDir = &sortDir
	return r
}

func (r ApiGetReportingFacebookAdsRequest) Execute() (*GetReportingFacebookAds200Response, *http.Response, error) {
	return r.ApiService.GetReportingFacebookAdsExecute(r)
}

/*
GetReportingFacebookAds List facebook ads reports

Get reports of Facebook ads.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportingFacebookAdsRequest
*/
func (a *ReportingAPIService) GetReportingFacebookAds(ctx context.Context) ApiGetReportingFacebookAdsRequest {
	return ApiGetReportingFacebookAdsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetReportingFacebookAds200Response
func (a *ReportingAPIService) GetReportingFacebookAdsExecute(r ApiGetReportingFacebookAdsRequest) (*GetReportingFacebookAds200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingFacebookAds200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingFacebookAds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/facebook-ads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingFacebookAdsIdRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingFacebookAdsIdRequest) Fields(fields []string) ApiGetReportingFacebookAdsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingFacebookAdsIdRequest) ExcludeFields(excludeFields []string) ApiGetReportingFacebookAdsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGetReportingFacebookAdsIdRequest) Execute() (*GetReportingFacebookAdsId200Response, *http.Response, error) {
	return r.ApiService.GetReportingFacebookAdsIdExecute(r)
}

/*
GetReportingFacebookAdsId Get facebook ad report

Get report of a Facebook ad.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ApiGetReportingFacebookAdsIdRequest
*/
func (a *ReportingAPIService) GetReportingFacebookAdsId(ctx context.Context, outreachId string) ApiGetReportingFacebookAdsIdRequest {
	return ApiGetReportingFacebookAdsIdRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return GetReportingFacebookAdsId200Response
func (a *ReportingAPIService) GetReportingFacebookAdsIdExecute(r ApiGetReportingFacebookAdsIdRequest) (*GetReportingFacebookAdsId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingFacebookAdsId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingFacebookAdsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/facebook-ads/{outreach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	sortField *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) Fields(fields []string) ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) ExcludeFields(excludeFields []string) ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) Count(count int32) ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) Offset(offset int32) ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest {
	r.offset = &offset
	return r
}

// Returns files sorted by the specified field.
func (r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) SortField(sortField string) ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest {
	r.sortField = &sortField
	return r
}

func (r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) Execute() (*GetReportsIdEcommerceProductActivity200Response, *http.Response, error) {
	return r.ApiService.GetReportingFacebookAdsIdEcommerceProductActivityExecute(r)
}

/*
GetReportingFacebookAdsIdEcommerceProductActivity List facebook ecommerce report

Get breakdown of product activity for an outreach.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest
*/
func (a *ReportingAPIService) GetReportingFacebookAdsIdEcommerceProductActivity(ctx context.Context, outreachId string) ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest {
	return ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return GetReportsIdEcommerceProductActivity200Response
func (a *ReportingAPIService) GetReportingFacebookAdsIdEcommerceProductActivityExecute(r ApiGetReportingFacebookAdsIdEcommerceProductActivityRequest) (*GetReportsIdEcommerceProductActivity200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportsIdEcommerceProductActivity200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingFacebookAdsIdEcommerceProductActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingLandingPagesRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingLandingPagesRequest) Fields(fields []string) ApiGetReportingLandingPagesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingLandingPagesRequest) ExcludeFields(excludeFields []string) ApiGetReportingLandingPagesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ApiGetReportingLandingPagesRequest) Count(count int32) ApiGetReportingLandingPagesRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ApiGetReportingLandingPagesRequest) Offset(offset int32) ApiGetReportingLandingPagesRequest {
	r.offset = &offset
	return r
}

func (r ApiGetReportingLandingPagesRequest) Execute() (*GetReportingLandingPages200Response, *http.Response, error) {
	return r.ApiService.GetReportingLandingPagesExecute(r)
}

/*
GetReportingLandingPages List landing pages reports

Get reports of landing pages.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportingLandingPagesRequest
*/
func (a *ReportingAPIService) GetReportingLandingPages(ctx context.Context) ApiGetReportingLandingPagesRequest {
	return ApiGetReportingLandingPagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetReportingLandingPages200Response
func (a *ReportingAPIService) GetReportingLandingPagesExecute(r ApiGetReportingLandingPagesRequest) (*GetReportingLandingPages200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingLandingPages200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingLandingPages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/landing-pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingLandingPagesIdRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingLandingPagesIdRequest) Fields(fields []string) ApiGetReportingLandingPagesIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingLandingPagesIdRequest) ExcludeFields(excludeFields []string) ApiGetReportingLandingPagesIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGetReportingLandingPagesIdRequest) Execute() (*LandingPageReport, *http.Response, error) {
	return r.ApiService.GetReportingLandingPagesIdExecute(r)
}

/*
GetReportingLandingPagesId Get landing page report

Get report of a landing page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ApiGetReportingLandingPagesIdRequest
*/
func (a *ReportingAPIService) GetReportingLandingPagesId(ctx context.Context, outreachId string) ApiGetReportingLandingPagesIdRequest {
	return ApiGetReportingLandingPagesIdRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return LandingPageReport
func (a *ReportingAPIService) GetReportingLandingPagesIdExecute(r ApiGetReportingLandingPagesIdRequest) (*LandingPageReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LandingPageReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingLandingPagesId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/landing-pages/{outreach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysRequest) Fields(fields []string) ApiGetReportingSurveysRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysRequest) ExcludeFields(excludeFields []string) ApiGetReportingSurveysRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ApiGetReportingSurveysRequest) Count(count int32) ApiGetReportingSurveysRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ApiGetReportingSurveysRequest) Offset(offset int32) ApiGetReportingSurveysRequest {
	r.offset = &offset
	return r
}

func (r ApiGetReportingSurveysRequest) Execute() (*GetReportingSurveys200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysExecute(r)
}

/*
GetReportingSurveys List survey reports

Get reports for surveys.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReportingSurveysRequest
*/
func (a *ReportingAPIService) GetReportingSurveys(ctx context.Context) ApiGetReportingSurveysRequest {
	return ApiGetReportingSurveysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetReportingSurveys200Response
func (a *ReportingAPIService) GetReportingSurveysExecute(r ApiGetReportingSurveysRequest) (*GetReportingSurveys200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveys200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysIdRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdRequest) Fields(fields []string) ApiGetReportingSurveysIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdRequest) ExcludeFields(excludeFields []string) ApiGetReportingSurveysIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGetReportingSurveysIdRequest) Execute() (*SurveyReport, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdExecute(r)
}

/*
GetReportingSurveysId Get survey report

Get report for a survey.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ApiGetReportingSurveysIdRequest
*/
func (a *ReportingAPIService) GetReportingSurveysId(ctx context.Context, outreachId string) ApiGetReportingSurveysIdRequest {
	return ApiGetReportingSurveysIdRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return SurveyReport
func (a *ReportingAPIService) GetReportingSurveysIdExecute(r ApiGetReportingSurveysIdRequest) (*SurveyReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{outreach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysIdQuestionsRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdQuestionsRequest) Fields(fields []string) ApiGetReportingSurveysIdQuestionsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdQuestionsRequest) ExcludeFields(excludeFields []string) ApiGetReportingSurveysIdQuestionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGetReportingSurveysIdQuestionsRequest) Execute() (*GetReportingSurveysIdQuestions200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdQuestionsExecute(r)
}

/*
GetReportingSurveysIdQuestions List survey question reports

Get reports for survey questions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ApiGetReportingSurveysIdQuestionsRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdQuestions(ctx context.Context, outreachId string) ApiGetReportingSurveysIdQuestionsRequest {
	return ApiGetReportingSurveysIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return GetReportingSurveysIdQuestions200Response
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsExecute(r ApiGetReportingSurveysIdQuestionsRequest) (*GetReportingSurveysIdQuestions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveysIdQuestions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{outreach_id}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysIdQuestionsIdRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	questionId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdQuestionsIdRequest) Fields(fields []string) ApiGetReportingSurveysIdQuestionsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdQuestionsIdRequest) ExcludeFields(excludeFields []string) ApiGetReportingSurveysIdQuestionsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ApiGetReportingSurveysIdQuestionsIdRequest) Execute() (*SurveyQuestionReport, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdQuestionsIdExecute(r)
}

/*
GetReportingSurveysIdQuestionsId Get survey question report

Get report for a survey question.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @param questionId The ID of the survey question.
 @return ApiGetReportingSurveysIdQuestionsIdRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsId(ctx context.Context, outreachId string, questionId string) ApiGetReportingSurveysIdQuestionsIdRequest {
	return ApiGetReportingSurveysIdQuestionsIdRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
		questionId: questionId,
	}
}

// Execute executes the request
//  @return SurveyQuestionReport
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsIdExecute(r ApiGetReportingSurveysIdQuestionsIdRequest) (*SurveyQuestionReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyQuestionReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdQuestionsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{outreach_id}/questions/{question_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"question_id"+"}", url.PathEscape(parameterValueToString(r.questionId, "questionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysIdQuestionsIdAnswersRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	questionId string
	fields *[]string
	excludeFields *[]string
	respondentFamiliarityIs *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdQuestionsIdAnswersRequest) Fields(fields []string) ApiGetReportingSurveysIdQuestionsIdAnswersRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdQuestionsIdAnswersRequest) ExcludeFields(excludeFields []string) ApiGetReportingSurveysIdQuestionsIdAnswersRequest {
	r.excludeFields = &excludeFields
	return r
}

// Filter survey responses by familiarity of the respondents.
func (r ApiGetReportingSurveysIdQuestionsIdAnswersRequest) RespondentFamiliarityIs(respondentFamiliarityIs string) ApiGetReportingSurveysIdQuestionsIdAnswersRequest {
	r.respondentFamiliarityIs = &respondentFamiliarityIs
	return r
}

func (r ApiGetReportingSurveysIdQuestionsIdAnswersRequest) Execute() (*GetReportingSurveysIdQuestionsIdAnswers200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdQuestionsIdAnswersExecute(r)
}

/*
GetReportingSurveysIdQuestionsIdAnswers List answers for question

Get answers for a survey question.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @param questionId The ID of the survey question.
 @return ApiGetReportingSurveysIdQuestionsIdAnswersRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsIdAnswers(ctx context.Context, outreachId string, questionId string) ApiGetReportingSurveysIdQuestionsIdAnswersRequest {
	return ApiGetReportingSurveysIdQuestionsIdAnswersRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
		questionId: questionId,
	}
}

// Execute executes the request
//  @return GetReportingSurveysIdQuestionsIdAnswers200Response
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsIdAnswersExecute(r ApiGetReportingSurveysIdQuestionsIdAnswersRequest) (*GetReportingSurveysIdQuestionsIdAnswers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveysIdQuestionsIdAnswers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdQuestionsIdAnswers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{outreach_id}/questions/{question_id}/answers"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"question_id"+"}", url.PathEscape(parameterValueToString(r.questionId, "questionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.respondentFamiliarityIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respondent_familiarity_is", r.respondentFamiliarityIs, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysIdResponsesRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	fields *[]string
	excludeFields *[]string
	answeredQuestion *int32
	choseAnswer *string
	respondentFamiliarityIs *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdResponsesRequest) Fields(fields []string) ApiGetReportingSurveysIdResponsesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ApiGetReportingSurveysIdResponsesRequest) ExcludeFields(excludeFields []string) ApiGetReportingSurveysIdResponsesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The ID of the question that was answered.
func (r ApiGetReportingSurveysIdResponsesRequest) AnsweredQuestion(answeredQuestion int32) ApiGetReportingSurveysIdResponsesRequest {
	r.answeredQuestion = &answeredQuestion
	return r
}

// The ID of the option chosen to filter responses on.
func (r ApiGetReportingSurveysIdResponsesRequest) ChoseAnswer(choseAnswer string) ApiGetReportingSurveysIdResponsesRequest {
	r.choseAnswer = &choseAnswer
	return r
}

// Filter survey responses by familiarity of the respondents.
func (r ApiGetReportingSurveysIdResponsesRequest) RespondentFamiliarityIs(respondentFamiliarityIs string) ApiGetReportingSurveysIdResponsesRequest {
	r.respondentFamiliarityIs = &respondentFamiliarityIs
	return r
}

func (r ApiGetReportingSurveysIdResponsesRequest) Execute() (*GetReportingSurveysIdResponses200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdResponsesExecute(r)
}

/*
GetReportingSurveysIdResponses List survey responses

Get responses to a survey.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ApiGetReportingSurveysIdResponsesRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdResponses(ctx context.Context, outreachId string) ApiGetReportingSurveysIdResponsesRequest {
	return ApiGetReportingSurveysIdResponsesRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return GetReportingSurveysIdResponses200Response
func (a *ReportingAPIService) GetReportingSurveysIdResponsesExecute(r ApiGetReportingSurveysIdResponsesRequest) (*GetReportingSurveysIdResponses200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveysIdResponses200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdResponses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{outreach_id}/responses"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.answeredQuestion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "answered_question", r.answeredQuestion, "")
	}
	if r.choseAnswer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chose_answer", r.choseAnswer, "")
	}
	if r.respondentFamiliarityIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respondent_familiarity_is", r.respondentFamiliarityIs, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReportingSurveysIdResponsesIdRequest struct {
	ctx context.Context
	ApiService *ReportingAPIService
	outreachId string
	responseId string
}

func (r ApiGetReportingSurveysIdResponsesIdRequest) Execute() (*SurveyResponse, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdResponsesIdExecute(r)
}

/*
GetReportingSurveysIdResponsesId Get survey response

Get a single survey response.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @param responseId The ID of the survey response.
 @return ApiGetReportingSurveysIdResponsesIdRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdResponsesId(ctx context.Context, outreachId string, responseId string) ApiGetReportingSurveysIdResponsesIdRequest {
	return ApiGetReportingSurveysIdResponsesIdRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
		responseId: responseId,
	}
}

// Execute executes the request
//  @return SurveyResponse
func (a *ReportingAPIService) GetReportingSurveysIdResponsesIdExecute(r ApiGetReportingSurveysIdResponsesIdRequest) (*SurveyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdResponsesId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{outreach_id}/responses/{response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"response_id"+"}", url.PathEscape(parameterValueToString(r.responseId, "responseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
