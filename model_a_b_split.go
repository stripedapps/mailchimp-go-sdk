/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ABSplit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ABSplit{}

// ABSplit A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns.
type ABSplit struct {
	A *GroupA `json:"a,omitempty"`
	B *GroupB `json:"b,omitempty"`
}

// NewABSplit instantiates a new ABSplit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewABSplit() *ABSplit {
	this := ABSplit{}
	return &this
}

// NewABSplitWithDefaults instantiates a new ABSplit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewABSplitWithDefaults() *ABSplit {
	this := ABSplit{}
	return &this
}

// GetA returns the A field value if set, zero value otherwise.
func (o *ABSplit) GetA() GroupA {
	if o == nil || IsNil(o.A) {
		var ret GroupA
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABSplit) GetAOk() (*GroupA, bool) {
	if o == nil || IsNil(o.A) {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *ABSplit) HasA() bool {
	if o != nil && !IsNil(o.A) {
		return true
	}

	return false
}

// SetA gets a reference to the given GroupA and assigns it to the A field.
func (o *ABSplit) SetA(v GroupA) {
	o.A = &v
}

// GetB returns the B field value if set, zero value otherwise.
func (o *ABSplit) GetB() GroupB {
	if o == nil || IsNil(o.B) {
		var ret GroupB
		return ret
	}
	return *o.B
}

// GetBOk returns a tuple with the B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABSplit) GetBOk() (*GroupB, bool) {
	if o == nil || IsNil(o.B) {
		return nil, false
	}
	return o.B, true
}

// HasB returns a boolean if a field has been set.
func (o *ABSplit) HasB() bool {
	if o != nil && !IsNil(o.B) {
		return true
	}

	return false
}

// SetB gets a reference to the given GroupB and assigns it to the B field.
func (o *ABSplit) SetB(v GroupB) {
	o.B = &v
}

func (o ABSplit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ABSplit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.A) {
		toSerialize["a"] = o.A
	}
	if !IsNil(o.B) {
		toSerialize["b"] = o.B
	}
	return toSerialize, nil
}

type NullableABSplit struct {
	value *ABSplit
	isSet bool
}

func (v NullableABSplit) Get() *ABSplit {
	return v.value
}

func (v *NullableABSplit) Set(val *ABSplit) {
	v.value = val
	v.isSet = true
}

func (v NullableABSplit) IsSet() bool {
	return v.isSet
}

func (v *NullableABSplit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableABSplit(val *ABSplit) *NullableABSplit {
	return &NullableABSplit{value: val, isSet: true}
}

func (v NullableABSplit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableABSplit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


