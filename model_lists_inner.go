/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListsInner{}

// ListsInner struct for ListsInner
type ListsInner struct {
	// The ISO 3166 2 digit country code.
	CountryCode *string `json:"country_code,omitempty"`
	// An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region.
	Region *string `json:"region,omitempty"`
	// The name of the region, if we have one. For blank \"region\" values, this will be \"Rest of Country\".
	RegionName *string `json:"region_name,omitempty"`
	// The number of unique campaign opens for a region.
	Opens *int32 `json:"opens,omitempty"`
}

// NewListsInner instantiates a new ListsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListsInner() *ListsInner {
	this := ListsInner{}
	return &this
}

// NewListsInnerWithDefaults instantiates a new ListsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListsInnerWithDefaults() *ListsInner {
	this := ListsInner{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ListsInner) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsInner) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ListsInner) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ListsInner) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ListsInner) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsInner) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ListsInner) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ListsInner) SetRegion(v string) {
	o.Region = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *ListsInner) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsInner) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *ListsInner) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *ListsInner) SetRegionName(v string) {
	o.RegionName = &v
}

// GetOpens returns the Opens field value if set, zero value otherwise.
func (o *ListsInner) GetOpens() int32 {
	if o == nil || IsNil(o.Opens) {
		var ret int32
		return ret
	}
	return *o.Opens
}

// GetOpensOk returns a tuple with the Opens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsInner) GetOpensOk() (*int32, bool) {
	if o == nil || IsNil(o.Opens) {
		return nil, false
	}
	return o.Opens, true
}

// HasOpens returns a boolean if a field has been set.
func (o *ListsInner) HasOpens() bool {
	if o != nil && !IsNil(o.Opens) {
		return true
	}

	return false
}

// SetOpens gets a reference to the given int32 and assigns it to the Opens field.
func (o *ListsInner) SetOpens(v int32) {
	o.Opens = &v
}

func (o ListsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.Opens) {
		toSerialize["opens"] = o.Opens
	}
	return toSerialize, nil
}

type NullableListsInner struct {
	value *ListsInner
	isSet bool
}

func (v NullableListsInner) Get() *ListsInner {
	return v.value
}

func (v *NullableListsInner) Set(val *ListsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListsInner(val *ListsInner) *NullableListsInner {
	return &NullableListsInner{value: val, isSet: true}
}

func (v NullableListsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


