/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IndustryStats1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndustryStats1{}

// IndustryStats1 The average campaign statistics for your industry.
type IndustryStats1 struct {
	// The type of business industry associated with your account. For example: retail, education, etc.
	Type *string `json:"type,omitempty"`
	// The industry open rate.
	OpenRate *float32 `json:"open_rate,omitempty"`
	// The industry click rate.
	ClickRate *float32 `json:"click_rate,omitempty"`
	// The industry bounce rate.
	BounceRate *float32 `json:"bounce_rate,omitempty"`
	// The industry unopened rate.
	UnopenRate *float32 `json:"unopen_rate,omitempty"`
	// The industry unsubscribe rate.
	UnsubRate *float32 `json:"unsub_rate,omitempty"`
	// The industry abuse rate.
	AbuseRate *float32 `json:"abuse_rate,omitempty"`
}

// NewIndustryStats1 instantiates a new IndustryStats1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustryStats1() *IndustryStats1 {
	this := IndustryStats1{}
	return &this
}

// NewIndustryStats1WithDefaults instantiates a new IndustryStats1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryStats1WithDefaults() *IndustryStats1 {
	this := IndustryStats1{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IndustryStats1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IndustryStats1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IndustryStats1) SetType(v string) {
	o.Type = &v
}

// GetOpenRate returns the OpenRate field value if set, zero value otherwise.
func (o *IndustryStats1) GetOpenRate() float32 {
	if o == nil || IsNil(o.OpenRate) {
		var ret float32
		return ret
	}
	return *o.OpenRate
}

// GetOpenRateOk returns a tuple with the OpenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetOpenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenRate) {
		return nil, false
	}
	return o.OpenRate, true
}

// HasOpenRate returns a boolean if a field has been set.
func (o *IndustryStats1) HasOpenRate() bool {
	if o != nil && !IsNil(o.OpenRate) {
		return true
	}

	return false
}

// SetOpenRate gets a reference to the given float32 and assigns it to the OpenRate field.
func (o *IndustryStats1) SetOpenRate(v float32) {
	o.OpenRate = &v
}

// GetClickRate returns the ClickRate field value if set, zero value otherwise.
func (o *IndustryStats1) GetClickRate() float32 {
	if o == nil || IsNil(o.ClickRate) {
		var ret float32
		return ret
	}
	return *o.ClickRate
}

// GetClickRateOk returns a tuple with the ClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickRate) {
		return nil, false
	}
	return o.ClickRate, true
}

// HasClickRate returns a boolean if a field has been set.
func (o *IndustryStats1) HasClickRate() bool {
	if o != nil && !IsNil(o.ClickRate) {
		return true
	}

	return false
}

// SetClickRate gets a reference to the given float32 and assigns it to the ClickRate field.
func (o *IndustryStats1) SetClickRate(v float32) {
	o.ClickRate = &v
}

// GetBounceRate returns the BounceRate field value if set, zero value otherwise.
func (o *IndustryStats1) GetBounceRate() float32 {
	if o == nil || IsNil(o.BounceRate) {
		var ret float32
		return ret
	}
	return *o.BounceRate
}

// GetBounceRateOk returns a tuple with the BounceRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetBounceRateOk() (*float32, bool) {
	if o == nil || IsNil(o.BounceRate) {
		return nil, false
	}
	return o.BounceRate, true
}

// HasBounceRate returns a boolean if a field has been set.
func (o *IndustryStats1) HasBounceRate() bool {
	if o != nil && !IsNil(o.BounceRate) {
		return true
	}

	return false
}

// SetBounceRate gets a reference to the given float32 and assigns it to the BounceRate field.
func (o *IndustryStats1) SetBounceRate(v float32) {
	o.BounceRate = &v
}

// GetUnopenRate returns the UnopenRate field value if set, zero value otherwise.
func (o *IndustryStats1) GetUnopenRate() float32 {
	if o == nil || IsNil(o.UnopenRate) {
		var ret float32
		return ret
	}
	return *o.UnopenRate
}

// GetUnopenRateOk returns a tuple with the UnopenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetUnopenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.UnopenRate) {
		return nil, false
	}
	return o.UnopenRate, true
}

// HasUnopenRate returns a boolean if a field has been set.
func (o *IndustryStats1) HasUnopenRate() bool {
	if o != nil && !IsNil(o.UnopenRate) {
		return true
	}

	return false
}

// SetUnopenRate gets a reference to the given float32 and assigns it to the UnopenRate field.
func (o *IndustryStats1) SetUnopenRate(v float32) {
	o.UnopenRate = &v
}

// GetUnsubRate returns the UnsubRate field value if set, zero value otherwise.
func (o *IndustryStats1) GetUnsubRate() float32 {
	if o == nil || IsNil(o.UnsubRate) {
		var ret float32
		return ret
	}
	return *o.UnsubRate
}

// GetUnsubRateOk returns a tuple with the UnsubRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetUnsubRateOk() (*float32, bool) {
	if o == nil || IsNil(o.UnsubRate) {
		return nil, false
	}
	return o.UnsubRate, true
}

// HasUnsubRate returns a boolean if a field has been set.
func (o *IndustryStats1) HasUnsubRate() bool {
	if o != nil && !IsNil(o.UnsubRate) {
		return true
	}

	return false
}

// SetUnsubRate gets a reference to the given float32 and assigns it to the UnsubRate field.
func (o *IndustryStats1) SetUnsubRate(v float32) {
	o.UnsubRate = &v
}

// GetAbuseRate returns the AbuseRate field value if set, zero value otherwise.
func (o *IndustryStats1) GetAbuseRate() float32 {
	if o == nil || IsNil(o.AbuseRate) {
		var ret float32
		return ret
	}
	return *o.AbuseRate
}

// GetAbuseRateOk returns a tuple with the AbuseRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats1) GetAbuseRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AbuseRate) {
		return nil, false
	}
	return o.AbuseRate, true
}

// HasAbuseRate returns a boolean if a field has been set.
func (o *IndustryStats1) HasAbuseRate() bool {
	if o != nil && !IsNil(o.AbuseRate) {
		return true
	}

	return false
}

// SetAbuseRate gets a reference to the given float32 and assigns it to the AbuseRate field.
func (o *IndustryStats1) SetAbuseRate(v float32) {
	o.AbuseRate = &v
}

func (o IndustryStats1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndustryStats1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.OpenRate) {
		toSerialize["open_rate"] = o.OpenRate
	}
	if !IsNil(o.ClickRate) {
		toSerialize["click_rate"] = o.ClickRate
	}
	if !IsNil(o.BounceRate) {
		toSerialize["bounce_rate"] = o.BounceRate
	}
	if !IsNil(o.UnopenRate) {
		toSerialize["unopen_rate"] = o.UnopenRate
	}
	if !IsNil(o.UnsubRate) {
		toSerialize["unsub_rate"] = o.UnsubRate
	}
	if !IsNil(o.AbuseRate) {
		toSerialize["abuse_rate"] = o.AbuseRate
	}
	return toSerialize, nil
}

type NullableIndustryStats1 struct {
	value *IndustryStats1
	isSet bool
}

func (v NullableIndustryStats1) Get() *IndustryStats1 {
	return v.value
}

func (v *NullableIndustryStats1) Set(val *IndustryStats1) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryStats1) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryStats1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryStats1(val *IndustryStats1) *NullableIndustryStats1 {
	return &NullableIndustryStats1{value: val, isSet: true}
}

func (v NullableIndustryStats1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryStats1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


