/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ECommerceProductVariant2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECommerceProductVariant2{}

// ECommerceProductVariant2 Information about a specific product variant.
type ECommerceProductVariant2 struct {
	// The title of a product variant.
	Title *string `json:"title,omitempty"`
	// The URL for a product variant.
	Url *string `json:"url,omitempty"`
	// The stock keeping unit (SKU) of a product variant.
	Sku *string `json:"sku,omitempty"`
	// The price of a product variant.
	Price *float32 `json:"price,omitempty"`
	// The inventory quantity of a product variant.
	InventoryQuantity *int32 `json:"inventory_quantity,omitempty"`
	// The image URL for a product variant.
	ImageUrl *string `json:"image_url,omitempty"`
	// The backorders of a product variant.
	Backorders *string `json:"backorders,omitempty"`
	// The visibility of a product variant.
	Visibility *string `json:"visibility,omitempty"`
}

// NewECommerceProductVariant2 instantiates a new ECommerceProductVariant2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECommerceProductVariant2() *ECommerceProductVariant2 {
	this := ECommerceProductVariant2{}
	return &this
}

// NewECommerceProductVariant2WithDefaults instantiates a new ECommerceProductVariant2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECommerceProductVariant2WithDefaults() *ECommerceProductVariant2 {
	this := ECommerceProductVariant2{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ECommerceProductVariant2) SetTitle(v string) {
	o.Title = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ECommerceProductVariant2) SetUrl(v string) {
	o.Url = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ECommerceProductVariant2) SetSku(v string) {
	o.Sku = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ECommerceProductVariant2) SetPrice(v float32) {
	o.Price = &v
}

// GetInventoryQuantity returns the InventoryQuantity field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetInventoryQuantity() int32 {
	if o == nil || IsNil(o.InventoryQuantity) {
		var ret int32
		return ret
	}
	return *o.InventoryQuantity
}

// GetInventoryQuantityOk returns a tuple with the InventoryQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetInventoryQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.InventoryQuantity) {
		return nil, false
	}
	return o.InventoryQuantity, true
}

// HasInventoryQuantity returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasInventoryQuantity() bool {
	if o != nil && !IsNil(o.InventoryQuantity) {
		return true
	}

	return false
}

// SetInventoryQuantity gets a reference to the given int32 and assigns it to the InventoryQuantity field.
func (o *ECommerceProductVariant2) SetInventoryQuantity(v int32) {
	o.InventoryQuantity = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ECommerceProductVariant2) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetBackorders returns the Backorders field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetBackorders() string {
	if o == nil || IsNil(o.Backorders) {
		var ret string
		return ret
	}
	return *o.Backorders
}

// GetBackordersOk returns a tuple with the Backorders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetBackordersOk() (*string, bool) {
	if o == nil || IsNil(o.Backorders) {
		return nil, false
	}
	return o.Backorders, true
}

// HasBackorders returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasBackorders() bool {
	if o != nil && !IsNil(o.Backorders) {
		return true
	}

	return false
}

// SetBackorders gets a reference to the given string and assigns it to the Backorders field.
func (o *ECommerceProductVariant2) SetBackorders(v string) {
	o.Backorders = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ECommerceProductVariant2) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant2) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ECommerceProductVariant2) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ECommerceProductVariant2) SetVisibility(v string) {
	o.Visibility = &v
}

func (o ECommerceProductVariant2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECommerceProductVariant2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.InventoryQuantity) {
		toSerialize["inventory_quantity"] = o.InventoryQuantity
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["image_url"] = o.ImageUrl
	}
	if !IsNil(o.Backorders) {
		toSerialize["backorders"] = o.Backorders
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	return toSerialize, nil
}

type NullableECommerceProductVariant2 struct {
	value *ECommerceProductVariant2
	isSet bool
}

func (v NullableECommerceProductVariant2) Get() *ECommerceProductVariant2 {
	return v.value
}

func (v *NullableECommerceProductVariant2) Set(val *ECommerceProductVariant2) {
	v.value = val
	v.isSet = true
}

func (v NullableECommerceProductVariant2) IsSet() bool {
	return v.isSet
}

func (v *NullableECommerceProductVariant2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECommerceProductVariant2(val *ECommerceProductVariant2) *NullableECommerceProductVariant2 {
	return &NullableECommerceProductVariant2{value: val, isSet: true}
}

func (v NullableECommerceProductVariant2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECommerceProductVariant2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


