/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DailyListActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyListActivity{}

// DailyListActivity One day's worth of list activity. Doesn't include Automation activity.
type DailyListActivity struct {
	// The date for the activity summary.
	Day *string `json:"day,omitempty"`
	// The total number of emails sent on the date for the activity summary.
	EmailsSent *int32 `json:"emails_sent,omitempty"`
	// The number of unique opens.
	UniqueOpens *int32 `json:"unique_opens,omitempty"`
	// The number of clicks.
	RecipientClicks *int32 `json:"recipient_clicks,omitempty"`
	// The number of hard bounces.
	HardBounce *int32 `json:"hard_bounce,omitempty"`
	// The number of soft bounces
	SoftBounce *int32 `json:"soft_bounce,omitempty"`
	// The number of subscribes.
	Subs *int32 `json:"subs,omitempty"`
	// The number of unsubscribes.
	Unsubs *int32 `json:"unsubs,omitempty"`
	// The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity.
	OtherAdds *int32 `json:"other_adds,omitempty"`
	// The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers).
	OtherRemoves *int32 `json:"other_removes,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewDailyListActivity instantiates a new DailyListActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyListActivity() *DailyListActivity {
	this := DailyListActivity{}
	return &this
}

// NewDailyListActivityWithDefaults instantiates a new DailyListActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyListActivityWithDefaults() *DailyListActivity {
	this := DailyListActivity{}
	return &this
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *DailyListActivity) GetDay() string {
	if o == nil || IsNil(o.Day) {
		var ret string
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetDayOk() (*string, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *DailyListActivity) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given string and assigns it to the Day field.
func (o *DailyListActivity) SetDay(v string) {
	o.Day = &v
}

// GetEmailsSent returns the EmailsSent field value if set, zero value otherwise.
func (o *DailyListActivity) GetEmailsSent() int32 {
	if o == nil || IsNil(o.EmailsSent) {
		var ret int32
		return ret
	}
	return *o.EmailsSent
}

// GetEmailsSentOk returns a tuple with the EmailsSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetEmailsSentOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailsSent) {
		return nil, false
	}
	return o.EmailsSent, true
}

// HasEmailsSent returns a boolean if a field has been set.
func (o *DailyListActivity) HasEmailsSent() bool {
	if o != nil && !IsNil(o.EmailsSent) {
		return true
	}

	return false
}

// SetEmailsSent gets a reference to the given int32 and assigns it to the EmailsSent field.
func (o *DailyListActivity) SetEmailsSent(v int32) {
	o.EmailsSent = &v
}

// GetUniqueOpens returns the UniqueOpens field value if set, zero value otherwise.
func (o *DailyListActivity) GetUniqueOpens() int32 {
	if o == nil || IsNil(o.UniqueOpens) {
		var ret int32
		return ret
	}
	return *o.UniqueOpens
}

// GetUniqueOpensOk returns a tuple with the UniqueOpens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetUniqueOpensOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueOpens) {
		return nil, false
	}
	return o.UniqueOpens, true
}

// HasUniqueOpens returns a boolean if a field has been set.
func (o *DailyListActivity) HasUniqueOpens() bool {
	if o != nil && !IsNil(o.UniqueOpens) {
		return true
	}

	return false
}

// SetUniqueOpens gets a reference to the given int32 and assigns it to the UniqueOpens field.
func (o *DailyListActivity) SetUniqueOpens(v int32) {
	o.UniqueOpens = &v
}

// GetRecipientClicks returns the RecipientClicks field value if set, zero value otherwise.
func (o *DailyListActivity) GetRecipientClicks() int32 {
	if o == nil || IsNil(o.RecipientClicks) {
		var ret int32
		return ret
	}
	return *o.RecipientClicks
}

// GetRecipientClicksOk returns a tuple with the RecipientClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetRecipientClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.RecipientClicks) {
		return nil, false
	}
	return o.RecipientClicks, true
}

// HasRecipientClicks returns a boolean if a field has been set.
func (o *DailyListActivity) HasRecipientClicks() bool {
	if o != nil && !IsNil(o.RecipientClicks) {
		return true
	}

	return false
}

// SetRecipientClicks gets a reference to the given int32 and assigns it to the RecipientClicks field.
func (o *DailyListActivity) SetRecipientClicks(v int32) {
	o.RecipientClicks = &v
}

// GetHardBounce returns the HardBounce field value if set, zero value otherwise.
func (o *DailyListActivity) GetHardBounce() int32 {
	if o == nil || IsNil(o.HardBounce) {
		var ret int32
		return ret
	}
	return *o.HardBounce
}

// GetHardBounceOk returns a tuple with the HardBounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetHardBounceOk() (*int32, bool) {
	if o == nil || IsNil(o.HardBounce) {
		return nil, false
	}
	return o.HardBounce, true
}

// HasHardBounce returns a boolean if a field has been set.
func (o *DailyListActivity) HasHardBounce() bool {
	if o != nil && !IsNil(o.HardBounce) {
		return true
	}

	return false
}

// SetHardBounce gets a reference to the given int32 and assigns it to the HardBounce field.
func (o *DailyListActivity) SetHardBounce(v int32) {
	o.HardBounce = &v
}

// GetSoftBounce returns the SoftBounce field value if set, zero value otherwise.
func (o *DailyListActivity) GetSoftBounce() int32 {
	if o == nil || IsNil(o.SoftBounce) {
		var ret int32
		return ret
	}
	return *o.SoftBounce
}

// GetSoftBounceOk returns a tuple with the SoftBounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetSoftBounceOk() (*int32, bool) {
	if o == nil || IsNil(o.SoftBounce) {
		return nil, false
	}
	return o.SoftBounce, true
}

// HasSoftBounce returns a boolean if a field has been set.
func (o *DailyListActivity) HasSoftBounce() bool {
	if o != nil && !IsNil(o.SoftBounce) {
		return true
	}

	return false
}

// SetSoftBounce gets a reference to the given int32 and assigns it to the SoftBounce field.
func (o *DailyListActivity) SetSoftBounce(v int32) {
	o.SoftBounce = &v
}

// GetSubs returns the Subs field value if set, zero value otherwise.
func (o *DailyListActivity) GetSubs() int32 {
	if o == nil || IsNil(o.Subs) {
		var ret int32
		return ret
	}
	return *o.Subs
}

// GetSubsOk returns a tuple with the Subs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetSubsOk() (*int32, bool) {
	if o == nil || IsNil(o.Subs) {
		return nil, false
	}
	return o.Subs, true
}

// HasSubs returns a boolean if a field has been set.
func (o *DailyListActivity) HasSubs() bool {
	if o != nil && !IsNil(o.Subs) {
		return true
	}

	return false
}

// SetSubs gets a reference to the given int32 and assigns it to the Subs field.
func (o *DailyListActivity) SetSubs(v int32) {
	o.Subs = &v
}

// GetUnsubs returns the Unsubs field value if set, zero value otherwise.
func (o *DailyListActivity) GetUnsubs() int32 {
	if o == nil || IsNil(o.Unsubs) {
		var ret int32
		return ret
	}
	return *o.Unsubs
}

// GetUnsubsOk returns a tuple with the Unsubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetUnsubsOk() (*int32, bool) {
	if o == nil || IsNil(o.Unsubs) {
		return nil, false
	}
	return o.Unsubs, true
}

// HasUnsubs returns a boolean if a field has been set.
func (o *DailyListActivity) HasUnsubs() bool {
	if o != nil && !IsNil(o.Unsubs) {
		return true
	}

	return false
}

// SetUnsubs gets a reference to the given int32 and assigns it to the Unsubs field.
func (o *DailyListActivity) SetUnsubs(v int32) {
	o.Unsubs = &v
}

// GetOtherAdds returns the OtherAdds field value if set, zero value otherwise.
func (o *DailyListActivity) GetOtherAdds() int32 {
	if o == nil || IsNil(o.OtherAdds) {
		var ret int32
		return ret
	}
	return *o.OtherAdds
}

// GetOtherAddsOk returns a tuple with the OtherAdds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetOtherAddsOk() (*int32, bool) {
	if o == nil || IsNil(o.OtherAdds) {
		return nil, false
	}
	return o.OtherAdds, true
}

// HasOtherAdds returns a boolean if a field has been set.
func (o *DailyListActivity) HasOtherAdds() bool {
	if o != nil && !IsNil(o.OtherAdds) {
		return true
	}

	return false
}

// SetOtherAdds gets a reference to the given int32 and assigns it to the OtherAdds field.
func (o *DailyListActivity) SetOtherAdds(v int32) {
	o.OtherAdds = &v
}

// GetOtherRemoves returns the OtherRemoves field value if set, zero value otherwise.
func (o *DailyListActivity) GetOtherRemoves() int32 {
	if o == nil || IsNil(o.OtherRemoves) {
		var ret int32
		return ret
	}
	return *o.OtherRemoves
}

// GetOtherRemovesOk returns a tuple with the OtherRemoves field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetOtherRemovesOk() (*int32, bool) {
	if o == nil || IsNil(o.OtherRemoves) {
		return nil, false
	}
	return o.OtherRemoves, true
}

// HasOtherRemoves returns a boolean if a field has been set.
func (o *DailyListActivity) HasOtherRemoves() bool {
	if o != nil && !IsNil(o.OtherRemoves) {
		return true
	}

	return false
}

// SetOtherRemoves gets a reference to the given int32 and assigns it to the OtherRemoves field.
func (o *DailyListActivity) SetOtherRemoves(v int32) {
	o.OtherRemoves = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DailyListActivity) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyListActivity) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DailyListActivity) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *DailyListActivity) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o DailyListActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyListActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !IsNil(o.EmailsSent) {
		toSerialize["emails_sent"] = o.EmailsSent
	}
	if !IsNil(o.UniqueOpens) {
		toSerialize["unique_opens"] = o.UniqueOpens
	}
	if !IsNil(o.RecipientClicks) {
		toSerialize["recipient_clicks"] = o.RecipientClicks
	}
	if !IsNil(o.HardBounce) {
		toSerialize["hard_bounce"] = o.HardBounce
	}
	if !IsNil(o.SoftBounce) {
		toSerialize["soft_bounce"] = o.SoftBounce
	}
	if !IsNil(o.Subs) {
		toSerialize["subs"] = o.Subs
	}
	if !IsNil(o.Unsubs) {
		toSerialize["unsubs"] = o.Unsubs
	}
	if !IsNil(o.OtherAdds) {
		toSerialize["other_adds"] = o.OtherAdds
	}
	if !IsNil(o.OtherRemoves) {
		toSerialize["other_removes"] = o.OtherRemoves
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableDailyListActivity struct {
	value *DailyListActivity
	isSet bool
}

func (v NullableDailyListActivity) Get() *DailyListActivity {
	return v.value
}

func (v *NullableDailyListActivity) Set(val *DailyListActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyListActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyListActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyListActivity(val *DailyListActivity) *NullableDailyListActivity {
	return &NullableDailyListActivity{value: val, isSet: true}
}

func (v NullableDailyListActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyListActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


