/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AbuseComplaint1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbuseComplaint1{}

// AbuseComplaint1 Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program.
type AbuseComplaint1 struct {
	// The id for the abuse report
	Id *int32 `json:"id,omitempty"`
	// The campaign id for the abuse report
	CampaignId *string `json:"campaign_id,omitempty"`
	// The unique id of the list for the abuse report.
	ListId *string `json:"list_id,omitempty"`
	// The status of the list used, namely if it's deleted or disabled.
	ListIsActive *bool `json:"list_is_active,omitempty"`
	// The MD5 hash of the lowercase version of the list member's email address.
	EmailId *string `json:"email_id,omitempty"`
	// Email address for a subscriber.
	EmailAddress *string `json:"email_address,omitempty"`
	// A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure.
	MergeFields map[string]map[string]interface{} `json:"merge_fields,omitempty"`
	// [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
	Vip *bool `json:"vip,omitempty"`
	// Date for the abuse report
	Date *time.Time `json:"date,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewAbuseComplaint1 instantiates a new AbuseComplaint1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbuseComplaint1() *AbuseComplaint1 {
	this := AbuseComplaint1{}
	return &this
}

// NewAbuseComplaint1WithDefaults instantiates a new AbuseComplaint1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbuseComplaint1WithDefaults() *AbuseComplaint1 {
	this := AbuseComplaint1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AbuseComplaint1) SetId(v int32) {
	o.Id = &v
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetCampaignId() string {
	if o == nil || IsNil(o.CampaignId) {
		var ret string
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetCampaignIdOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given string and assigns it to the CampaignId field.
func (o *AbuseComplaint1) SetCampaignId(v string) {
	o.CampaignId = &v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetListId() string {
	if o == nil || IsNil(o.ListId) {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetListIdOk() (*string, bool) {
	if o == nil || IsNil(o.ListId) {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasListId() bool {
	if o != nil && !IsNil(o.ListId) {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *AbuseComplaint1) SetListId(v string) {
	o.ListId = &v
}

// GetListIsActive returns the ListIsActive field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetListIsActive() bool {
	if o == nil || IsNil(o.ListIsActive) {
		var ret bool
		return ret
	}
	return *o.ListIsActive
}

// GetListIsActiveOk returns a tuple with the ListIsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetListIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.ListIsActive) {
		return nil, false
	}
	return o.ListIsActive, true
}

// HasListIsActive returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasListIsActive() bool {
	if o != nil && !IsNil(o.ListIsActive) {
		return true
	}

	return false
}

// SetListIsActive gets a reference to the given bool and assigns it to the ListIsActive field.
func (o *AbuseComplaint1) SetListIsActive(v bool) {
	o.ListIsActive = &v
}

// GetEmailId returns the EmailId field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetEmailId() string {
	if o == nil || IsNil(o.EmailId) {
		var ret string
		return ret
	}
	return *o.EmailId
}

// GetEmailIdOk returns a tuple with the EmailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetEmailIdOk() (*string, bool) {
	if o == nil || IsNil(o.EmailId) {
		return nil, false
	}
	return o.EmailId, true
}

// HasEmailId returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasEmailId() bool {
	if o != nil && !IsNil(o.EmailId) {
		return true
	}

	return false
}

// SetEmailId gets a reference to the given string and assigns it to the EmailId field.
func (o *AbuseComplaint1) SetEmailId(v string) {
	o.EmailId = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *AbuseComplaint1) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetMergeFields returns the MergeFields field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetMergeFields() map[string]map[string]interface{} {
	if o == nil || IsNil(o.MergeFields) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.MergeFields
}

// GetMergeFieldsOk returns a tuple with the MergeFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetMergeFieldsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.MergeFields) {
		return map[string]map[string]interface{}{}, false
	}
	return o.MergeFields, true
}

// HasMergeFields returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasMergeFields() bool {
	if o != nil && !IsNil(o.MergeFields) {
		return true
	}

	return false
}

// SetMergeFields gets a reference to the given map[string]map[string]interface{} and assigns it to the MergeFields field.
func (o *AbuseComplaint1) SetMergeFields(v map[string]map[string]interface{}) {
	o.MergeFields = v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetVip() bool {
	if o == nil || IsNil(o.Vip) {
		var ret bool
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetVipOk() (*bool, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given bool and assigns it to the Vip field.
func (o *AbuseComplaint1) SetVip(v bool) {
	o.Vip = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *AbuseComplaint1) SetDate(v time.Time) {
	o.Date = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AbuseComplaint1) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseComplaint1) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AbuseComplaint1) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *AbuseComplaint1) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o AbuseComplaint1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbuseComplaint1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CampaignId) {
		toSerialize["campaign_id"] = o.CampaignId
	}
	if !IsNil(o.ListId) {
		toSerialize["list_id"] = o.ListId
	}
	if !IsNil(o.ListIsActive) {
		toSerialize["list_is_active"] = o.ListIsActive
	}
	if !IsNil(o.EmailId) {
		toSerialize["email_id"] = o.EmailId
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.MergeFields) {
		toSerialize["merge_fields"] = o.MergeFields
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableAbuseComplaint1 struct {
	value *AbuseComplaint1
	isSet bool
}

func (v NullableAbuseComplaint1) Get() *AbuseComplaint1 {
	return v.value
}

func (v *NullableAbuseComplaint1) Set(val *AbuseComplaint1) {
	v.value = val
	v.isSet = true
}

func (v NullableAbuseComplaint1) IsSet() bool {
	return v.isSet
}

func (v *NullableAbuseComplaint1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbuseComplaint1(val *AbuseComplaint1) *NullableAbuseComplaint1 {
	return &NullableAbuseComplaint1{value: val, isSet: true}
}

func (v NullableAbuseComplaint1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbuseComplaint1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


