/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MergeField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeField{}

// MergeField A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.
type MergeField struct {
	// An unchanging id for the merge field.
	MergeId *int32 `json:"merge_id,omitempty"`
	// The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts).
	Tag *string `json:"tag,omitempty"`
	// The name of the merge field (audience field).
	Name *string `json:"name,omitempty"`
	// The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
	Type *string `json:"type,omitempty"`
	// The boolean value if the merge field is required.
	Required *bool `json:"required,omitempty"`
	// The default value for the merge field if `null`.
	DefaultValue *string `json:"default_value,omitempty"`
	// Whether the merge field is displayed on the signup form.
	Public *bool `json:"public,omitempty"`
	// The order that the merge field displays on the list signup form.
	DisplayOrder *int32 `json:"display_order,omitempty"`
	Options *MergeFieldOptions `json:"options,omitempty"`
	// Extra text to help the subscriber fill out the form.
	HelpText *string `json:"help_text,omitempty"`
	// The ID that identifies this merge field's audience'.
	ListId *string `json:"list_id,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewMergeField instantiates a new MergeField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeField() *MergeField {
	this := MergeField{}
	return &this
}

// NewMergeFieldWithDefaults instantiates a new MergeField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeFieldWithDefaults() *MergeField {
	this := MergeField{}
	return &this
}

// GetMergeId returns the MergeId field value if set, zero value otherwise.
func (o *MergeField) GetMergeId() int32 {
	if o == nil || IsNil(o.MergeId) {
		var ret int32
		return ret
	}
	return *o.MergeId
}

// GetMergeIdOk returns a tuple with the MergeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetMergeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MergeId) {
		return nil, false
	}
	return o.MergeId, true
}

// HasMergeId returns a boolean if a field has been set.
func (o *MergeField) HasMergeId() bool {
	if o != nil && !IsNil(o.MergeId) {
		return true
	}

	return false
}

// SetMergeId gets a reference to the given int32 and assigns it to the MergeId field.
func (o *MergeField) SetMergeId(v int32) {
	o.MergeId = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *MergeField) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *MergeField) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *MergeField) SetTag(v string) {
	o.Tag = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MergeField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MergeField) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MergeField) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MergeField) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MergeField) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MergeField) SetType(v string) {
	o.Type = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *MergeField) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *MergeField) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *MergeField) SetRequired(v bool) {
	o.Required = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *MergeField) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *MergeField) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *MergeField) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *MergeField) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *MergeField) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *MergeField) SetPublic(v bool) {
	o.Public = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *MergeField) GetDisplayOrder() int32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *MergeField) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *MergeField) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *MergeField) GetOptions() MergeFieldOptions {
	if o == nil || IsNil(o.Options) {
		var ret MergeFieldOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetOptionsOk() (*MergeFieldOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *MergeField) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given MergeFieldOptions and assigns it to the Options field.
func (o *MergeField) SetOptions(v MergeFieldOptions) {
	o.Options = &v
}

// GetHelpText returns the HelpText field value if set, zero value otherwise.
func (o *MergeField) GetHelpText() string {
	if o == nil || IsNil(o.HelpText) {
		var ret string
		return ret
	}
	return *o.HelpText
}

// GetHelpTextOk returns a tuple with the HelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetHelpTextOk() (*string, bool) {
	if o == nil || IsNil(o.HelpText) {
		return nil, false
	}
	return o.HelpText, true
}

// HasHelpText returns a boolean if a field has been set.
func (o *MergeField) HasHelpText() bool {
	if o != nil && !IsNil(o.HelpText) {
		return true
	}

	return false
}

// SetHelpText gets a reference to the given string and assigns it to the HelpText field.
func (o *MergeField) SetHelpText(v string) {
	o.HelpText = &v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *MergeField) GetListId() string {
	if o == nil || IsNil(o.ListId) {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetListIdOk() (*string, bool) {
	if o == nil || IsNil(o.ListId) {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *MergeField) HasListId() bool {
	if o != nil && !IsNil(o.ListId) {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *MergeField) SetListId(v string) {
	o.ListId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *MergeField) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *MergeField) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *MergeField) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o MergeField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MergeId) {
		toSerialize["merge_id"] = o.MergeId
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["display_order"] = o.DisplayOrder
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.HelpText) {
		toSerialize["help_text"] = o.HelpText
	}
	if !IsNil(o.ListId) {
		toSerialize["list_id"] = o.ListId
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableMergeField struct {
	value *MergeField
	isSet bool
}

func (v NullableMergeField) Get() *MergeField {
	return v.value
}

func (v *NullableMergeField) Set(val *MergeField) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeField) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeField(val *MergeField) *NullableMergeField {
	return &NullableMergeField{value: val, isSet: true}
}

func (v NullableMergeField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


