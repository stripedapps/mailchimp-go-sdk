/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ECommerceProductImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECommerceProductImage{}

// ECommerceProductImage Information about a specific product image.
type ECommerceProductImage struct {
	// A unique identifier for the product image.
	Id *string `json:"id,omitempty"`
	// The URL for a product image.
	Url *string `json:"url,omitempty"`
	// The list of product variants using the image.
	VariantIds []string `json:"variant_ids,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewECommerceProductImage instantiates a new ECommerceProductImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECommerceProductImage() *ECommerceProductImage {
	this := ECommerceProductImage{}
	return &this
}

// NewECommerceProductImageWithDefaults instantiates a new ECommerceProductImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECommerceProductImageWithDefaults() *ECommerceProductImage {
	this := ECommerceProductImage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ECommerceProductImage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ECommerceProductImage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ECommerceProductImage) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ECommerceProductImage) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ECommerceProductImage) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ECommerceProductImage) SetUrl(v string) {
	o.Url = &v
}

// GetVariantIds returns the VariantIds field value if set, zero value otherwise.
func (o *ECommerceProductImage) GetVariantIds() []string {
	if o == nil || IsNil(o.VariantIds) {
		var ret []string
		return ret
	}
	return o.VariantIds
}

// GetVariantIdsOk returns a tuple with the VariantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage) GetVariantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VariantIds) {
		return nil, false
	}
	return o.VariantIds, true
}

// HasVariantIds returns a boolean if a field has been set.
func (o *ECommerceProductImage) HasVariantIds() bool {
	if o != nil && !IsNil(o.VariantIds) {
		return true
	}

	return false
}

// SetVariantIds gets a reference to the given []string and assigns it to the VariantIds field.
func (o *ECommerceProductImage) SetVariantIds(v []string) {
	o.VariantIds = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ECommerceProductImage) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ECommerceProductImage) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *ECommerceProductImage) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o ECommerceProductImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECommerceProductImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.VariantIds) {
		toSerialize["variant_ids"] = o.VariantIds
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableECommerceProductImage struct {
	value *ECommerceProductImage
	isSet bool
}

func (v NullableECommerceProductImage) Get() *ECommerceProductImage {
	return v.value
}

func (v *NullableECommerceProductImage) Set(val *ECommerceProductImage) {
	v.value = val
	v.isSet = true
}

func (v NullableECommerceProductImage) IsSet() bool {
	return v.isSet
}

func (v *NullableECommerceProductImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECommerceProductImage(val *ECommerceProductImage) *NullableECommerceProductImage {
	return &NullableECommerceProductImage{value: val, isSet: true}
}

func (v NullableECommerceProductImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECommerceProductImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


