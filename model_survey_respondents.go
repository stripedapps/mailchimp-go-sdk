/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SurveyRespondents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveyRespondents{}

// SurveyRespondents Survey respondent details.
type SurveyRespondents struct {
	// The ID for the survey response.
	ResponseId *string `json:"response_id,omitempty"`
	// The date and time when the survey response was submitted in ISO 8601 format.
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	Contact *Contact `json:"contact,omitempty"`
	// If this contact was added to the Mailchimp audience via this survey.
	IsNewContact *bool `json:"is_new_contact,omitempty"`
}

// NewSurveyRespondents instantiates a new SurveyRespondents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveyRespondents() *SurveyRespondents {
	this := SurveyRespondents{}
	return &this
}

// NewSurveyRespondentsWithDefaults instantiates a new SurveyRespondents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveyRespondentsWithDefaults() *SurveyRespondents {
	this := SurveyRespondents{}
	return &this
}

// GetResponseId returns the ResponseId field value if set, zero value otherwise.
func (o *SurveyRespondents) GetResponseId() string {
	if o == nil || IsNil(o.ResponseId) {
		var ret string
		return ret
	}
	return *o.ResponseId
}

// GetResponseIdOk returns a tuple with the ResponseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyRespondents) GetResponseIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseId) {
		return nil, false
	}
	return o.ResponseId, true
}

// HasResponseId returns a boolean if a field has been set.
func (o *SurveyRespondents) HasResponseId() bool {
	if o != nil && !IsNil(o.ResponseId) {
		return true
	}

	return false
}

// SetResponseId gets a reference to the given string and assigns it to the ResponseId field.
func (o *SurveyRespondents) SetResponseId(v string) {
	o.ResponseId = &v
}

// GetSubmittedAt returns the SubmittedAt field value if set, zero value otherwise.
func (o *SurveyRespondents) GetSubmittedAt() time.Time {
	if o == nil || IsNil(o.SubmittedAt) {
		var ret time.Time
		return ret
	}
	return *o.SubmittedAt
}

// GetSubmittedAtOk returns a tuple with the SubmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyRespondents) GetSubmittedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmittedAt) {
		return nil, false
	}
	return o.SubmittedAt, true
}

// HasSubmittedAt returns a boolean if a field has been set.
func (o *SurveyRespondents) HasSubmittedAt() bool {
	if o != nil && !IsNil(o.SubmittedAt) {
		return true
	}

	return false
}

// SetSubmittedAt gets a reference to the given time.Time and assigns it to the SubmittedAt field.
func (o *SurveyRespondents) SetSubmittedAt(v time.Time) {
	o.SubmittedAt = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *SurveyRespondents) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyRespondents) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *SurveyRespondents) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *SurveyRespondents) SetContact(v Contact) {
	o.Contact = &v
}

// GetIsNewContact returns the IsNewContact field value if set, zero value otherwise.
func (o *SurveyRespondents) GetIsNewContact() bool {
	if o == nil || IsNil(o.IsNewContact) {
		var ret bool
		return ret
	}
	return *o.IsNewContact
}

// GetIsNewContactOk returns a tuple with the IsNewContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyRespondents) GetIsNewContactOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNewContact) {
		return nil, false
	}
	return o.IsNewContact, true
}

// HasIsNewContact returns a boolean if a field has been set.
func (o *SurveyRespondents) HasIsNewContact() bool {
	if o != nil && !IsNil(o.IsNewContact) {
		return true
	}

	return false
}

// SetIsNewContact gets a reference to the given bool and assigns it to the IsNewContact field.
func (o *SurveyRespondents) SetIsNewContact(v bool) {
	o.IsNewContact = &v
}

func (o SurveyRespondents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveyRespondents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResponseId) {
		toSerialize["response_id"] = o.ResponseId
	}
	if !IsNil(o.SubmittedAt) {
		toSerialize["submitted_at"] = o.SubmittedAt
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.IsNewContact) {
		toSerialize["is_new_contact"] = o.IsNewContact
	}
	return toSerialize, nil
}

type NullableSurveyRespondents struct {
	value *SurveyRespondents
	isSet bool
}

func (v NullableSurveyRespondents) Get() *SurveyRespondents {
	return v.value
}

func (v *NullableSurveyRespondents) Set(val *SurveyRespondents) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveyRespondents) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveyRespondents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveyRespondents(val *SurveyRespondents) *NullableSurveyRespondents {
	return &NullableSurveyRespondents{value: val, isSet: true}
}

func (v NullableSurveyRespondents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveyRespondents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


