/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ConnectedSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectedSite{}

// ConnectedSite Information about a specific connected site.
type ConnectedSite struct {
	// The unique identifier for the site.
	ForeignId *string `json:"foreign_id,omitempty"`
	// The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.
	StoreId *string `json:"store_id,omitempty"`
	// The platform of the connected site.
	Platform *string `json:"platform,omitempty"`
	// The connected site domain.
	Domain *string `json:"domain,omitempty"`
	SiteScript *Script `json:"site_script,omitempty"`
	// The date and time the connected site was created in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time the connected site was last updated in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewConnectedSite instantiates a new ConnectedSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedSite() *ConnectedSite {
	this := ConnectedSite{}
	return &this
}

// NewConnectedSiteWithDefaults instantiates a new ConnectedSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedSiteWithDefaults() *ConnectedSite {
	this := ConnectedSite{}
	return &this
}

// GetForeignId returns the ForeignId field value if set, zero value otherwise.
func (o *ConnectedSite) GetForeignId() string {
	if o == nil || IsNil(o.ForeignId) {
		var ret string
		return ret
	}
	return *o.ForeignId
}

// GetForeignIdOk returns a tuple with the ForeignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetForeignIdOk() (*string, bool) {
	if o == nil || IsNil(o.ForeignId) {
		return nil, false
	}
	return o.ForeignId, true
}

// HasForeignId returns a boolean if a field has been set.
func (o *ConnectedSite) HasForeignId() bool {
	if o != nil && !IsNil(o.ForeignId) {
		return true
	}

	return false
}

// SetForeignId gets a reference to the given string and assigns it to the ForeignId field.
func (o *ConnectedSite) SetForeignId(v string) {
	o.ForeignId = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *ConnectedSite) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *ConnectedSite) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *ConnectedSite) SetStoreId(v string) {
	o.StoreId = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *ConnectedSite) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *ConnectedSite) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *ConnectedSite) SetPlatform(v string) {
	o.Platform = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ConnectedSite) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ConnectedSite) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ConnectedSite) SetDomain(v string) {
	o.Domain = &v
}

// GetSiteScript returns the SiteScript field value if set, zero value otherwise.
func (o *ConnectedSite) GetSiteScript() Script {
	if o == nil || IsNil(o.SiteScript) {
		var ret Script
		return ret
	}
	return *o.SiteScript
}

// GetSiteScriptOk returns a tuple with the SiteScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetSiteScriptOk() (*Script, bool) {
	if o == nil || IsNil(o.SiteScript) {
		return nil, false
	}
	return o.SiteScript, true
}

// HasSiteScript returns a boolean if a field has been set.
func (o *ConnectedSite) HasSiteScript() bool {
	if o != nil && !IsNil(o.SiteScript) {
		return true
	}

	return false
}

// SetSiteScript gets a reference to the given Script and assigns it to the SiteScript field.
func (o *ConnectedSite) SetSiteScript(v Script) {
	o.SiteScript = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ConnectedSite) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConnectedSite) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ConnectedSite) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ConnectedSite) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ConnectedSite) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ConnectedSite) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ConnectedSite) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedSite) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ConnectedSite) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *ConnectedSite) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o ConnectedSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectedSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForeignId) {
		toSerialize["foreign_id"] = o.ForeignId
	}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.SiteScript) {
		toSerialize["site_script"] = o.SiteScript
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableConnectedSite struct {
	value *ConnectedSite
	isSet bool
}

func (v NullableConnectedSite) Get() *ConnectedSite {
	return v.value
}

func (v *NullableConnectedSite) Set(val *ConnectedSite) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedSite) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedSite(val *ConnectedSite) *NullableConnectedSite {
	return &NullableConnectedSite{value: val, isSet: true}
}

func (v NullableConnectedSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


