/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Hours type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hours{}

// Hours The hours an Automation workflow can send.
type Hours struct {
	// When to send the Automation email.
	Type string `json:"type"`
}

// NewHours instantiates a new Hours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHours(type_ string) *Hours {
	this := Hours{}
	this.Type = type_
	return &this
}

// NewHoursWithDefaults instantiates a new Hours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoursWithDefaults() *Hours {
	this := Hours{}
	return &this
}

// GetType returns the Type field value
func (o *Hours) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Hours) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Hours) SetType(v string) {
	o.Type = v
}

func (o Hours) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hours) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableHours struct {
	value *Hours
	isSet bool
}

func (v NullableHours) Get() *Hours {
	return v.value
}

func (v *NullableHours) Set(val *Hours) {
	v.value = val
	v.isSet = true
}

func (v NullableHours) IsSet() bool {
	return v.isSet
}

func (v *NullableHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHours(val *Hours) *NullableHours {
	return &NullableHours{value: val, isSet: true}
}

func (v NullableHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


