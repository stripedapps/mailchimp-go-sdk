/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContactCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactCounts{}

// ContactCounts For email question types, how many are new, known, or unknown contacts.
type ContactCounts struct {
	// The number of known contacts that responded to this survey.
	Known *int32 `json:"known,omitempty"`
	// The number of unknown contacts that responded to this survey.
	Unknown *int32 `json:"unknown,omitempty"`
	// The number of new contacts that responded to this survey.
	New *int32 `json:"new,omitempty"`
}

// NewContactCounts instantiates a new ContactCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactCounts() *ContactCounts {
	this := ContactCounts{}
	return &this
}

// NewContactCountsWithDefaults instantiates a new ContactCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactCountsWithDefaults() *ContactCounts {
	this := ContactCounts{}
	return &this
}

// GetKnown returns the Known field value if set, zero value otherwise.
func (o *ContactCounts) GetKnown() int32 {
	if o == nil || IsNil(o.Known) {
		var ret int32
		return ret
	}
	return *o.Known
}

// GetKnownOk returns a tuple with the Known field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactCounts) GetKnownOk() (*int32, bool) {
	if o == nil || IsNil(o.Known) {
		return nil, false
	}
	return o.Known, true
}

// HasKnown returns a boolean if a field has been set.
func (o *ContactCounts) HasKnown() bool {
	if o != nil && !IsNil(o.Known) {
		return true
	}

	return false
}

// SetKnown gets a reference to the given int32 and assigns it to the Known field.
func (o *ContactCounts) SetKnown(v int32) {
	o.Known = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *ContactCounts) GetUnknown() int32 {
	if o == nil || IsNil(o.Unknown) {
		var ret int32
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactCounts) GetUnknownOk() (*int32, bool) {
	if o == nil || IsNil(o.Unknown) {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *ContactCounts) HasUnknown() bool {
	if o != nil && !IsNil(o.Unknown) {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given int32 and assigns it to the Unknown field.
func (o *ContactCounts) SetUnknown(v int32) {
	o.Unknown = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *ContactCounts) GetNew() int32 {
	if o == nil || IsNil(o.New) {
		var ret int32
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactCounts) GetNewOk() (*int32, bool) {
	if o == nil || IsNil(o.New) {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *ContactCounts) HasNew() bool {
	if o != nil && !IsNil(o.New) {
		return true
	}

	return false
}

// SetNew gets a reference to the given int32 and assigns it to the New field.
func (o *ContactCounts) SetNew(v int32) {
	o.New = &v
}

func (o ContactCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Known) {
		toSerialize["known"] = o.Known
	}
	if !IsNil(o.Unknown) {
		toSerialize["unknown"] = o.Unknown
	}
	if !IsNil(o.New) {
		toSerialize["new"] = o.New
	}
	return toSerialize, nil
}

type NullableContactCounts struct {
	value *ContactCounts
	isSet bool
}

func (v NullableContactCounts) Get() *ContactCounts {
	return v.value
}

func (v *NullableContactCounts) Set(val *ContactCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableContactCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableContactCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactCounts(val *ContactCounts) *NullableContactCounts {
	return &NullableContactCounts{value: val, isSet: true}
}

func (v NullableContactCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


