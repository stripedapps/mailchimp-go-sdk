/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListStats{}

// ListStats The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list.
type ListStats struct {
	// The average number of subscriptions per month for the list.
	SubRate *float32 `json:"sub_rate,omitempty"`
	// The average number of unsubscriptions per month for the list.
	UnsubRate *float32 `json:"unsub_rate,omitempty"`
	// The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list.
	OpenRate *float32 `json:"open_rate,omitempty"`
	// The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list.
	ClickRate *float32 `json:"click_rate,omitempty"`
}

// NewListStats instantiates a new ListStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListStats() *ListStats {
	this := ListStats{}
	return &this
}

// NewListStatsWithDefaults instantiates a new ListStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListStatsWithDefaults() *ListStats {
	this := ListStats{}
	return &this
}

// GetSubRate returns the SubRate field value if set, zero value otherwise.
func (o *ListStats) GetSubRate() float32 {
	if o == nil || IsNil(o.SubRate) {
		var ret float32
		return ret
	}
	return *o.SubRate
}

// GetSubRateOk returns a tuple with the SubRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStats) GetSubRateOk() (*float32, bool) {
	if o == nil || IsNil(o.SubRate) {
		return nil, false
	}
	return o.SubRate, true
}

// HasSubRate returns a boolean if a field has been set.
func (o *ListStats) HasSubRate() bool {
	if o != nil && !IsNil(o.SubRate) {
		return true
	}

	return false
}

// SetSubRate gets a reference to the given float32 and assigns it to the SubRate field.
func (o *ListStats) SetSubRate(v float32) {
	o.SubRate = &v
}

// GetUnsubRate returns the UnsubRate field value if set, zero value otherwise.
func (o *ListStats) GetUnsubRate() float32 {
	if o == nil || IsNil(o.UnsubRate) {
		var ret float32
		return ret
	}
	return *o.UnsubRate
}

// GetUnsubRateOk returns a tuple with the UnsubRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStats) GetUnsubRateOk() (*float32, bool) {
	if o == nil || IsNil(o.UnsubRate) {
		return nil, false
	}
	return o.UnsubRate, true
}

// HasUnsubRate returns a boolean if a field has been set.
func (o *ListStats) HasUnsubRate() bool {
	if o != nil && !IsNil(o.UnsubRate) {
		return true
	}

	return false
}

// SetUnsubRate gets a reference to the given float32 and assigns it to the UnsubRate field.
func (o *ListStats) SetUnsubRate(v float32) {
	o.UnsubRate = &v
}

// GetOpenRate returns the OpenRate field value if set, zero value otherwise.
func (o *ListStats) GetOpenRate() float32 {
	if o == nil || IsNil(o.OpenRate) {
		var ret float32
		return ret
	}
	return *o.OpenRate
}

// GetOpenRateOk returns a tuple with the OpenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStats) GetOpenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenRate) {
		return nil, false
	}
	return o.OpenRate, true
}

// HasOpenRate returns a boolean if a field has been set.
func (o *ListStats) HasOpenRate() bool {
	if o != nil && !IsNil(o.OpenRate) {
		return true
	}

	return false
}

// SetOpenRate gets a reference to the given float32 and assigns it to the OpenRate field.
func (o *ListStats) SetOpenRate(v float32) {
	o.OpenRate = &v
}

// GetClickRate returns the ClickRate field value if set, zero value otherwise.
func (o *ListStats) GetClickRate() float32 {
	if o == nil || IsNil(o.ClickRate) {
		var ret float32
		return ret
	}
	return *o.ClickRate
}

// GetClickRateOk returns a tuple with the ClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStats) GetClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickRate) {
		return nil, false
	}
	return o.ClickRate, true
}

// HasClickRate returns a boolean if a field has been set.
func (o *ListStats) HasClickRate() bool {
	if o != nil && !IsNil(o.ClickRate) {
		return true
	}

	return false
}

// SetClickRate gets a reference to the given float32 and assigns it to the ClickRate field.
func (o *ListStats) SetClickRate(v float32) {
	o.ClickRate = &v
}

func (o ListStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubRate) {
		toSerialize["sub_rate"] = o.SubRate
	}
	if !IsNil(o.UnsubRate) {
		toSerialize["unsub_rate"] = o.UnsubRate
	}
	if !IsNil(o.OpenRate) {
		toSerialize["open_rate"] = o.OpenRate
	}
	if !IsNil(o.ClickRate) {
		toSerialize["click_rate"] = o.ClickRate
	}
	return toSerialize, nil
}

type NullableListStats struct {
	value *ListStats
	isSet bool
}

func (v NullableListStats) Get() *ListStats {
	return v.value
}

func (v *NullableListStats) Set(val *ListStats) {
	v.value = val
	v.isSet = true
}

func (v NullableListStats) IsSet() bool {
	return v.isSet
}

func (v *NullableListStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListStats(val *ListStats) *NullableListStats {
	return &NullableListStats{value: val, isSet: true}
}

func (v NullableListStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


