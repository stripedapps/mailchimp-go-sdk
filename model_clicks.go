/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Clicks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Clicks{}

// Clicks An object describing the click activity for the campaign.
type Clicks struct {
	// The total number of clicks for the campaign.
	ClicksTotal *int32 `json:"clicks_total,omitempty"`
	// The total number of unique clicks for links across a campaign.
	UniqueClicks *int32 `json:"unique_clicks,omitempty"`
	// The total number of subscribers who clicked on a campaign.
	UniqueSubscriberClicks *int32 `json:"unique_subscriber_clicks,omitempty"`
	// The number of unique clicks divided by the total number of successful deliveries.
	ClickRate *float32 `json:"click_rate,omitempty"`
	// The date and time of the last recorded click for the campaign in ISO 8601 format.
	LastClick *time.Time `json:"last_click,omitempty"`
}

// NewClicks instantiates a new Clicks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClicks() *Clicks {
	this := Clicks{}
	return &this
}

// NewClicksWithDefaults instantiates a new Clicks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClicksWithDefaults() *Clicks {
	this := Clicks{}
	return &this
}

// GetClicksTotal returns the ClicksTotal field value if set, zero value otherwise.
func (o *Clicks) GetClicksTotal() int32 {
	if o == nil || IsNil(o.ClicksTotal) {
		var ret int32
		return ret
	}
	return *o.ClicksTotal
}

// GetClicksTotalOk returns a tuple with the ClicksTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clicks) GetClicksTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.ClicksTotal) {
		return nil, false
	}
	return o.ClicksTotal, true
}

// HasClicksTotal returns a boolean if a field has been set.
func (o *Clicks) HasClicksTotal() bool {
	if o != nil && !IsNil(o.ClicksTotal) {
		return true
	}

	return false
}

// SetClicksTotal gets a reference to the given int32 and assigns it to the ClicksTotal field.
func (o *Clicks) SetClicksTotal(v int32) {
	o.ClicksTotal = &v
}

// GetUniqueClicks returns the UniqueClicks field value if set, zero value otherwise.
func (o *Clicks) GetUniqueClicks() int32 {
	if o == nil || IsNil(o.UniqueClicks) {
		var ret int32
		return ret
	}
	return *o.UniqueClicks
}

// GetUniqueClicksOk returns a tuple with the UniqueClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clicks) GetUniqueClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueClicks) {
		return nil, false
	}
	return o.UniqueClicks, true
}

// HasUniqueClicks returns a boolean if a field has been set.
func (o *Clicks) HasUniqueClicks() bool {
	if o != nil && !IsNil(o.UniqueClicks) {
		return true
	}

	return false
}

// SetUniqueClicks gets a reference to the given int32 and assigns it to the UniqueClicks field.
func (o *Clicks) SetUniqueClicks(v int32) {
	o.UniqueClicks = &v
}

// GetUniqueSubscriberClicks returns the UniqueSubscriberClicks field value if set, zero value otherwise.
func (o *Clicks) GetUniqueSubscriberClicks() int32 {
	if o == nil || IsNil(o.UniqueSubscriberClicks) {
		var ret int32
		return ret
	}
	return *o.UniqueSubscriberClicks
}

// GetUniqueSubscriberClicksOk returns a tuple with the UniqueSubscriberClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clicks) GetUniqueSubscriberClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueSubscriberClicks) {
		return nil, false
	}
	return o.UniqueSubscriberClicks, true
}

// HasUniqueSubscriberClicks returns a boolean if a field has been set.
func (o *Clicks) HasUniqueSubscriberClicks() bool {
	if o != nil && !IsNil(o.UniqueSubscriberClicks) {
		return true
	}

	return false
}

// SetUniqueSubscriberClicks gets a reference to the given int32 and assigns it to the UniqueSubscriberClicks field.
func (o *Clicks) SetUniqueSubscriberClicks(v int32) {
	o.UniqueSubscriberClicks = &v
}

// GetClickRate returns the ClickRate field value if set, zero value otherwise.
func (o *Clicks) GetClickRate() float32 {
	if o == nil || IsNil(o.ClickRate) {
		var ret float32
		return ret
	}
	return *o.ClickRate
}

// GetClickRateOk returns a tuple with the ClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clicks) GetClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickRate) {
		return nil, false
	}
	return o.ClickRate, true
}

// HasClickRate returns a boolean if a field has been set.
func (o *Clicks) HasClickRate() bool {
	if o != nil && !IsNil(o.ClickRate) {
		return true
	}

	return false
}

// SetClickRate gets a reference to the given float32 and assigns it to the ClickRate field.
func (o *Clicks) SetClickRate(v float32) {
	o.ClickRate = &v
}

// GetLastClick returns the LastClick field value if set, zero value otherwise.
func (o *Clicks) GetLastClick() time.Time {
	if o == nil || IsNil(o.LastClick) {
		var ret time.Time
		return ret
	}
	return *o.LastClick
}

// GetLastClickOk returns a tuple with the LastClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clicks) GetLastClickOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastClick) {
		return nil, false
	}
	return o.LastClick, true
}

// HasLastClick returns a boolean if a field has been set.
func (o *Clicks) HasLastClick() bool {
	if o != nil && !IsNil(o.LastClick) {
		return true
	}

	return false
}

// SetLastClick gets a reference to the given time.Time and assigns it to the LastClick field.
func (o *Clicks) SetLastClick(v time.Time) {
	o.LastClick = &v
}

func (o Clicks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Clicks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClicksTotal) {
		toSerialize["clicks_total"] = o.ClicksTotal
	}
	if !IsNil(o.UniqueClicks) {
		toSerialize["unique_clicks"] = o.UniqueClicks
	}
	if !IsNil(o.UniqueSubscriberClicks) {
		toSerialize["unique_subscriber_clicks"] = o.UniqueSubscriberClicks
	}
	if !IsNil(o.ClickRate) {
		toSerialize["click_rate"] = o.ClickRate
	}
	if !IsNil(o.LastClick) {
		toSerialize["last_click"] = o.LastClick
	}
	return toSerialize, nil
}

type NullableClicks struct {
	value *Clicks
	isSet bool
}

func (v NullableClicks) Get() *Clicks {
	return v.value
}

func (v *NullableClicks) Set(val *Clicks) {
	v.value = val
	v.isSet = true
}

func (v NullableClicks) IsSet() bool {
	return v.isSet
}

func (v *NullableClicks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClicks(val *Clicks) *NullableClicks {
	return &NullableClicks{value: val, isSet: true}
}

func (v NullableClicks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClicks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


