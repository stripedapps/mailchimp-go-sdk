/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the List4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &List4{}

// List4 List settings for the campaign.
type List4 struct {
	// The unique list id.
	ListId string `json:"list_id"`
	SegmentOpts *SegmentOptions2 `json:"segment_opts,omitempty"`
}

// NewList4 instantiates a new List4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewList4(listId string) *List4 {
	this := List4{}
	this.ListId = listId
	return &this
}

// NewList4WithDefaults instantiates a new List4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewList4WithDefaults() *List4 {
	this := List4{}
	return &this
}

// GetListId returns the ListId field value
func (o *List4) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *List4) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *List4) SetListId(v string) {
	o.ListId = v
}

// GetSegmentOpts returns the SegmentOpts field value if set, zero value otherwise.
func (o *List4) GetSegmentOpts() SegmentOptions2 {
	if o == nil || IsNil(o.SegmentOpts) {
		var ret SegmentOptions2
		return ret
	}
	return *o.SegmentOpts
}

// GetSegmentOptsOk returns a tuple with the SegmentOpts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *List4) GetSegmentOptsOk() (*SegmentOptions2, bool) {
	if o == nil || IsNil(o.SegmentOpts) {
		return nil, false
	}
	return o.SegmentOpts, true
}

// HasSegmentOpts returns a boolean if a field has been set.
func (o *List4) HasSegmentOpts() bool {
	if o != nil && !IsNil(o.SegmentOpts) {
		return true
	}

	return false
}

// SetSegmentOpts gets a reference to the given SegmentOptions2 and assigns it to the SegmentOpts field.
func (o *List4) SetSegmentOpts(v SegmentOptions2) {
	o.SegmentOpts = &v
}

func (o List4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o List4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["list_id"] = o.ListId
	if !IsNil(o.SegmentOpts) {
		toSerialize["segment_opts"] = o.SegmentOpts
	}
	return toSerialize, nil
}

type NullableList4 struct {
	value *List4
	isSet bool
}

func (v NullableList4) Get() *List4 {
	return v.value
}

func (v *NullableList4) Set(val *List4) {
	v.value = val
	v.isSet = true
}

func (v NullableList4) IsSet() bool {
	return v.isSet
}

func (v *NullableList4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableList4(val *List4) *NullableList4 {
	return &NullableList4{value: val, isSet: true}
}

func (v NullableList4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableList4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


