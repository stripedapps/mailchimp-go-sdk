/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EcommerceProductVariants type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcommerceProductVariants{}

// EcommerceProductVariants A collection of a product's variants.
type EcommerceProductVariants struct {
	// The store id.
	StoreId *string `json:"store_id,omitempty"`
	// The product id.
	ProductId *string `json:"product_id,omitempty"`
	// An array of objects, each representing a product's variants.
	Variants []ECommerceProductVariant `json:"variants,omitempty"`
	// The total number of items matching the query regardless of pagination.
	TotalItems *int32 `json:"total_items,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewEcommerceProductVariants instantiates a new EcommerceProductVariants object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcommerceProductVariants() *EcommerceProductVariants {
	this := EcommerceProductVariants{}
	return &this
}

// NewEcommerceProductVariantsWithDefaults instantiates a new EcommerceProductVariants object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcommerceProductVariantsWithDefaults() *EcommerceProductVariants {
	this := EcommerceProductVariants{}
	return &this
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *EcommerceProductVariants) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductVariants) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *EcommerceProductVariants) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *EcommerceProductVariants) SetStoreId(v string) {
	o.StoreId = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *EcommerceProductVariants) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductVariants) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *EcommerceProductVariants) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *EcommerceProductVariants) SetProductId(v string) {
	o.ProductId = &v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *EcommerceProductVariants) GetVariants() []ECommerceProductVariant {
	if o == nil || IsNil(o.Variants) {
		var ret []ECommerceProductVariant
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductVariants) GetVariantsOk() ([]ECommerceProductVariant, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *EcommerceProductVariants) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []ECommerceProductVariant and assigns it to the Variants field.
func (o *EcommerceProductVariants) SetVariants(v []ECommerceProductVariant) {
	o.Variants = v
}

// GetTotalItems returns the TotalItems field value if set, zero value otherwise.
func (o *EcommerceProductVariants) GetTotalItems() int32 {
	if o == nil || IsNil(o.TotalItems) {
		var ret int32
		return ret
	}
	return *o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductVariants) GetTotalItemsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalItems) {
		return nil, false
	}
	return o.TotalItems, true
}

// HasTotalItems returns a boolean if a field has been set.
func (o *EcommerceProductVariants) HasTotalItems() bool {
	if o != nil && !IsNil(o.TotalItems) {
		return true
	}

	return false
}

// SetTotalItems gets a reference to the given int32 and assigns it to the TotalItems field.
func (o *EcommerceProductVariants) SetTotalItems(v int32) {
	o.TotalItems = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EcommerceProductVariants) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcommerceProductVariants) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EcommerceProductVariants) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *EcommerceProductVariants) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o EcommerceProductVariants) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcommerceProductVariants) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StoreId) {
		toSerialize["store_id"] = o.StoreId
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.TotalItems) {
		toSerialize["total_items"] = o.TotalItems
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableEcommerceProductVariants struct {
	value *EcommerceProductVariants
	isSet bool
}

func (v NullableEcommerceProductVariants) Get() *EcommerceProductVariants {
	return v.value
}

func (v *NullableEcommerceProductVariants) Set(val *EcommerceProductVariants) {
	v.value = val
	v.isSet = true
}

func (v NullableEcommerceProductVariants) IsSet() bool {
	return v.isSet
}

func (v *NullableEcommerceProductVariants) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcommerceProductVariants(val *EcommerceProductVariants) *NullableEcommerceProductVariants {
	return &NullableEcommerceProductVariants{value: val, isSet: true}
}

func (v NullableEcommerceProductVariants) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcommerceProductVariants) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


