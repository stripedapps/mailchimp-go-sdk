/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListContact1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListContact1{}

// ListContact1 [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws.
type ListContact1 struct {
	// The company name for the list.
	Company string `json:"company"`
	// The street address for the list contact.
	Address1 string `json:"address1"`
	// The street address for the list contact.
	Address2 *string `json:"address2,omitempty"`
	// The city for the list contact.
	City string `json:"city"`
	// The state for the list contact.
	State *string `json:"state,omitempty"`
	// The postal or zip code for the list contact.
	Zip *string `json:"zip,omitempty"`
	// A two-character ISO3166 country code. Defaults to US if invalid.
	Country string `json:"country"`
	// The phone number for the list contact.
	Phone *string `json:"phone,omitempty"`
}

// NewListContact1 instantiates a new ListContact1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListContact1(company string, address1 string, city string, country string) *ListContact1 {
	this := ListContact1{}
	this.Company = company
	this.Address1 = address1
	this.City = city
	this.Country = country
	return &this
}

// NewListContact1WithDefaults instantiates a new ListContact1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListContact1WithDefaults() *ListContact1 {
	this := ListContact1{}
	return &this
}

// GetCompany returns the Company field value
func (o *ListContact1) GetCompany() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *ListContact1) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *ListContact1) SetCompany(v string) {
	o.Company = v
}

// GetAddress1 returns the Address1 field value
func (o *ListContact1) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *ListContact1) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *ListContact1) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *ListContact1) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListContact1) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *ListContact1) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *ListContact1) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value
func (o *ListContact1) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *ListContact1) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *ListContact1) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ListContact1) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListContact1) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ListContact1) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ListContact1) SetState(v string) {
	o.State = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *ListContact1) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListContact1) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *ListContact1) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *ListContact1) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value
func (o *ListContact1) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *ListContact1) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *ListContact1) SetCountry(v string) {
	o.Country = v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *ListContact1) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListContact1) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *ListContact1) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *ListContact1) SetPhone(v string) {
	o.Phone = &v
}

func (o ListContact1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListContact1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["company"] = o.Company
	toSerialize["address1"] = o.Address1
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	toSerialize["city"] = o.City
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	toSerialize["country"] = o.Country
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return toSerialize, nil
}

type NullableListContact1 struct {
	value *ListContact1
	isSet bool
}

func (v NullableListContact1) Get() *ListContact1 {
	return v.value
}

func (v *NullableListContact1) Set(val *ListContact1) {
	v.value = val
	v.isSet = true
}

func (v NullableListContact1) IsSet() bool {
	return v.isSet
}

func (v *NullableListContact1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListContact1(val *ListContact1) *NullableListContact1 {
	return &NullableListContact1{value: val, isSet: true}
}

func (v NullableListContact1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListContact1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


