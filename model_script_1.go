/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Script1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Script1{}

// Script1 The script used to connect your site with Mailchimp.
type Script1 struct {
	// The URL used for any integrations that offer built-in support for connected sites.
	Url *string `json:"url,omitempty"`
	// A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp.
	Fragment *string `json:"fragment,omitempty"`
}

// NewScript1 instantiates a new Script1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScript1() *Script1 {
	this := Script1{}
	return &this
}

// NewScript1WithDefaults instantiates a new Script1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScript1WithDefaults() *Script1 {
	this := Script1{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Script1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Script1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Script1) SetUrl(v string) {
	o.Url = &v
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *Script1) GetFragment() string {
	if o == nil || IsNil(o.Fragment) {
		var ret string
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script1) GetFragmentOk() (*string, bool) {
	if o == nil || IsNil(o.Fragment) {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *Script1) HasFragment() bool {
	if o != nil && !IsNil(o.Fragment) {
		return true
	}

	return false
}

// SetFragment gets a reference to the given string and assigns it to the Fragment field.
func (o *Script1) SetFragment(v string) {
	o.Fragment = &v
}

func (o Script1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Script1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Fragment) {
		toSerialize["fragment"] = o.Fragment
	}
	return toSerialize, nil
}

type NullableScript1 struct {
	value *Script1
	isSet bool
}

func (v NullableScript1) Get() *Script1 {
	return v.value
}

func (v *NullableScript1) Set(val *Script1) {
	v.value = val
	v.isSet = true
}

func (v NullableScript1) IsSet() bool {
	return v.isSet
}

func (v *NullableScript1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScript1(val *Script1) *NullableScript1 {
	return &NullableScript1{value: val, isSet: true}
}

func (v NullableScript1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScript1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


