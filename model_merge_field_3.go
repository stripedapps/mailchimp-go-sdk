/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MergeField3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeField3{}

// MergeField3 A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience.
type MergeField3 struct {
	// An unchanging id for the merge field.
	Id *int32 `json:"id,omitempty"`
	// The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
	Label *string `json:"label,omitempty"`
	// The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field.
	Type *string `json:"type,omitempty"`
}

// NewMergeField3 instantiates a new MergeField3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeField3() *MergeField3 {
	this := MergeField3{}
	return &this
}

// NewMergeField3WithDefaults instantiates a new MergeField3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeField3WithDefaults() *MergeField3 {
	this := MergeField3{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MergeField3) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField3) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MergeField3) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MergeField3) SetId(v int32) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *MergeField3) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField3) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *MergeField3) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *MergeField3) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MergeField3) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeField3) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MergeField3) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MergeField3) SetType(v string) {
	o.Type = &v
}

func (o MergeField3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeField3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMergeField3 struct {
	value *MergeField3
	isSet bool
}

func (v NullableMergeField3) Get() *MergeField3 {
	return v.value
}

func (v *NullableMergeField3) Set(val *MergeField3) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeField3) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeField3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeField3(val *MergeField3) *NullableMergeField3 {
	return &NullableMergeField3{value: val, isSet: true}
}

func (v NullableMergeField3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeField3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


