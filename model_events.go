/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Events type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Events{}

// Events A new event for a specific list member
type Events struct {
	// The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
	Name string `json:"name"`
	// An optional list of properties
	Properties *map[string]string `json:"properties,omitempty"`
	// Events created with the is_syncing value set to `true` will not trigger automations.
	IsSyncing *bool `json:"is_syncing,omitempty"`
	// The date and time the event occurred in ISO 8601 format.
	OccurredAt *time.Time `json:"occurred_at,omitempty"`
}

// NewEvents instantiates a new Events object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvents(name string) *Events {
	this := Events{}
	this.Name = name
	return &this
}

// NewEventsWithDefaults instantiates a new Events object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsWithDefaults() *Events {
	this := Events{}
	return &this
}

// GetName returns the Name field value
func (o *Events) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Events) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Events) SetName(v string) {
	o.Name = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Events) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Events) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Events) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *Events) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetIsSyncing returns the IsSyncing field value if set, zero value otherwise.
func (o *Events) GetIsSyncing() bool {
	if o == nil || IsNil(o.IsSyncing) {
		var ret bool
		return ret
	}
	return *o.IsSyncing
}

// GetIsSyncingOk returns a tuple with the IsSyncing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Events) GetIsSyncingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncing) {
		return nil, false
	}
	return o.IsSyncing, true
}

// HasIsSyncing returns a boolean if a field has been set.
func (o *Events) HasIsSyncing() bool {
	if o != nil && !IsNil(o.IsSyncing) {
		return true
	}

	return false
}

// SetIsSyncing gets a reference to the given bool and assigns it to the IsSyncing field.
func (o *Events) SetIsSyncing(v bool) {
	o.IsSyncing = &v
}

// GetOccurredAt returns the OccurredAt field value if set, zero value otherwise.
func (o *Events) GetOccurredAt() time.Time {
	if o == nil || IsNil(o.OccurredAt) {
		var ret time.Time
		return ret
	}
	return *o.OccurredAt
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Events) GetOccurredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OccurredAt) {
		return nil, false
	}
	return o.OccurredAt, true
}

// HasOccurredAt returns a boolean if a field has been set.
func (o *Events) HasOccurredAt() bool {
	if o != nil && !IsNil(o.OccurredAt) {
		return true
	}

	return false
}

// SetOccurredAt gets a reference to the given time.Time and assigns it to the OccurredAt field.
func (o *Events) SetOccurredAt(v time.Time) {
	o.OccurredAt = &v
}

func (o Events) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Events) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.IsSyncing) {
		toSerialize["is_syncing"] = o.IsSyncing
	}
	if !IsNil(o.OccurredAt) {
		toSerialize["occurred_at"] = o.OccurredAt
	}
	return toSerialize, nil
}

type NullableEvents struct {
	value *Events
	isSet bool
}

func (v NullableEvents) Get() *Events {
	return v.value
}

func (v *NullableEvents) Set(val *Events) {
	v.value = val
	v.isSet = true
}

func (v NullableEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvents(val *Events) *NullableEvents {
	return &NullableEvents{value: val, isSet: true}
}

func (v NullableEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


