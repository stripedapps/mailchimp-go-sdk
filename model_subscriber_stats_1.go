/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriberStats1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriberStats1{}

// SubscriberStats1 Open and click rates for this subscriber.
type SubscriberStats1 struct {
	// A subscriber's average open rate.
	AvgOpenRate *float32 `json:"avg_open_rate,omitempty"`
	// A subscriber's average clickthrough rate.
	AvgClickRate *float32 `json:"avg_click_rate,omitempty"`
	EcommerceData *EcommerceStats `json:"ecommerce_data,omitempty"`
}

// NewSubscriberStats1 instantiates a new SubscriberStats1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriberStats1() *SubscriberStats1 {
	this := SubscriberStats1{}
	return &this
}

// NewSubscriberStats1WithDefaults instantiates a new SubscriberStats1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberStats1WithDefaults() *SubscriberStats1 {
	this := SubscriberStats1{}
	return &this
}

// GetAvgOpenRate returns the AvgOpenRate field value if set, zero value otherwise.
func (o *SubscriberStats1) GetAvgOpenRate() float32 {
	if o == nil || IsNil(o.AvgOpenRate) {
		var ret float32
		return ret
	}
	return *o.AvgOpenRate
}

// GetAvgOpenRateOk returns a tuple with the AvgOpenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberStats1) GetAvgOpenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgOpenRate) {
		return nil, false
	}
	return o.AvgOpenRate, true
}

// HasAvgOpenRate returns a boolean if a field has been set.
func (o *SubscriberStats1) HasAvgOpenRate() bool {
	if o != nil && !IsNil(o.AvgOpenRate) {
		return true
	}

	return false
}

// SetAvgOpenRate gets a reference to the given float32 and assigns it to the AvgOpenRate field.
func (o *SubscriberStats1) SetAvgOpenRate(v float32) {
	o.AvgOpenRate = &v
}

// GetAvgClickRate returns the AvgClickRate field value if set, zero value otherwise.
func (o *SubscriberStats1) GetAvgClickRate() float32 {
	if o == nil || IsNil(o.AvgClickRate) {
		var ret float32
		return ret
	}
	return *o.AvgClickRate
}

// GetAvgClickRateOk returns a tuple with the AvgClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberStats1) GetAvgClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgClickRate) {
		return nil, false
	}
	return o.AvgClickRate, true
}

// HasAvgClickRate returns a boolean if a field has been set.
func (o *SubscriberStats1) HasAvgClickRate() bool {
	if o != nil && !IsNil(o.AvgClickRate) {
		return true
	}

	return false
}

// SetAvgClickRate gets a reference to the given float32 and assigns it to the AvgClickRate field.
func (o *SubscriberStats1) SetAvgClickRate(v float32) {
	o.AvgClickRate = &v
}

// GetEcommerceData returns the EcommerceData field value if set, zero value otherwise.
func (o *SubscriberStats1) GetEcommerceData() EcommerceStats {
	if o == nil || IsNil(o.EcommerceData) {
		var ret EcommerceStats
		return ret
	}
	return *o.EcommerceData
}

// GetEcommerceDataOk returns a tuple with the EcommerceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberStats1) GetEcommerceDataOk() (*EcommerceStats, bool) {
	if o == nil || IsNil(o.EcommerceData) {
		return nil, false
	}
	return o.EcommerceData, true
}

// HasEcommerceData returns a boolean if a field has been set.
func (o *SubscriberStats1) HasEcommerceData() bool {
	if o != nil && !IsNil(o.EcommerceData) {
		return true
	}

	return false
}

// SetEcommerceData gets a reference to the given EcommerceStats and assigns it to the EcommerceData field.
func (o *SubscriberStats1) SetEcommerceData(v EcommerceStats) {
	o.EcommerceData = &v
}

func (o SubscriberStats1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriberStats1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvgOpenRate) {
		toSerialize["avg_open_rate"] = o.AvgOpenRate
	}
	if !IsNil(o.AvgClickRate) {
		toSerialize["avg_click_rate"] = o.AvgClickRate
	}
	if !IsNil(o.EcommerceData) {
		toSerialize["ecommerce_data"] = o.EcommerceData
	}
	return toSerialize, nil
}

type NullableSubscriberStats1 struct {
	value *SubscriberStats1
	isSet bool
}

func (v NullableSubscriberStats1) Get() *SubscriberStats1 {
	return v.value
}

func (v *NullableSubscriberStats1) Set(val *SubscriberStats1) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriberStats1) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriberStats1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriberStats1(val *SubscriberStats1) *NullableSubscriberStats1 {
	return &NullableSubscriberStats1{value: val, isSet: true}
}

func (v NullableSubscriberStats1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriberStats1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


