/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ECommerceProductVariant1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECommerceProductVariant1{}

// ECommerceProductVariant1 Information about a specific product variant.
type ECommerceProductVariant1 struct {
	// A unique identifier for the product variant.
	Id string `json:"id"`
	// The title of a product variant.
	Title string `json:"title"`
	// The URL for a product variant.
	Url *string `json:"url,omitempty"`
	// The stock keeping unit (SKU) of a product variant.
	Sku *string `json:"sku,omitempty"`
	// The price of a product variant.
	Price *float32 `json:"price,omitempty"`
	// The inventory quantity of a product variant.
	InventoryQuantity *int32 `json:"inventory_quantity,omitempty"`
	// The image URL for a product variant.
	ImageUrl *string `json:"image_url,omitempty"`
	// The backorders of a product variant.
	Backorders *string `json:"backorders,omitempty"`
	// The visibility of a product variant.
	Visibility *string `json:"visibility,omitempty"`
}

// NewECommerceProductVariant1 instantiates a new ECommerceProductVariant1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECommerceProductVariant1(id string, title string) *ECommerceProductVariant1 {
	this := ECommerceProductVariant1{}
	this.Id = id
	this.Title = title
	return &this
}

// NewECommerceProductVariant1WithDefaults instantiates a new ECommerceProductVariant1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECommerceProductVariant1WithDefaults() *ECommerceProductVariant1 {
	this := ECommerceProductVariant1{}
	return &this
}

// GetId returns the Id field value
func (o *ECommerceProductVariant1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ECommerceProductVariant1) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *ECommerceProductVariant1) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ECommerceProductVariant1) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ECommerceProductVariant1) SetUrl(v string) {
	o.Url = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ECommerceProductVariant1) SetSku(v string) {
	o.Sku = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *ECommerceProductVariant1) SetPrice(v float32) {
	o.Price = &v
}

// GetInventoryQuantity returns the InventoryQuantity field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetInventoryQuantity() int32 {
	if o == nil || IsNil(o.InventoryQuantity) {
		var ret int32
		return ret
	}
	return *o.InventoryQuantity
}

// GetInventoryQuantityOk returns a tuple with the InventoryQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetInventoryQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.InventoryQuantity) {
		return nil, false
	}
	return o.InventoryQuantity, true
}

// HasInventoryQuantity returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasInventoryQuantity() bool {
	if o != nil && !IsNil(o.InventoryQuantity) {
		return true
	}

	return false
}

// SetInventoryQuantity gets a reference to the given int32 and assigns it to the InventoryQuantity field.
func (o *ECommerceProductVariant1) SetInventoryQuantity(v int32) {
	o.InventoryQuantity = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ECommerceProductVariant1) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetBackorders returns the Backorders field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetBackorders() string {
	if o == nil || IsNil(o.Backorders) {
		var ret string
		return ret
	}
	return *o.Backorders
}

// GetBackordersOk returns a tuple with the Backorders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetBackordersOk() (*string, bool) {
	if o == nil || IsNil(o.Backorders) {
		return nil, false
	}
	return o.Backorders, true
}

// HasBackorders returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasBackorders() bool {
	if o != nil && !IsNil(o.Backorders) {
		return true
	}

	return false
}

// SetBackorders gets a reference to the given string and assigns it to the Backorders field.
func (o *ECommerceProductVariant1) SetBackorders(v string) {
	o.Backorders = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ECommerceProductVariant1) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductVariant1) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ECommerceProductVariant1) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ECommerceProductVariant1) SetVisibility(v string) {
	o.Visibility = &v
}

func (o ECommerceProductVariant1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECommerceProductVariant1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.InventoryQuantity) {
		toSerialize["inventory_quantity"] = o.InventoryQuantity
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["image_url"] = o.ImageUrl
	}
	if !IsNil(o.Backorders) {
		toSerialize["backorders"] = o.Backorders
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	return toSerialize, nil
}

type NullableECommerceProductVariant1 struct {
	value *ECommerceProductVariant1
	isSet bool
}

func (v NullableECommerceProductVariant1) Get() *ECommerceProductVariant1 {
	return v.value
}

func (v *NullableECommerceProductVariant1) Set(val *ECommerceProductVariant1) {
	v.value = val
	v.isSet = true
}

func (v NullableECommerceProductVariant1) IsSet() bool {
	return v.isSet
}

func (v *NullableECommerceProductVariant1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECommerceProductVariant1(val *ECommerceProductVariant1) *NullableECommerceProductVariant1 {
	return &NullableECommerceProductVariant1{value: val, isSet: true}
}

func (v NullableECommerceProductVariant1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECommerceProductVariant1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


