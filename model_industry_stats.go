/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IndustryStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndustryStats{}

// IndustryStats The [average campaign statistics](https://mailchimp.com/resources/research/email-marketing-benchmarks/?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs) for all campaigns in the account's specified industry.
type IndustryStats struct {
	// The average unique open rate for all campaigns in the account's specified industry.
	OpenRate *float32 `json:"open_rate,omitempty"`
	// The average bounce rate for all campaigns in the account's specified industry.
	BounceRate *float32 `json:"bounce_rate,omitempty"`
	// The average unique click rate for all campaigns in the account's specified industry.
	ClickRate *float32 `json:"click_rate,omitempty"`
}

// NewIndustryStats instantiates a new IndustryStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustryStats() *IndustryStats {
	this := IndustryStats{}
	return &this
}

// NewIndustryStatsWithDefaults instantiates a new IndustryStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryStatsWithDefaults() *IndustryStats {
	this := IndustryStats{}
	return &this
}

// GetOpenRate returns the OpenRate field value if set, zero value otherwise.
func (o *IndustryStats) GetOpenRate() float32 {
	if o == nil || IsNil(o.OpenRate) {
		var ret float32
		return ret
	}
	return *o.OpenRate
}

// GetOpenRateOk returns a tuple with the OpenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats) GetOpenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenRate) {
		return nil, false
	}
	return o.OpenRate, true
}

// HasOpenRate returns a boolean if a field has been set.
func (o *IndustryStats) HasOpenRate() bool {
	if o != nil && !IsNil(o.OpenRate) {
		return true
	}

	return false
}

// SetOpenRate gets a reference to the given float32 and assigns it to the OpenRate field.
func (o *IndustryStats) SetOpenRate(v float32) {
	o.OpenRate = &v
}

// GetBounceRate returns the BounceRate field value if set, zero value otherwise.
func (o *IndustryStats) GetBounceRate() float32 {
	if o == nil || IsNil(o.BounceRate) {
		var ret float32
		return ret
	}
	return *o.BounceRate
}

// GetBounceRateOk returns a tuple with the BounceRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats) GetBounceRateOk() (*float32, bool) {
	if o == nil || IsNil(o.BounceRate) {
		return nil, false
	}
	return o.BounceRate, true
}

// HasBounceRate returns a boolean if a field has been set.
func (o *IndustryStats) HasBounceRate() bool {
	if o != nil && !IsNil(o.BounceRate) {
		return true
	}

	return false
}

// SetBounceRate gets a reference to the given float32 and assigns it to the BounceRate field.
func (o *IndustryStats) SetBounceRate(v float32) {
	o.BounceRate = &v
}

// GetClickRate returns the ClickRate field value if set, zero value otherwise.
func (o *IndustryStats) GetClickRate() float32 {
	if o == nil || IsNil(o.ClickRate) {
		var ret float32
		return ret
	}
	return *o.ClickRate
}

// GetClickRateOk returns a tuple with the ClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryStats) GetClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickRate) {
		return nil, false
	}
	return o.ClickRate, true
}

// HasClickRate returns a boolean if a field has been set.
func (o *IndustryStats) HasClickRate() bool {
	if o != nil && !IsNil(o.ClickRate) {
		return true
	}

	return false
}

// SetClickRate gets a reference to the given float32 and assigns it to the ClickRate field.
func (o *IndustryStats) SetClickRate(v float32) {
	o.ClickRate = &v
}

func (o IndustryStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndustryStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenRate) {
		toSerialize["open_rate"] = o.OpenRate
	}
	if !IsNil(o.BounceRate) {
		toSerialize["bounce_rate"] = o.BounceRate
	}
	if !IsNil(o.ClickRate) {
		toSerialize["click_rate"] = o.ClickRate
	}
	return toSerialize, nil
}

type NullableIndustryStats struct {
	value *IndustryStats
	isSet bool
}

func (v NullableIndustryStats) Get() *IndustryStats {
	return v.value
}

func (v *NullableIndustryStats) Set(val *IndustryStats) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryStats) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryStats(val *IndustryStats) *NullableIndustryStats {
	return &NullableIndustryStats{value: val, isSet: true}
}

func (v NullableIndustryStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


