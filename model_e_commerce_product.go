/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ECommerceProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECommerceProduct{}

// ECommerceProduct Information about a specific product.
type ECommerceProduct struct {
	// A unique identifier for the product.
	Id *string `json:"id,omitempty"`
	// The currency code
	CurrencyCode *string `json:"currency_code,omitempty"`
	// The title of a product.
	Title *string `json:"title,omitempty"`
	// The handle of a product.
	Handle *string `json:"handle,omitempty"`
	// The URL for a product.
	Url *string `json:"url,omitempty"`
	// The description of a product.
	Description *string `json:"description,omitempty"`
	// The type of product.
	Type *string `json:"type,omitempty"`
	// The vendor for a product.
	Vendor *string `json:"vendor,omitempty"`
	// The image URL for a product.
	ImageUrl *string `json:"image_url,omitempty"`
	// Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
	Variants []ECommerceProductVariant `json:"variants,omitempty"`
	// An array of the product's images.
	Images []ECommerceProductImage `json:"images,omitempty"`
	// The date and time the product was published in ISO 8601 format.
	PublishedAtForeign *time.Time `json:"published_at_foreign,omitempty"`
	// A list of link types and descriptions for the API schema documents.
	Links []ResourceLink `json:"_links,omitempty"`
}

// NewECommerceProduct instantiates a new ECommerceProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECommerceProduct() *ECommerceProduct {
	this := ECommerceProduct{}
	return &this
}

// NewECommerceProductWithDefaults instantiates a new ECommerceProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECommerceProductWithDefaults() *ECommerceProduct {
	this := ECommerceProduct{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ECommerceProduct) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ECommerceProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ECommerceProduct) SetId(v string) {
	o.Id = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ECommerceProduct) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ECommerceProduct) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ECommerceProduct) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ECommerceProduct) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ECommerceProduct) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ECommerceProduct) SetTitle(v string) {
	o.Title = &v
}

// GetHandle returns the Handle field value if set, zero value otherwise.
func (o *ECommerceProduct) GetHandle() string {
	if o == nil || IsNil(o.Handle) {
		var ret string
		return ret
	}
	return *o.Handle
}

// GetHandleOk returns a tuple with the Handle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetHandleOk() (*string, bool) {
	if o == nil || IsNil(o.Handle) {
		return nil, false
	}
	return o.Handle, true
}

// HasHandle returns a boolean if a field has been set.
func (o *ECommerceProduct) HasHandle() bool {
	if o != nil && !IsNil(o.Handle) {
		return true
	}

	return false
}

// SetHandle gets a reference to the given string and assigns it to the Handle field.
func (o *ECommerceProduct) SetHandle(v string) {
	o.Handle = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ECommerceProduct) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ECommerceProduct) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ECommerceProduct) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ECommerceProduct) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ECommerceProduct) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ECommerceProduct) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ECommerceProduct) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ECommerceProduct) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ECommerceProduct) SetType(v string) {
	o.Type = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *ECommerceProduct) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *ECommerceProduct) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *ECommerceProduct) SetVendor(v string) {
	o.Vendor = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ECommerceProduct) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ECommerceProduct) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ECommerceProduct) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *ECommerceProduct) GetVariants() []ECommerceProductVariant {
	if o == nil || IsNil(o.Variants) {
		var ret []ECommerceProductVariant
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetVariantsOk() ([]ECommerceProductVariant, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *ECommerceProduct) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []ECommerceProductVariant and assigns it to the Variants field.
func (o *ECommerceProduct) SetVariants(v []ECommerceProductVariant) {
	o.Variants = v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ECommerceProduct) GetImages() []ECommerceProductImage {
	if o == nil || IsNil(o.Images) {
		var ret []ECommerceProductImage
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetImagesOk() ([]ECommerceProductImage, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ECommerceProduct) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ECommerceProductImage and assigns it to the Images field.
func (o *ECommerceProduct) SetImages(v []ECommerceProductImage) {
	o.Images = v
}

// GetPublishedAtForeign returns the PublishedAtForeign field value if set, zero value otherwise.
func (o *ECommerceProduct) GetPublishedAtForeign() time.Time {
	if o == nil || IsNil(o.PublishedAtForeign) {
		var ret time.Time
		return ret
	}
	return *o.PublishedAtForeign
}

// GetPublishedAtForeignOk returns a tuple with the PublishedAtForeign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetPublishedAtForeignOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishedAtForeign) {
		return nil, false
	}
	return o.PublishedAtForeign, true
}

// HasPublishedAtForeign returns a boolean if a field has been set.
func (o *ECommerceProduct) HasPublishedAtForeign() bool {
	if o != nil && !IsNil(o.PublishedAtForeign) {
		return true
	}

	return false
}

// SetPublishedAtForeign gets a reference to the given time.Time and assigns it to the PublishedAtForeign field.
func (o *ECommerceProduct) SetPublishedAtForeign(v time.Time) {
	o.PublishedAtForeign = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ECommerceProduct) GetLinks() []ResourceLink {
	if o == nil || IsNil(o.Links) {
		var ret []ResourceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProduct) GetLinksOk() ([]ResourceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ECommerceProduct) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ResourceLink and assigns it to the Links field.
func (o *ECommerceProduct) SetLinks(v []ResourceLink) {
	o.Links = v
}

func (o ECommerceProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECommerceProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Handle) {
		toSerialize["handle"] = o.Handle
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["image_url"] = o.ImageUrl
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.PublishedAtForeign) {
		toSerialize["published_at_foreign"] = o.PublishedAtForeign
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableECommerceProduct struct {
	value *ECommerceProduct
	isSet bool
}

func (v NullableECommerceProduct) Get() *ECommerceProduct {
	return v.value
}

func (v *NullableECommerceProduct) Set(val *ECommerceProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableECommerceProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableECommerceProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECommerceProduct(val *ECommerceProduct) *NullableECommerceProduct {
	return &NullableECommerceProduct{value: val, isSet: true}
}

func (v NullableECommerceProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECommerceProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


