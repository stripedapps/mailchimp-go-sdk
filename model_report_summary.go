/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReportSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportSummary{}

// ReportSummary High level reporting stats for an outreach.
type ReportSummary struct {
	Opens *int32 `json:"opens,omitempty"`
	UniqueOpens *int32 `json:"unique_opens,omitempty"`
	OpenRate *float32 `json:"open_rate,omitempty"`
	Clicks *int32 `json:"clicks,omitempty"`
	SubscriberClicks *int32 `json:"subscriber_clicks,omitempty"`
	ClickRate *float32 `json:"click_rate,omitempty"`
	Visits *int32 `json:"visits,omitempty"`
	UniqueVisits *int32 `json:"unique_visits,omitempty"`
	ConversionRate *float32 `json:"conversion_rate,omitempty"`
	Subscribes *int32 `json:"subscribes,omitempty"`
	Ecommerce *ReportSummaryEcommerce `json:"ecommerce,omitempty"`
	Impressions *float32 `json:"impressions,omitempty"`
	Reach *int32 `json:"reach,omitempty"`
	Engagements *int32 `json:"engagements,omitempty"`
	TotalSent *int32 `json:"total_sent,omitempty"`
}

// NewReportSummary instantiates a new ReportSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportSummary() *ReportSummary {
	this := ReportSummary{}
	return &this
}

// NewReportSummaryWithDefaults instantiates a new ReportSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportSummaryWithDefaults() *ReportSummary {
	this := ReportSummary{}
	return &this
}

// GetOpens returns the Opens field value if set, zero value otherwise.
func (o *ReportSummary) GetOpens() int32 {
	if o == nil || IsNil(o.Opens) {
		var ret int32
		return ret
	}
	return *o.Opens
}

// GetOpensOk returns a tuple with the Opens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetOpensOk() (*int32, bool) {
	if o == nil || IsNil(o.Opens) {
		return nil, false
	}
	return o.Opens, true
}

// HasOpens returns a boolean if a field has been set.
func (o *ReportSummary) HasOpens() bool {
	if o != nil && !IsNil(o.Opens) {
		return true
	}

	return false
}

// SetOpens gets a reference to the given int32 and assigns it to the Opens field.
func (o *ReportSummary) SetOpens(v int32) {
	o.Opens = &v
}

// GetUniqueOpens returns the UniqueOpens field value if set, zero value otherwise.
func (o *ReportSummary) GetUniqueOpens() int32 {
	if o == nil || IsNil(o.UniqueOpens) {
		var ret int32
		return ret
	}
	return *o.UniqueOpens
}

// GetUniqueOpensOk returns a tuple with the UniqueOpens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetUniqueOpensOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueOpens) {
		return nil, false
	}
	return o.UniqueOpens, true
}

// HasUniqueOpens returns a boolean if a field has been set.
func (o *ReportSummary) HasUniqueOpens() bool {
	if o != nil && !IsNil(o.UniqueOpens) {
		return true
	}

	return false
}

// SetUniqueOpens gets a reference to the given int32 and assigns it to the UniqueOpens field.
func (o *ReportSummary) SetUniqueOpens(v int32) {
	o.UniqueOpens = &v
}

// GetOpenRate returns the OpenRate field value if set, zero value otherwise.
func (o *ReportSummary) GetOpenRate() float32 {
	if o == nil || IsNil(o.OpenRate) {
		var ret float32
		return ret
	}
	return *o.OpenRate
}

// GetOpenRateOk returns a tuple with the OpenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetOpenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenRate) {
		return nil, false
	}
	return o.OpenRate, true
}

// HasOpenRate returns a boolean if a field has been set.
func (o *ReportSummary) HasOpenRate() bool {
	if o != nil && !IsNil(o.OpenRate) {
		return true
	}

	return false
}

// SetOpenRate gets a reference to the given float32 and assigns it to the OpenRate field.
func (o *ReportSummary) SetOpenRate(v float32) {
	o.OpenRate = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *ReportSummary) GetClicks() int32 {
	if o == nil || IsNil(o.Clicks) {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *ReportSummary) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *ReportSummary) SetClicks(v int32) {
	o.Clicks = &v
}

// GetSubscriberClicks returns the SubscriberClicks field value if set, zero value otherwise.
func (o *ReportSummary) GetSubscriberClicks() int32 {
	if o == nil || IsNil(o.SubscriberClicks) {
		var ret int32
		return ret
	}
	return *o.SubscriberClicks
}

// GetSubscriberClicksOk returns a tuple with the SubscriberClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetSubscriberClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.SubscriberClicks) {
		return nil, false
	}
	return o.SubscriberClicks, true
}

// HasSubscriberClicks returns a boolean if a field has been set.
func (o *ReportSummary) HasSubscriberClicks() bool {
	if o != nil && !IsNil(o.SubscriberClicks) {
		return true
	}

	return false
}

// SetSubscriberClicks gets a reference to the given int32 and assigns it to the SubscriberClicks field.
func (o *ReportSummary) SetSubscriberClicks(v int32) {
	o.SubscriberClicks = &v
}

// GetClickRate returns the ClickRate field value if set, zero value otherwise.
func (o *ReportSummary) GetClickRate() float32 {
	if o == nil || IsNil(o.ClickRate) {
		var ret float32
		return ret
	}
	return *o.ClickRate
}

// GetClickRateOk returns a tuple with the ClickRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetClickRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickRate) {
		return nil, false
	}
	return o.ClickRate, true
}

// HasClickRate returns a boolean if a field has been set.
func (o *ReportSummary) HasClickRate() bool {
	if o != nil && !IsNil(o.ClickRate) {
		return true
	}

	return false
}

// SetClickRate gets a reference to the given float32 and assigns it to the ClickRate field.
func (o *ReportSummary) SetClickRate(v float32) {
	o.ClickRate = &v
}

// GetVisits returns the Visits field value if set, zero value otherwise.
func (o *ReportSummary) GetVisits() int32 {
	if o == nil || IsNil(o.Visits) {
		var ret int32
		return ret
	}
	return *o.Visits
}

// GetVisitsOk returns a tuple with the Visits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetVisitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Visits) {
		return nil, false
	}
	return o.Visits, true
}

// HasVisits returns a boolean if a field has been set.
func (o *ReportSummary) HasVisits() bool {
	if o != nil && !IsNil(o.Visits) {
		return true
	}

	return false
}

// SetVisits gets a reference to the given int32 and assigns it to the Visits field.
func (o *ReportSummary) SetVisits(v int32) {
	o.Visits = &v
}

// GetUniqueVisits returns the UniqueVisits field value if set, zero value otherwise.
func (o *ReportSummary) GetUniqueVisits() int32 {
	if o == nil || IsNil(o.UniqueVisits) {
		var ret int32
		return ret
	}
	return *o.UniqueVisits
}

// GetUniqueVisitsOk returns a tuple with the UniqueVisits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetUniqueVisitsOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueVisits) {
		return nil, false
	}
	return o.UniqueVisits, true
}

// HasUniqueVisits returns a boolean if a field has been set.
func (o *ReportSummary) HasUniqueVisits() bool {
	if o != nil && !IsNil(o.UniqueVisits) {
		return true
	}

	return false
}

// SetUniqueVisits gets a reference to the given int32 and assigns it to the UniqueVisits field.
func (o *ReportSummary) SetUniqueVisits(v int32) {
	o.UniqueVisits = &v
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *ReportSummary) GetConversionRate() float32 {
	if o == nil || IsNil(o.ConversionRate) {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetConversionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ConversionRate) {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *ReportSummary) HasConversionRate() bool {
	if o != nil && !IsNil(o.ConversionRate) {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *ReportSummary) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetSubscribes returns the Subscribes field value if set, zero value otherwise.
func (o *ReportSummary) GetSubscribes() int32 {
	if o == nil || IsNil(o.Subscribes) {
		var ret int32
		return ret
	}
	return *o.Subscribes
}

// GetSubscribesOk returns a tuple with the Subscribes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetSubscribesOk() (*int32, bool) {
	if o == nil || IsNil(o.Subscribes) {
		return nil, false
	}
	return o.Subscribes, true
}

// HasSubscribes returns a boolean if a field has been set.
func (o *ReportSummary) HasSubscribes() bool {
	if o != nil && !IsNil(o.Subscribes) {
		return true
	}

	return false
}

// SetSubscribes gets a reference to the given int32 and assigns it to the Subscribes field.
func (o *ReportSummary) SetSubscribes(v int32) {
	o.Subscribes = &v
}

// GetEcommerce returns the Ecommerce field value if set, zero value otherwise.
func (o *ReportSummary) GetEcommerce() ReportSummaryEcommerce {
	if o == nil || IsNil(o.Ecommerce) {
		var ret ReportSummaryEcommerce
		return ret
	}
	return *o.Ecommerce
}

// GetEcommerceOk returns a tuple with the Ecommerce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetEcommerceOk() (*ReportSummaryEcommerce, bool) {
	if o == nil || IsNil(o.Ecommerce) {
		return nil, false
	}
	return o.Ecommerce, true
}

// HasEcommerce returns a boolean if a field has been set.
func (o *ReportSummary) HasEcommerce() bool {
	if o != nil && !IsNil(o.Ecommerce) {
		return true
	}

	return false
}

// SetEcommerce gets a reference to the given ReportSummaryEcommerce and assigns it to the Ecommerce field.
func (o *ReportSummary) SetEcommerce(v ReportSummaryEcommerce) {
	o.Ecommerce = &v
}

// GetImpressions returns the Impressions field value if set, zero value otherwise.
func (o *ReportSummary) GetImpressions() float32 {
	if o == nil || IsNil(o.Impressions) {
		var ret float32
		return ret
	}
	return *o.Impressions
}

// GetImpressionsOk returns a tuple with the Impressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetImpressionsOk() (*float32, bool) {
	if o == nil || IsNil(o.Impressions) {
		return nil, false
	}
	return o.Impressions, true
}

// HasImpressions returns a boolean if a field has been set.
func (o *ReportSummary) HasImpressions() bool {
	if o != nil && !IsNil(o.Impressions) {
		return true
	}

	return false
}

// SetImpressions gets a reference to the given float32 and assigns it to the Impressions field.
func (o *ReportSummary) SetImpressions(v float32) {
	o.Impressions = &v
}

// GetReach returns the Reach field value if set, zero value otherwise.
func (o *ReportSummary) GetReach() int32 {
	if o == nil || IsNil(o.Reach) {
		var ret int32
		return ret
	}
	return *o.Reach
}

// GetReachOk returns a tuple with the Reach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetReachOk() (*int32, bool) {
	if o == nil || IsNil(o.Reach) {
		return nil, false
	}
	return o.Reach, true
}

// HasReach returns a boolean if a field has been set.
func (o *ReportSummary) HasReach() bool {
	if o != nil && !IsNil(o.Reach) {
		return true
	}

	return false
}

// SetReach gets a reference to the given int32 and assigns it to the Reach field.
func (o *ReportSummary) SetReach(v int32) {
	o.Reach = &v
}

// GetEngagements returns the Engagements field value if set, zero value otherwise.
func (o *ReportSummary) GetEngagements() int32 {
	if o == nil || IsNil(o.Engagements) {
		var ret int32
		return ret
	}
	return *o.Engagements
}

// GetEngagementsOk returns a tuple with the Engagements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetEngagementsOk() (*int32, bool) {
	if o == nil || IsNil(o.Engagements) {
		return nil, false
	}
	return o.Engagements, true
}

// HasEngagements returns a boolean if a field has been set.
func (o *ReportSummary) HasEngagements() bool {
	if o != nil && !IsNil(o.Engagements) {
		return true
	}

	return false
}

// SetEngagements gets a reference to the given int32 and assigns it to the Engagements field.
func (o *ReportSummary) SetEngagements(v int32) {
	o.Engagements = &v
}

// GetTotalSent returns the TotalSent field value if set, zero value otherwise.
func (o *ReportSummary) GetTotalSent() int32 {
	if o == nil || IsNil(o.TotalSent) {
		var ret int32
		return ret
	}
	return *o.TotalSent
}

// GetTotalSentOk returns a tuple with the TotalSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportSummary) GetTotalSentOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalSent) {
		return nil, false
	}
	return o.TotalSent, true
}

// HasTotalSent returns a boolean if a field has been set.
func (o *ReportSummary) HasTotalSent() bool {
	if o != nil && !IsNil(o.TotalSent) {
		return true
	}

	return false
}

// SetTotalSent gets a reference to the given int32 and assigns it to the TotalSent field.
func (o *ReportSummary) SetTotalSent(v int32) {
	o.TotalSent = &v
}

func (o ReportSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Opens) {
		toSerialize["opens"] = o.Opens
	}
	if !IsNil(o.UniqueOpens) {
		toSerialize["unique_opens"] = o.UniqueOpens
	}
	if !IsNil(o.OpenRate) {
		toSerialize["open_rate"] = o.OpenRate
	}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}
	if !IsNil(o.SubscriberClicks) {
		toSerialize["subscriber_clicks"] = o.SubscriberClicks
	}
	if !IsNil(o.ClickRate) {
		toSerialize["click_rate"] = o.ClickRate
	}
	if !IsNil(o.Visits) {
		toSerialize["visits"] = o.Visits
	}
	if !IsNil(o.UniqueVisits) {
		toSerialize["unique_visits"] = o.UniqueVisits
	}
	if !IsNil(o.ConversionRate) {
		toSerialize["conversion_rate"] = o.ConversionRate
	}
	if !IsNil(o.Subscribes) {
		toSerialize["subscribes"] = o.Subscribes
	}
	if !IsNil(o.Ecommerce) {
		toSerialize["ecommerce"] = o.Ecommerce
	}
	if !IsNil(o.Impressions) {
		toSerialize["impressions"] = o.Impressions
	}
	if !IsNil(o.Reach) {
		toSerialize["reach"] = o.Reach
	}
	if !IsNil(o.Engagements) {
		toSerialize["engagements"] = o.Engagements
	}
	if !IsNil(o.TotalSent) {
		toSerialize["total_sent"] = o.TotalSent
	}
	return toSerialize, nil
}

type NullableReportSummary struct {
	value *ReportSummary
	isSet bool
}

func (v NullableReportSummary) Get() *ReportSummary {
	return v.value
}

func (v *NullableReportSummary) Set(val *ReportSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableReportSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableReportSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportSummary(val *ReportSummary) *NullableReportSummary {
	return &NullableReportSummary{value: val, isSet: true}
}

func (v NullableReportSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


