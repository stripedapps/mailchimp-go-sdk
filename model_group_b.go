/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupB{}

// GroupB Stats for Group B.
type GroupB struct {
	// The total number of clicks for Group B.
	TotalClicksB *int32 `json:"total_clicks_b,omitempty"`
	// The percentage of total clicks for Group B.
	ClickPercentageB *float32 `json:"click_percentage_b,omitempty"`
	// The number of unique clicks for Group B.
	UniqueClicksB *int32 `json:"unique_clicks_b,omitempty"`
	// The percentage of unique clicks for Group B.
	UniqueClickPercentageB *float32 `json:"unique_click_percentage_b,omitempty"`
}

// NewGroupB instantiates a new GroupB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupB() *GroupB {
	this := GroupB{}
	return &this
}

// NewGroupBWithDefaults instantiates a new GroupB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupBWithDefaults() *GroupB {
	this := GroupB{}
	return &this
}

// GetTotalClicksB returns the TotalClicksB field value if set, zero value otherwise.
func (o *GroupB) GetTotalClicksB() int32 {
	if o == nil || IsNil(o.TotalClicksB) {
		var ret int32
		return ret
	}
	return *o.TotalClicksB
}

// GetTotalClicksBOk returns a tuple with the TotalClicksB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupB) GetTotalClicksBOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalClicksB) {
		return nil, false
	}
	return o.TotalClicksB, true
}

// HasTotalClicksB returns a boolean if a field has been set.
func (o *GroupB) HasTotalClicksB() bool {
	if o != nil && !IsNil(o.TotalClicksB) {
		return true
	}

	return false
}

// SetTotalClicksB gets a reference to the given int32 and assigns it to the TotalClicksB field.
func (o *GroupB) SetTotalClicksB(v int32) {
	o.TotalClicksB = &v
}

// GetClickPercentageB returns the ClickPercentageB field value if set, zero value otherwise.
func (o *GroupB) GetClickPercentageB() float32 {
	if o == nil || IsNil(o.ClickPercentageB) {
		var ret float32
		return ret
	}
	return *o.ClickPercentageB
}

// GetClickPercentageBOk returns a tuple with the ClickPercentageB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupB) GetClickPercentageBOk() (*float32, bool) {
	if o == nil || IsNil(o.ClickPercentageB) {
		return nil, false
	}
	return o.ClickPercentageB, true
}

// HasClickPercentageB returns a boolean if a field has been set.
func (o *GroupB) HasClickPercentageB() bool {
	if o != nil && !IsNil(o.ClickPercentageB) {
		return true
	}

	return false
}

// SetClickPercentageB gets a reference to the given float32 and assigns it to the ClickPercentageB field.
func (o *GroupB) SetClickPercentageB(v float32) {
	o.ClickPercentageB = &v
}

// GetUniqueClicksB returns the UniqueClicksB field value if set, zero value otherwise.
func (o *GroupB) GetUniqueClicksB() int32 {
	if o == nil || IsNil(o.UniqueClicksB) {
		var ret int32
		return ret
	}
	return *o.UniqueClicksB
}

// GetUniqueClicksBOk returns a tuple with the UniqueClicksB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupB) GetUniqueClicksBOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueClicksB) {
		return nil, false
	}
	return o.UniqueClicksB, true
}

// HasUniqueClicksB returns a boolean if a field has been set.
func (o *GroupB) HasUniqueClicksB() bool {
	if o != nil && !IsNil(o.UniqueClicksB) {
		return true
	}

	return false
}

// SetUniqueClicksB gets a reference to the given int32 and assigns it to the UniqueClicksB field.
func (o *GroupB) SetUniqueClicksB(v int32) {
	o.UniqueClicksB = &v
}

// GetUniqueClickPercentageB returns the UniqueClickPercentageB field value if set, zero value otherwise.
func (o *GroupB) GetUniqueClickPercentageB() float32 {
	if o == nil || IsNil(o.UniqueClickPercentageB) {
		var ret float32
		return ret
	}
	return *o.UniqueClickPercentageB
}

// GetUniqueClickPercentageBOk returns a tuple with the UniqueClickPercentageB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupB) GetUniqueClickPercentageBOk() (*float32, bool) {
	if o == nil || IsNil(o.UniqueClickPercentageB) {
		return nil, false
	}
	return o.UniqueClickPercentageB, true
}

// HasUniqueClickPercentageB returns a boolean if a field has been set.
func (o *GroupB) HasUniqueClickPercentageB() bool {
	if o != nil && !IsNil(o.UniqueClickPercentageB) {
		return true
	}

	return false
}

// SetUniqueClickPercentageB gets a reference to the given float32 and assigns it to the UniqueClickPercentageB field.
func (o *GroupB) SetUniqueClickPercentageB(v float32) {
	o.UniqueClickPercentageB = &v
}

func (o GroupB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalClicksB) {
		toSerialize["total_clicks_b"] = o.TotalClicksB
	}
	if !IsNil(o.ClickPercentageB) {
		toSerialize["click_percentage_b"] = o.ClickPercentageB
	}
	if !IsNil(o.UniqueClicksB) {
		toSerialize["unique_clicks_b"] = o.UniqueClicksB
	}
	if !IsNil(o.UniqueClickPercentageB) {
		toSerialize["unique_click_percentage_b"] = o.UniqueClickPercentageB
	}
	return toSerialize, nil
}

type NullableGroupB struct {
	value *GroupB
	isSet bool
}

func (v NullableGroupB) Get() *GroupB {
	return v.value
}

func (v *NullableGroupB) Set(val *GroupB) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupB) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupB(val *GroupB) *NullableGroupB {
	return &NullableGroupB{value: val, isSet: true}
}

func (v NullableGroupB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


