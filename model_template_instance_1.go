/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TemplateInstance1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateInstance1{}

// TemplateInstance1 Information about a specific template.
type TemplateInstance1 struct {
	// The name of the template.
	Name string `json:"name"`
	// The id of the folder the template is currently in.
	FolderId *string `json:"folder_id,omitempty"`
	// The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API.
	Html string `json:"html"`
}

// NewTemplateInstance1 instantiates a new TemplateInstance1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateInstance1(name string, html string) *TemplateInstance1 {
	this := TemplateInstance1{}
	this.Name = name
	this.Html = html
	return &this
}

// NewTemplateInstance1WithDefaults instantiates a new TemplateInstance1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateInstance1WithDefaults() *TemplateInstance1 {
	this := TemplateInstance1{}
	return &this
}

// GetName returns the Name field value
func (o *TemplateInstance1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TemplateInstance1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TemplateInstance1) SetName(v string) {
	o.Name = v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *TemplateInstance1) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateInstance1) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *TemplateInstance1) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *TemplateInstance1) SetFolderId(v string) {
	o.FolderId = &v
}

// GetHtml returns the Html field value
func (o *TemplateInstance1) GetHtml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Html
}

// GetHtmlOk returns a tuple with the Html field value
// and a boolean to check if the value has been set.
func (o *TemplateInstance1) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Html, true
}

// SetHtml sets field value
func (o *TemplateInstance1) SetHtml(v string) {
	o.Html = v
}

func (o TemplateInstance1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateInstance1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.FolderId) {
		toSerialize["folder_id"] = o.FolderId
	}
	toSerialize["html"] = o.Html
	return toSerialize, nil
}

type NullableTemplateInstance1 struct {
	value *TemplateInstance1
	isSet bool
}

func (v NullableTemplateInstance1) Get() *TemplateInstance1 {
	return v.value
}

func (v *NullableTemplateInstance1) Set(val *TemplateInstance1) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateInstance1) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateInstance1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateInstance1(val *TemplateInstance1) *NullableTemplateInstance1 {
	return &NullableTemplateInstance1{value: val, isSet: true}
}

func (v NullableTemplateInstance1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateInstance1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


