/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Notes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notes{}

// Notes The most recent Note added about this member.
type Notes struct {
	// The note id.
	NoteId *int32 `json:"note_id,omitempty"`
	// The date and time the note was created in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The author of the note.
	CreatedBy *string `json:"created_by,omitempty"`
	// The content of the note.
	Note *string `json:"note,omitempty"`
}

// NewNotes instantiates a new Notes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotes() *Notes {
	this := Notes{}
	return &this
}

// NewNotesWithDefaults instantiates a new Notes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotesWithDefaults() *Notes {
	this := Notes{}
	return &this
}

// GetNoteId returns the NoteId field value if set, zero value otherwise.
func (o *Notes) GetNoteId() int32 {
	if o == nil || IsNil(o.NoteId) {
		var ret int32
		return ret
	}
	return *o.NoteId
}

// GetNoteIdOk returns a tuple with the NoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notes) GetNoteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NoteId) {
		return nil, false
	}
	return o.NoteId, true
}

// HasNoteId returns a boolean if a field has been set.
func (o *Notes) HasNoteId() bool {
	if o != nil && !IsNil(o.NoteId) {
		return true
	}

	return false
}

// SetNoteId gets a reference to the given int32 and assigns it to the NoteId field.
func (o *Notes) SetNoteId(v int32) {
	o.NoteId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Notes) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Notes) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Notes) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Notes) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notes) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Notes) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Notes) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Notes) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notes) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Notes) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *Notes) SetNote(v string) {
	o.Note = &v
}

func (o Notes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NoteId) {
		toSerialize["note_id"] = o.NoteId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableNotes struct {
	value *Notes
	isSet bool
}

func (v NullableNotes) Get() *Notes {
	return v.value
}

func (v *NullableNotes) Set(val *Notes) {
	v.value = val
	v.isSet = true
}

func (v NullableNotes) IsSet() bool {
	return v.isSet
}

func (v *NullableNotes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotes(val *Notes) *NullableNotes {
	return &NullableNotes{value: val, isSet: true}
}

func (v NullableNotes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


