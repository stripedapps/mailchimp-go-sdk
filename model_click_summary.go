/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ClickSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClickSummary{}

// ClickSummary A summary of the click-throughs on the campaign's URL.
type ClickSummary struct {
	// The total number of clicks to the campaign's URL.
	Clicks *int32 `json:"clicks,omitempty"`
	// The timestamp for the first click to the URL.
	FirstClick *time.Time `json:"first_click,omitempty"`
	// The timestamp for the last click to the URL.
	LastClick *time.Time `json:"last_click,omitempty"`
	// A summary of the top click locations.
	Locations []Location3 `json:"locations,omitempty"`
}

// NewClickSummary instantiates a new ClickSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClickSummary() *ClickSummary {
	this := ClickSummary{}
	return &this
}

// NewClickSummaryWithDefaults instantiates a new ClickSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClickSummaryWithDefaults() *ClickSummary {
	this := ClickSummary{}
	return &this
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *ClickSummary) GetClicks() int32 {
	if o == nil || IsNil(o.Clicks) {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickSummary) GetClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *ClickSummary) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *ClickSummary) SetClicks(v int32) {
	o.Clicks = &v
}

// GetFirstClick returns the FirstClick field value if set, zero value otherwise.
func (o *ClickSummary) GetFirstClick() time.Time {
	if o == nil || IsNil(o.FirstClick) {
		var ret time.Time
		return ret
	}
	return *o.FirstClick
}

// GetFirstClickOk returns a tuple with the FirstClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickSummary) GetFirstClickOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FirstClick) {
		return nil, false
	}
	return o.FirstClick, true
}

// HasFirstClick returns a boolean if a field has been set.
func (o *ClickSummary) HasFirstClick() bool {
	if o != nil && !IsNil(o.FirstClick) {
		return true
	}

	return false
}

// SetFirstClick gets a reference to the given time.Time and assigns it to the FirstClick field.
func (o *ClickSummary) SetFirstClick(v time.Time) {
	o.FirstClick = &v
}

// GetLastClick returns the LastClick field value if set, zero value otherwise.
func (o *ClickSummary) GetLastClick() time.Time {
	if o == nil || IsNil(o.LastClick) {
		var ret time.Time
		return ret
	}
	return *o.LastClick
}

// GetLastClickOk returns a tuple with the LastClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickSummary) GetLastClickOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastClick) {
		return nil, false
	}
	return o.LastClick, true
}

// HasLastClick returns a boolean if a field has been set.
func (o *ClickSummary) HasLastClick() bool {
	if o != nil && !IsNil(o.LastClick) {
		return true
	}

	return false
}

// SetLastClick gets a reference to the given time.Time and assigns it to the LastClick field.
func (o *ClickSummary) SetLastClick(v time.Time) {
	o.LastClick = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *ClickSummary) GetLocations() []Location3 {
	if o == nil || IsNil(o.Locations) {
		var ret []Location3
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickSummary) GetLocationsOk() ([]Location3, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *ClickSummary) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []Location3 and assigns it to the Locations field.
func (o *ClickSummary) SetLocations(v []Location3) {
	o.Locations = v
}

func (o ClickSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClickSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}
	if !IsNil(o.FirstClick) {
		toSerialize["first_click"] = o.FirstClick
	}
	if !IsNil(o.LastClick) {
		toSerialize["last_click"] = o.LastClick
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	return toSerialize, nil
}

type NullableClickSummary struct {
	value *ClickSummary
	isSet bool
}

func (v NullableClickSummary) Get() *ClickSummary {
	return v.value
}

func (v *NullableClickSummary) Set(val *ClickSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableClickSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableClickSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickSummary(val *ClickSummary) *NullableClickSummary {
	return &NullableClickSummary{value: val, isSet: true}
}

func (v NullableClickSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


