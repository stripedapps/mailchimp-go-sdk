/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SurveyQuestionReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveyQuestionReport{}

// SurveyQuestionReport The details of a survey question's report.
type SurveyQuestionReport struct {
	// The ID of the survey question.
	Id *string `json:"id,omitempty"`
	// The unique ID of the survey.
	SurveyId *string `json:"survey_id,omitempty"`
	// The query of the survey question.
	Query *string `json:"query,omitempty"`
	// The response type of the survey question.
	Type *string `json:"type,omitempty"`
	// The total number of responses to this question.
	TotalResponses *int32 `json:"total_responses,omitempty"`
	// Whether this survey question is required to answer.
	IsRequired *bool `json:"is_required,omitempty"`
	// Whether this survey question has an 'other' option.
	HasOther *bool `json:"has_other,omitempty"`
	// Label used for the 'other' option of this survey question.
	OtherLabel *string `json:"other_label,omitempty"`
	// The average rating for this range question.
	AverageRating *float32 `json:"average_rating,omitempty"`
	// Label for the low end of the range.
	RangeLowLabel *string `json:"range_low_label,omitempty"`
	// Label for the high end of the range.
	RangeHighLabel *string `json:"range_high_label,omitempty"`
	// Placeholder text for this survey question's answer box.
	PlaceholderLabel *string `json:"placeholder_label,omitempty"`
	// Whether the subscribe checkbox is shown for this email question.
	SubscribeCheckboxEnabled *bool `json:"subscribe_checkbox_enabled,omitempty"`
	// Label used for the subscribe checkbox for this email question.
	SubscribeCheckboxLabel *string `json:"subscribe_checkbox_label,omitempty"`
	MergeField *MergeField3 `json:"merge_field,omitempty"`
	// The answer choices for this question.
	Options []OptionsInner `json:"options,omitempty"`
	ContactCounts *ContactCounts `json:"contact_counts,omitempty"`
}

// NewSurveyQuestionReport instantiates a new SurveyQuestionReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveyQuestionReport() *SurveyQuestionReport {
	this := SurveyQuestionReport{}
	return &this
}

// NewSurveyQuestionReportWithDefaults instantiates a new SurveyQuestionReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveyQuestionReportWithDefaults() *SurveyQuestionReport {
	this := SurveyQuestionReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SurveyQuestionReport) SetId(v string) {
	o.Id = &v
}

// GetSurveyId returns the SurveyId field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetSurveyId() string {
	if o == nil || IsNil(o.SurveyId) {
		var ret string
		return ret
	}
	return *o.SurveyId
}

// GetSurveyIdOk returns a tuple with the SurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetSurveyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SurveyId) {
		return nil, false
	}
	return o.SurveyId, true
}

// HasSurveyId returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasSurveyId() bool {
	if o != nil && !IsNil(o.SurveyId) {
		return true
	}

	return false
}

// SetSurveyId gets a reference to the given string and assigns it to the SurveyId field.
func (o *SurveyQuestionReport) SetSurveyId(v string) {
	o.SurveyId = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SurveyQuestionReport) SetQuery(v string) {
	o.Query = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SurveyQuestionReport) SetType(v string) {
	o.Type = &v
}

// GetTotalResponses returns the TotalResponses field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetTotalResponses() int32 {
	if o == nil || IsNil(o.TotalResponses) {
		var ret int32
		return ret
	}
	return *o.TotalResponses
}

// GetTotalResponsesOk returns a tuple with the TotalResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetTotalResponsesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResponses) {
		return nil, false
	}
	return o.TotalResponses, true
}

// HasTotalResponses returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasTotalResponses() bool {
	if o != nil && !IsNil(o.TotalResponses) {
		return true
	}

	return false
}

// SetTotalResponses gets a reference to the given int32 and assigns it to the TotalResponses field.
func (o *SurveyQuestionReport) SetTotalResponses(v int32) {
	o.TotalResponses = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetIsRequired() bool {
	if o == nil || IsNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequired) {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasIsRequired() bool {
	if o != nil && !IsNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *SurveyQuestionReport) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetHasOther returns the HasOther field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetHasOther() bool {
	if o == nil || IsNil(o.HasOther) {
		var ret bool
		return ret
	}
	return *o.HasOther
}

// GetHasOtherOk returns a tuple with the HasOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetHasOtherOk() (*bool, bool) {
	if o == nil || IsNil(o.HasOther) {
		return nil, false
	}
	return o.HasOther, true
}

// HasHasOther returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasHasOther() bool {
	if o != nil && !IsNil(o.HasOther) {
		return true
	}

	return false
}

// SetHasOther gets a reference to the given bool and assigns it to the HasOther field.
func (o *SurveyQuestionReport) SetHasOther(v bool) {
	o.HasOther = &v
}

// GetOtherLabel returns the OtherLabel field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetOtherLabel() string {
	if o == nil || IsNil(o.OtherLabel) {
		var ret string
		return ret
	}
	return *o.OtherLabel
}

// GetOtherLabelOk returns a tuple with the OtherLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetOtherLabelOk() (*string, bool) {
	if o == nil || IsNil(o.OtherLabel) {
		return nil, false
	}
	return o.OtherLabel, true
}

// HasOtherLabel returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasOtherLabel() bool {
	if o != nil && !IsNil(o.OtherLabel) {
		return true
	}

	return false
}

// SetOtherLabel gets a reference to the given string and assigns it to the OtherLabel field.
func (o *SurveyQuestionReport) SetOtherLabel(v string) {
	o.OtherLabel = &v
}

// GetAverageRating returns the AverageRating field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetAverageRating() float32 {
	if o == nil || IsNil(o.AverageRating) {
		var ret float32
		return ret
	}
	return *o.AverageRating
}

// GetAverageRatingOk returns a tuple with the AverageRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetAverageRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageRating) {
		return nil, false
	}
	return o.AverageRating, true
}

// HasAverageRating returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasAverageRating() bool {
	if o != nil && !IsNil(o.AverageRating) {
		return true
	}

	return false
}

// SetAverageRating gets a reference to the given float32 and assigns it to the AverageRating field.
func (o *SurveyQuestionReport) SetAverageRating(v float32) {
	o.AverageRating = &v
}

// GetRangeLowLabel returns the RangeLowLabel field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetRangeLowLabel() string {
	if o == nil || IsNil(o.RangeLowLabel) {
		var ret string
		return ret
	}
	return *o.RangeLowLabel
}

// GetRangeLowLabelOk returns a tuple with the RangeLowLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetRangeLowLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RangeLowLabel) {
		return nil, false
	}
	return o.RangeLowLabel, true
}

// HasRangeLowLabel returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasRangeLowLabel() bool {
	if o != nil && !IsNil(o.RangeLowLabel) {
		return true
	}

	return false
}

// SetRangeLowLabel gets a reference to the given string and assigns it to the RangeLowLabel field.
func (o *SurveyQuestionReport) SetRangeLowLabel(v string) {
	o.RangeLowLabel = &v
}

// GetRangeHighLabel returns the RangeHighLabel field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetRangeHighLabel() string {
	if o == nil || IsNil(o.RangeHighLabel) {
		var ret string
		return ret
	}
	return *o.RangeHighLabel
}

// GetRangeHighLabelOk returns a tuple with the RangeHighLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetRangeHighLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RangeHighLabel) {
		return nil, false
	}
	return o.RangeHighLabel, true
}

// HasRangeHighLabel returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasRangeHighLabel() bool {
	if o != nil && !IsNil(o.RangeHighLabel) {
		return true
	}

	return false
}

// SetRangeHighLabel gets a reference to the given string and assigns it to the RangeHighLabel field.
func (o *SurveyQuestionReport) SetRangeHighLabel(v string) {
	o.RangeHighLabel = &v
}

// GetPlaceholderLabel returns the PlaceholderLabel field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetPlaceholderLabel() string {
	if o == nil || IsNil(o.PlaceholderLabel) {
		var ret string
		return ret
	}
	return *o.PlaceholderLabel
}

// GetPlaceholderLabelOk returns a tuple with the PlaceholderLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetPlaceholderLabelOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceholderLabel) {
		return nil, false
	}
	return o.PlaceholderLabel, true
}

// HasPlaceholderLabel returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasPlaceholderLabel() bool {
	if o != nil && !IsNil(o.PlaceholderLabel) {
		return true
	}

	return false
}

// SetPlaceholderLabel gets a reference to the given string and assigns it to the PlaceholderLabel field.
func (o *SurveyQuestionReport) SetPlaceholderLabel(v string) {
	o.PlaceholderLabel = &v
}

// GetSubscribeCheckboxEnabled returns the SubscribeCheckboxEnabled field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetSubscribeCheckboxEnabled() bool {
	if o == nil || IsNil(o.SubscribeCheckboxEnabled) {
		var ret bool
		return ret
	}
	return *o.SubscribeCheckboxEnabled
}

// GetSubscribeCheckboxEnabledOk returns a tuple with the SubscribeCheckboxEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetSubscribeCheckboxEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SubscribeCheckboxEnabled) {
		return nil, false
	}
	return o.SubscribeCheckboxEnabled, true
}

// HasSubscribeCheckboxEnabled returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasSubscribeCheckboxEnabled() bool {
	if o != nil && !IsNil(o.SubscribeCheckboxEnabled) {
		return true
	}

	return false
}

// SetSubscribeCheckboxEnabled gets a reference to the given bool and assigns it to the SubscribeCheckboxEnabled field.
func (o *SurveyQuestionReport) SetSubscribeCheckboxEnabled(v bool) {
	o.SubscribeCheckboxEnabled = &v
}

// GetSubscribeCheckboxLabel returns the SubscribeCheckboxLabel field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetSubscribeCheckboxLabel() string {
	if o == nil || IsNil(o.SubscribeCheckboxLabel) {
		var ret string
		return ret
	}
	return *o.SubscribeCheckboxLabel
}

// GetSubscribeCheckboxLabelOk returns a tuple with the SubscribeCheckboxLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetSubscribeCheckboxLabelOk() (*string, bool) {
	if o == nil || IsNil(o.SubscribeCheckboxLabel) {
		return nil, false
	}
	return o.SubscribeCheckboxLabel, true
}

// HasSubscribeCheckboxLabel returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasSubscribeCheckboxLabel() bool {
	if o != nil && !IsNil(o.SubscribeCheckboxLabel) {
		return true
	}

	return false
}

// SetSubscribeCheckboxLabel gets a reference to the given string and assigns it to the SubscribeCheckboxLabel field.
func (o *SurveyQuestionReport) SetSubscribeCheckboxLabel(v string) {
	o.SubscribeCheckboxLabel = &v
}

// GetMergeField returns the MergeField field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetMergeField() MergeField3 {
	if o == nil || IsNil(o.MergeField) {
		var ret MergeField3
		return ret
	}
	return *o.MergeField
}

// GetMergeFieldOk returns a tuple with the MergeField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetMergeFieldOk() (*MergeField3, bool) {
	if o == nil || IsNil(o.MergeField) {
		return nil, false
	}
	return o.MergeField, true
}

// HasMergeField returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasMergeField() bool {
	if o != nil && !IsNil(o.MergeField) {
		return true
	}

	return false
}

// SetMergeField gets a reference to the given MergeField3 and assigns it to the MergeField field.
func (o *SurveyQuestionReport) SetMergeField(v MergeField3) {
	o.MergeField = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetOptions() []OptionsInner {
	if o == nil || IsNil(o.Options) {
		var ret []OptionsInner
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetOptionsOk() ([]OptionsInner, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []OptionsInner and assigns it to the Options field.
func (o *SurveyQuestionReport) SetOptions(v []OptionsInner) {
	o.Options = v
}

// GetContactCounts returns the ContactCounts field value if set, zero value otherwise.
func (o *SurveyQuestionReport) GetContactCounts() ContactCounts {
	if o == nil || IsNil(o.ContactCounts) {
		var ret ContactCounts
		return ret
	}
	return *o.ContactCounts
}

// GetContactCountsOk returns a tuple with the ContactCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReport) GetContactCountsOk() (*ContactCounts, bool) {
	if o == nil || IsNil(o.ContactCounts) {
		return nil, false
	}
	return o.ContactCounts, true
}

// HasContactCounts returns a boolean if a field has been set.
func (o *SurveyQuestionReport) HasContactCounts() bool {
	if o != nil && !IsNil(o.ContactCounts) {
		return true
	}

	return false
}

// SetContactCounts gets a reference to the given ContactCounts and assigns it to the ContactCounts field.
func (o *SurveyQuestionReport) SetContactCounts(v ContactCounts) {
	o.ContactCounts = &v
}

func (o SurveyQuestionReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveyQuestionReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SurveyId) {
		toSerialize["survey_id"] = o.SurveyId
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TotalResponses) {
		toSerialize["total_responses"] = o.TotalResponses
	}
	if !IsNil(o.IsRequired) {
		toSerialize["is_required"] = o.IsRequired
	}
	if !IsNil(o.HasOther) {
		toSerialize["has_other"] = o.HasOther
	}
	if !IsNil(o.OtherLabel) {
		toSerialize["other_label"] = o.OtherLabel
	}
	if !IsNil(o.AverageRating) {
		toSerialize["average_rating"] = o.AverageRating
	}
	if !IsNil(o.RangeLowLabel) {
		toSerialize["range_low_label"] = o.RangeLowLabel
	}
	if !IsNil(o.RangeHighLabel) {
		toSerialize["range_high_label"] = o.RangeHighLabel
	}
	if !IsNil(o.PlaceholderLabel) {
		toSerialize["placeholder_label"] = o.PlaceholderLabel
	}
	if !IsNil(o.SubscribeCheckboxEnabled) {
		toSerialize["subscribe_checkbox_enabled"] = o.SubscribeCheckboxEnabled
	}
	if !IsNil(o.SubscribeCheckboxLabel) {
		toSerialize["subscribe_checkbox_label"] = o.SubscribeCheckboxLabel
	}
	if !IsNil(o.MergeField) {
		toSerialize["merge_field"] = o.MergeField
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ContactCounts) {
		toSerialize["contact_counts"] = o.ContactCounts
	}
	return toSerialize, nil
}

type NullableSurveyQuestionReport struct {
	value *SurveyQuestionReport
	isSet bool
}

func (v NullableSurveyQuestionReport) Get() *SurveyQuestionReport {
	return v.value
}

func (v *NullableSurveyQuestionReport) Set(val *SurveyQuestionReport) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveyQuestionReport) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveyQuestionReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveyQuestionReport(val *SurveyQuestionReport) *NullableSurveyQuestionReport {
	return &NullableSurveyQuestionReport{value: val, isSet: true}
}

func (v NullableSurveyQuestionReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveyQuestionReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


