/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountContact{}

// AccountContact Information about the account contact.
type AccountContact struct {
	// The company name for the account.
	Company *string `json:"company,omitempty"`
	// The street address for the account contact.
	Addr1 *string `json:"addr1,omitempty"`
	// The street address for the account contact.
	Addr2 *string `json:"addr2,omitempty"`
	// The city for the account contact.
	City *string `json:"city,omitempty"`
	// The state for the account contact.
	State *string `json:"state,omitempty"`
	// The zip code for the account contact.
	Zip *string `json:"zip,omitempty"`
	// The country for the account contact.
	Country *string `json:"country,omitempty"`
}

// NewAccountContact instantiates a new AccountContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountContact() *AccountContact {
	this := AccountContact{}
	return &this
}

// NewAccountContactWithDefaults instantiates a new AccountContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountContactWithDefaults() *AccountContact {
	this := AccountContact{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *AccountContact) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *AccountContact) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *AccountContact) SetCompany(v string) {
	o.Company = &v
}

// GetAddr1 returns the Addr1 field value if set, zero value otherwise.
func (o *AccountContact) GetAddr1() string {
	if o == nil || IsNil(o.Addr1) {
		var ret string
		return ret
	}
	return *o.Addr1
}

// GetAddr1Ok returns a tuple with the Addr1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetAddr1Ok() (*string, bool) {
	if o == nil || IsNil(o.Addr1) {
		return nil, false
	}
	return o.Addr1, true
}

// HasAddr1 returns a boolean if a field has been set.
func (o *AccountContact) HasAddr1() bool {
	if o != nil && !IsNil(o.Addr1) {
		return true
	}

	return false
}

// SetAddr1 gets a reference to the given string and assigns it to the Addr1 field.
func (o *AccountContact) SetAddr1(v string) {
	o.Addr1 = &v
}

// GetAddr2 returns the Addr2 field value if set, zero value otherwise.
func (o *AccountContact) GetAddr2() string {
	if o == nil || IsNil(o.Addr2) {
		var ret string
		return ret
	}
	return *o.Addr2
}

// GetAddr2Ok returns a tuple with the Addr2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetAddr2Ok() (*string, bool) {
	if o == nil || IsNil(o.Addr2) {
		return nil, false
	}
	return o.Addr2, true
}

// HasAddr2 returns a boolean if a field has been set.
func (o *AccountContact) HasAddr2() bool {
	if o != nil && !IsNil(o.Addr2) {
		return true
	}

	return false
}

// SetAddr2 gets a reference to the given string and assigns it to the Addr2 field.
func (o *AccountContact) SetAddr2(v string) {
	o.Addr2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AccountContact) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AccountContact) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AccountContact) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AccountContact) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AccountContact) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AccountContact) SetState(v string) {
	o.State = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *AccountContact) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *AccountContact) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *AccountContact) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AccountContact) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountContact) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AccountContact) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AccountContact) SetCountry(v string) {
	o.Country = &v
}

func (o AccountContact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Addr1) {
		toSerialize["addr1"] = o.Addr1
	}
	if !IsNil(o.Addr2) {
		toSerialize["addr2"] = o.Addr2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

type NullableAccountContact struct {
	value *AccountContact
	isSet bool
}

func (v NullableAccountContact) Get() *AccountContact {
	return v.value
}

func (v *NullableAccountContact) Set(val *AccountContact) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountContact) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountContact(val *AccountContact) *NullableAccountContact {
	return &NullableAccountContact{value: val, isSet: true}
}

func (v NullableAccountContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


