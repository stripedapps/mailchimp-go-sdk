/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Recipients type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Recipients{}

// Recipients High level audience information for who the outreach targets.
type Recipients struct {
	// The unique list id.
	ListId *string `json:"list_id,omitempty"`
	// The status of the list used, namely if it's deleted or disabled.
	ListIsActive *bool `json:"list_is_active,omitempty"`
	// The name of the list.
	ListName *string `json:"list_name,omitempty"`
	// A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML.
	SegmentText *string `json:"segment_text,omitempty"`
	// Count of the recipients on the associated list. Formatted as an integer.
	RecipientCount *int32 `json:"recipient_count,omitempty"`
	SegmentOpts *SegmentOptions1 `json:"segment_opts,omitempty"`
}

// NewRecipients instantiates a new Recipients object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipients() *Recipients {
	this := Recipients{}
	return &this
}

// NewRecipientsWithDefaults instantiates a new Recipients object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientsWithDefaults() *Recipients {
	this := Recipients{}
	return &this
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *Recipients) GetListId() string {
	if o == nil || IsNil(o.ListId) {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipients) GetListIdOk() (*string, bool) {
	if o == nil || IsNil(o.ListId) {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *Recipients) HasListId() bool {
	if o != nil && !IsNil(o.ListId) {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *Recipients) SetListId(v string) {
	o.ListId = &v
}

// GetListIsActive returns the ListIsActive field value if set, zero value otherwise.
func (o *Recipients) GetListIsActive() bool {
	if o == nil || IsNil(o.ListIsActive) {
		var ret bool
		return ret
	}
	return *o.ListIsActive
}

// GetListIsActiveOk returns a tuple with the ListIsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipients) GetListIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.ListIsActive) {
		return nil, false
	}
	return o.ListIsActive, true
}

// HasListIsActive returns a boolean if a field has been set.
func (o *Recipients) HasListIsActive() bool {
	if o != nil && !IsNil(o.ListIsActive) {
		return true
	}

	return false
}

// SetListIsActive gets a reference to the given bool and assigns it to the ListIsActive field.
func (o *Recipients) SetListIsActive(v bool) {
	o.ListIsActive = &v
}

// GetListName returns the ListName field value if set, zero value otherwise.
func (o *Recipients) GetListName() string {
	if o == nil || IsNil(o.ListName) {
		var ret string
		return ret
	}
	return *o.ListName
}

// GetListNameOk returns a tuple with the ListName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipients) GetListNameOk() (*string, bool) {
	if o == nil || IsNil(o.ListName) {
		return nil, false
	}
	return o.ListName, true
}

// HasListName returns a boolean if a field has been set.
func (o *Recipients) HasListName() bool {
	if o != nil && !IsNil(o.ListName) {
		return true
	}

	return false
}

// SetListName gets a reference to the given string and assigns it to the ListName field.
func (o *Recipients) SetListName(v string) {
	o.ListName = &v
}

// GetSegmentText returns the SegmentText field value if set, zero value otherwise.
func (o *Recipients) GetSegmentText() string {
	if o == nil || IsNil(o.SegmentText) {
		var ret string
		return ret
	}
	return *o.SegmentText
}

// GetSegmentTextOk returns a tuple with the SegmentText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipients) GetSegmentTextOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentText) {
		return nil, false
	}
	return o.SegmentText, true
}

// HasSegmentText returns a boolean if a field has been set.
func (o *Recipients) HasSegmentText() bool {
	if o != nil && !IsNil(o.SegmentText) {
		return true
	}

	return false
}

// SetSegmentText gets a reference to the given string and assigns it to the SegmentText field.
func (o *Recipients) SetSegmentText(v string) {
	o.SegmentText = &v
}

// GetRecipientCount returns the RecipientCount field value if set, zero value otherwise.
func (o *Recipients) GetRecipientCount() int32 {
	if o == nil || IsNil(o.RecipientCount) {
		var ret int32
		return ret
	}
	return *o.RecipientCount
}

// GetRecipientCountOk returns a tuple with the RecipientCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipients) GetRecipientCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RecipientCount) {
		return nil, false
	}
	return o.RecipientCount, true
}

// HasRecipientCount returns a boolean if a field has been set.
func (o *Recipients) HasRecipientCount() bool {
	if o != nil && !IsNil(o.RecipientCount) {
		return true
	}

	return false
}

// SetRecipientCount gets a reference to the given int32 and assigns it to the RecipientCount field.
func (o *Recipients) SetRecipientCount(v int32) {
	o.RecipientCount = &v
}

// GetSegmentOpts returns the SegmentOpts field value if set, zero value otherwise.
func (o *Recipients) GetSegmentOpts() SegmentOptions1 {
	if o == nil || IsNil(o.SegmentOpts) {
		var ret SegmentOptions1
		return ret
	}
	return *o.SegmentOpts
}

// GetSegmentOptsOk returns a tuple with the SegmentOpts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipients) GetSegmentOptsOk() (*SegmentOptions1, bool) {
	if o == nil || IsNil(o.SegmentOpts) {
		return nil, false
	}
	return o.SegmentOpts, true
}

// HasSegmentOpts returns a boolean if a field has been set.
func (o *Recipients) HasSegmentOpts() bool {
	if o != nil && !IsNil(o.SegmentOpts) {
		return true
	}

	return false
}

// SetSegmentOpts gets a reference to the given SegmentOptions1 and assigns it to the SegmentOpts field.
func (o *Recipients) SetSegmentOpts(v SegmentOptions1) {
	o.SegmentOpts = &v
}

func (o Recipients) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Recipients) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ListId) {
		toSerialize["list_id"] = o.ListId
	}
	if !IsNil(o.ListIsActive) {
		toSerialize["list_is_active"] = o.ListIsActive
	}
	if !IsNil(o.ListName) {
		toSerialize["list_name"] = o.ListName
	}
	if !IsNil(o.SegmentText) {
		toSerialize["segment_text"] = o.SegmentText
	}
	if !IsNil(o.RecipientCount) {
		toSerialize["recipient_count"] = o.RecipientCount
	}
	if !IsNil(o.SegmentOpts) {
		toSerialize["segment_opts"] = o.SegmentOpts
	}
	return toSerialize, nil
}

type NullableRecipients struct {
	value *Recipients
	isSet bool
}

func (v NullableRecipients) Get() *Recipients {
	return v.value
}

func (v *NullableRecipients) Set(val *Recipients) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipients) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipients) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipients(val *Recipients) *NullableRecipients {
	return &NullableRecipients{value: val, isSet: true}
}

func (v NullableRecipients) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipients) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


