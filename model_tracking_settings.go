/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrackingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingSettings{}

// TrackingSettings The tracking settings applied to this landing page.
type TrackingSettings struct {
	// Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).
	TrackWithMailchimp *bool `json:"track_with_mailchimp,omitempty"`
	// Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).
	EnableRestrictedDataProcessing *bool `json:"enable_restricted_data_processing,omitempty"`
}

// NewTrackingSettings instantiates a new TrackingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingSettings() *TrackingSettings {
	this := TrackingSettings{}
	return &this
}

// NewTrackingSettingsWithDefaults instantiates a new TrackingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingSettingsWithDefaults() *TrackingSettings {
	this := TrackingSettings{}
	return &this
}

// GetTrackWithMailchimp returns the TrackWithMailchimp field value if set, zero value otherwise.
func (o *TrackingSettings) GetTrackWithMailchimp() bool {
	if o == nil || IsNil(o.TrackWithMailchimp) {
		var ret bool
		return ret
	}
	return *o.TrackWithMailchimp
}

// GetTrackWithMailchimpOk returns a tuple with the TrackWithMailchimp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingSettings) GetTrackWithMailchimpOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackWithMailchimp) {
		return nil, false
	}
	return o.TrackWithMailchimp, true
}

// HasTrackWithMailchimp returns a boolean if a field has been set.
func (o *TrackingSettings) HasTrackWithMailchimp() bool {
	if o != nil && !IsNil(o.TrackWithMailchimp) {
		return true
	}

	return false
}

// SetTrackWithMailchimp gets a reference to the given bool and assigns it to the TrackWithMailchimp field.
func (o *TrackingSettings) SetTrackWithMailchimp(v bool) {
	o.TrackWithMailchimp = &v
}

// GetEnableRestrictedDataProcessing returns the EnableRestrictedDataProcessing field value if set, zero value otherwise.
func (o *TrackingSettings) GetEnableRestrictedDataProcessing() bool {
	if o == nil || IsNil(o.EnableRestrictedDataProcessing) {
		var ret bool
		return ret
	}
	return *o.EnableRestrictedDataProcessing
}

// GetEnableRestrictedDataProcessingOk returns a tuple with the EnableRestrictedDataProcessing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingSettings) GetEnableRestrictedDataProcessingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRestrictedDataProcessing) {
		return nil, false
	}
	return o.EnableRestrictedDataProcessing, true
}

// HasEnableRestrictedDataProcessing returns a boolean if a field has been set.
func (o *TrackingSettings) HasEnableRestrictedDataProcessing() bool {
	if o != nil && !IsNil(o.EnableRestrictedDataProcessing) {
		return true
	}

	return false
}

// SetEnableRestrictedDataProcessing gets a reference to the given bool and assigns it to the EnableRestrictedDataProcessing field.
func (o *TrackingSettings) SetEnableRestrictedDataProcessing(v bool) {
	o.EnableRestrictedDataProcessing = &v
}

func (o TrackingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackWithMailchimp) {
		toSerialize["track_with_mailchimp"] = o.TrackWithMailchimp
	}
	if !IsNil(o.EnableRestrictedDataProcessing) {
		toSerialize["enable_restricted_data_processing"] = o.EnableRestrictedDataProcessing
	}
	return toSerialize, nil
}

type NullableTrackingSettings struct {
	value *TrackingSettings
	isSet bool
}

func (v NullableTrackingSettings) Get() *TrackingSettings {
	return v.value
}

func (v *NullableTrackingSettings) Set(val *TrackingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingSettings(val *TrackingSettings) *NullableTrackingSettings {
	return &NullableTrackingSettings{value: val, isSet: true}
}

func (v NullableTrackingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


